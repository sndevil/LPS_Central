
BaseStationCenter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001fa6  0000203a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003c8  00800070  00800070  0000204a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000027af  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e0  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000095c8  00000000  00000000  00002bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d19  00000000  00000000  0000c186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bed  00000000  00000000  0000de9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000098c  00000000  00000000  0000fa8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000226c  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000039d2  00000000  00000000  00012684  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  00016056  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	baseGetStatusPacket.checksum[0] = crc & 0xFF;
	baseGetStatusPacket.checksum[1] = (crc>>8) & 0xFF;
}

void Message::sendBaseGetStatusPacket()
{
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	//return (crc);
//}

void Message::constructBaseGetStatusPacket()
{
	baseGetStatusPacket.frameHeader = 0x7e;
       8:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_2>
	baseGetStatusPacket.messageType = 1;
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	baseGetStatusPacket.frameTrailer = 0x81;
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	
	unsigned char* packetPointer = (unsigned char*)&baseGetStatusPacket;
	int len = sizeof(BaseGetStatusPacket)-4;

	packetPointer++;
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	int crc = calculateCRC(packetPointer, len);
      18:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__vector_6>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

	baseGetStatusPacket.checksum[0] = crc & 0xFF;
	baseGetStatusPacket.checksum[1] = (crc>>8) & 0xFF;
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

void Message::sendBaseGetStatusPacket()
{
	constructBaseGetStatusPacket();
	
	serial.sendPacket((char*)&baseGetStatusPacket, sizeof(struct BaseGetStatusPacket));
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

void Message::sendBaseGetStatusPacket()
{
	constructBaseGetStatusPacket();
	
	serial.sendPacket((char*)&baseGetStatusPacket, sizeof(struct BaseGetStatusPacket));
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_18>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	68 0b       	sbc	r22, r24

00000056 <__ctors_end>:
      56:	7c 0b       	sbc	r23, r28

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	10 e0       	ldi	r17, 0x00	; 0
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	e6 ea       	ldi	r30, 0xA6	; 166
      6c:	ff e1       	ldi	r31, 0x1F	; 31
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	a0 37       	cpi	r26, 0x70	; 112
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	24 e0       	ldi	r18, 0x04	; 4
      7c:	a0 e7       	ldi	r26, 0x70	; 112
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a8 33       	cpi	r26, 0x38	; 56
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	c6 e5       	ldi	r28, 0x56	; 86
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	22 97       	sbiw	r28, 0x02	; 2
      94:	fe 01       	movw	r30, r28
      96:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__tablejump__>
      9a:	c4 35       	cpi	r28, 0x54	; 84
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <main>
      a4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_ZN7ADF7020C1Ev>:
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
      ac:	fc 01       	movw	r30, r24
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
      ae:	11 82       	std	Z+1, r1	; 0x01
      b0:	13 82       	std	Z+3, r1	; 0x03
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
      b2:	14 82       	std	Z+4, r1	; 0x04
      b4:	15 82       	std	Z+5, r1	; 0x05
      b6:	16 82       	std	Z+6, r1	; 0x06
      b8:	17 82       	std	Z+7, r1	; 0x07
      ba:	10 86       	std	Z+8, r1	; 0x08
      bc:	11 86       	std	Z+9, r1	; 0x09
      be:	12 86       	std	Z+10, r1	; 0x0a
      c0:	08 95       	ret

000000c2 <_ZN7ADF7020D1Ev>:
      c2:	08 95       	ret

000000c4 <_ZN7ADF702018adf7020_InitializeEv>:
      c4:	ac 98       	cbi	0x15, 4	; 21
      c6:	00 00       	nop
      c8:	ac 9a       	sbi	0x15, 4	; 21
      ca:	fc 01       	movw	r30, r24
      cc:	80 81       	ld	r24, Z
		S_clk_WR(1);
      ce:	88 23       	and	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	09 f4       	brne	.+2      	; 0xd4 <_ZN7ADF702018adf7020_InitializeEv+0x10>
      d2:	ba c2       	rjmp	.+1396   	; 0x648 <__stack+0x1e9>
      d4:	8a eb       	ldi	r24, 0xBA	; 186
		_delay_us(5);
		regData <<= 1;
      d6:	81 bb       	out	0x11, r24	; 17
      d8:	97 9a       	sbi	0x12, 7	; 18
      da:	e9 ef       	ldi	r30, 0xF9	; 249
      dc:	f0 e0       	ldi	r31, 0x00	; 0
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
      de:	31 97       	sbiw	r30, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <_ZN7ADF702018adf7020_InitializeEv+0x1a>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <_ZN7ADF702018adf7020_InitializeEv+0x20>
      e4:	00 00       	nop
      e6:	c3 9a       	sbi	0x18, 3	; 24
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
      e8:	84 e7       	ldi	r24, 0x74	; 116
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
      ea:	90 e4       	ldi	r25, 0x40	; 64
      ec:	90 93 73 00 	sts	0x0073, r25
      f0:	80 93 72 00 	sts	0x0072, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	8b e2       	ldi	r24, 0x2B	; 43
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 75 00 	sts	0x0075, r25
      fc:	80 93 74 00 	sts	0x0074, r24
	{
		ADF_Regs.R0_N.bit1.MUXOUT =1;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		_delay_ms(1);
		if( (PIND & 0x04) >> 2)
     100:	10 92 77 00 	sts	0x0077, r1
     104:	10 92 76 00 	sts	0x0076, r1
     108:	ac 01       	movw	r20, r24
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	90 93 79 00 	sts	0x0079, r25
     112:	80 93 78 00 	sts	0x0078, r24
			ToggleLED(0);
		
		_delay_ms(300);
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	90 93 7b 00 	sts	0x007B, r25
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     11e:	80 93 7a 00 	sts	0x007A, r24
     122:	80 91 76 00 	lds	r24, 0x0076
     126:	90 91 77 00 	lds	r25, 0x0077
     12a:	81 70       	andi	r24, 0x01	; 1
     12c:	99 27       	eor	r25, r25
     12e:	8e 60       	ori	r24, 0x0E	; 14
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	ba 2f       	mov	r27, r26
     136:	a9 2f       	mov	r26, r25
     138:	98 2f       	mov	r25, r24
     13a:	88 27       	eor	r24, r24
     13c:	55 27       	eor	r21, r21
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	84 2b       	or	r24, r20
     144:	95 2b       	or	r25, r21
     146:	a6 2b       	or	r26, r22
     148:	b7 2b       	or	r27, r23
     14a:	3f e0       	ldi	r19, 0x0F	; 15
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	aa 1f       	adc	r26, r26
     152:	bb 1f       	adc	r27, r27
     154:	3a 95       	dec	r19
     156:	d1 f7       	brne	.-12     	; 0x14c <_ZN7ADF702018adf7020_InitializeEv+0x88>
     158:	40 91 72 00 	lds	r20, 0x0072
     15c:	50 91 73 00 	lds	r21, 0x0073
     160:	5f 77       	andi	r21, 0x7F	; 127
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	84 2b       	or	r24, r20
     168:	95 2b       	or	r25, r21
     16a:	a6 2b       	or	r26, r22
     16c:	b7 2b       	or	r27, r23
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	aa 1f       	adc	r26, r26
     174:	bb 1f       	adc	r27, r27
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	aa 1f       	adc	r26, r26
     17c:	bb 1f       	adc	r27, r27
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	aa 1f       	adc	r26, r26
     184:	bb 1f       	adc	r27, r27
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	aa 1f       	adc	r26, r26
     18c:	bb 1f       	adc	r27, r27
     18e:	ab 98       	cbi	0x15, 3	; 21
     190:	a8 98       	cbi	0x15, 0	; 21
     192:	30 e2       	ldi	r19, 0x20	; 32
     194:	25 b3       	in	r18, 0x15	; 21
     196:	2b 7f       	andi	r18, 0xFB	; 251
     198:	ac 01       	movw	r20, r24
     19a:	bd 01       	movw	r22, r26
     19c:	44 27       	eor	r20, r20
     19e:	77 fd       	sbrc	r23, 7
     1a0:	43 95       	inc	r20
     1a2:	55 27       	eor	r21, r21
     1a4:	66 27       	eor	r22, r22
     1a6:	77 27       	eor	r23, r23
     1a8:	44 0f       	add	r20, r20
     1aa:	44 0f       	add	r20, r20
     1ac:	42 2b       	or	r20, r18
     1ae:	45 bb       	out	0x15, r20	; 21
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     1b0:	a8 9a       	sbi	0x15, 0	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN7ADF702018adf7020_InitializeEv+0xf0>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_ZN7ADF702018adf7020_InitializeEv+0xf2>
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     1b6:	00 00       	nop
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	aa 1f       	adc	r26, r26
     1be:	bb 1f       	adc	r27, r27
     1c0:	a8 98       	cbi	0x15, 0	; 21
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN7ADF702018adf7020_InitializeEv+0x100>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_ZN7ADF702018adf7020_InitializeEv+0x102>
     1c6:	00 00       	nop
     1c8:	31 50       	subi	r19, 0x01	; 1
     1ca:	21 f7       	brne	.-56     	; 0x194 <_ZN7ADF702018adf7020_InitializeEv+0xd0>
     1cc:	ab 9a       	sbi	0x15, 3	; 21
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN7ADF702018adf7020_InitializeEv+0x10c>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_ZN7ADF702018adf7020_InitializeEv+0x10e>
		S_clk_WR(1);
     1d2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d4:	ab 98       	cbi	0x15, 3	; 21
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	90 e0       	ldi	r25, 0x00	; 0
		_delay_us(5);
		regData <<= 1;
     1da:	90 93 7f 00 	sts	0x007F, r25
     1de:	80 93 7e 00 	sts	0x007E, r24
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     1e2:	10 92 81 00 	sts	0x0081, r1
     1e6:	10 92 80 00 	sts	0x0080, r1
     1ea:	10 92 83 00 	sts	0x0083, r1
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     1ee:	10 92 82 00 	sts	0x0082, r1
     1f2:	10 92 85 00 	sts	0x0085, r1
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     1f6:	10 92 84 00 	sts	0x0084, r1
		_delay_ms(300);
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		if( (PIND & 0x04) >> 2)
     1fa:	10 92 87 00 	sts	0x0087, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	10 92 86 00 	sts	0x0086, r1
     202:	90 93 89 00 	sts	0x0089, r25
     206:	80 93 88 00 	sts	0x0088, r24
     20a:	85 e0       	ldi	r24, 0x05	; 5
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	90 93 8b 00 	sts	0x008B, r25
void ADF7020::ADF_Program_Check(void)
{
	int i;
	unsigned long  data_reg;
	
	for (i=1;i<=5;i++)
     212:	80 93 8a 00 	sts	0x008A, r24
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);;
		
		_delay_ms(300);
	};
	resetLED(0);
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	90 93 8d 00 	sts	0x008D, r25
	ADF_Regs.R0_N.bit1.MUXOUT =3;
     21e:	80 93 8c 00 	sts	0x008C, r24
     222:	10 92 8f 00 	sts	0x008F, r1
     226:	10 92 8e 00 	sts	0x008E, r1
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     22a:	ab 98       	cbi	0x15, 3	; 21
     22c:	a8 98       	cbi	0x15, 0	; 21
     22e:	30 e2       	ldi	r19, 0x20	; 32
     230:	81 e2       	ldi	r24, 0x21	; 33
     232:	90 e8       	ldi	r25, 0x80	; 128
     234:	a5 e3       	ldi	r26, 0x35	; 53
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	25 b3       	in	r18, 0x15	; 21
     23a:	2b 7f       	andi	r18, 0xFB	; 251
     23c:	ac 01       	movw	r20, r24
     23e:	bd 01       	movw	r22, r26
     240:	44 27       	eor	r20, r20
     242:	77 fd       	sbrc	r23, 7
     244:	43 95       	inc	r20
     246:	55 27       	eor	r21, r21
     248:	66 27       	eor	r22, r22
     24a:	77 27       	eor	r23, r23
     24c:	44 0f       	add	r20, r20
     24e:	44 0f       	add	r20, r20
     250:	42 2b       	or	r20, r18
     252:	45 bb       	out	0x15, r20	; 21
     254:	a8 9a       	sbi	0x15, 0	; 21
     256:	00 c0       	rjmp	.+0      	; 0x258 <_ZN7ADF702018adf7020_InitializeEv+0x194>
     258:	00 c0       	rjmp	.+0      	; 0x25a <_ZN7ADF702018adf7020_InitializeEv+0x196>
     25a:	00 00       	nop
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	a8 98       	cbi	0x15, 0	; 21
     266:	00 c0       	rjmp	.+0      	; 0x268 <_ZN7ADF702018adf7020_InitializeEv+0x1a4>
     268:	00 c0       	rjmp	.+0      	; 0x26a <_ZN7ADF702018adf7020_InitializeEv+0x1a6>
     26a:	00 00       	nop
     26c:	31 50       	subi	r19, 0x01	; 1
     26e:	21 f7       	brne	.-56     	; 0x238 <_ZN7ADF702018adf7020_InitializeEv+0x174>
     270:	ab 9a       	sbi	0x15, 3	; 21
     272:	00 c0       	rjmp	.+0      	; 0x274 <_ZN7ADF702018adf7020_InitializeEv+0x1b0>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_ZN7ADF702018adf7020_InitializeEv+0x1b2>
     276:	00 00       	nop
     278:	ab 98       	cbi	0x15, 3	; 21
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 a5 00 	sts	0x00A5, r25
     282:	80 93 a4 00 	sts	0x00A4, r24
     286:	10 92 a7 00 	sts	0x00A7, r1
     28a:	10 92 a6 00 	sts	0x00A6, r1
     28e:	10 92 a9 00 	sts	0x00A9, r1
     292:	10 92 a8 00 	sts	0x00A8, r1
     296:	8f e3       	ldi	r24, 0x3F	; 63
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 ab 00 	sts	0x00AB, r25
     29e:	80 93 aa 00 	sts	0x00AA, r24
     2a2:	81 e2       	ldi	r24, 0x21	; 33
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 ad 00 	sts	0x00AD, r25
     2aa:	80 93 ac 00 	sts	0x00AC, r24
     2ae:	10 92 af 00 	sts	0x00AF, r1
     2b2:	10 92 ae 00 	sts	0x00AE, r1
     2b6:	10 92 b1 00 	sts	0x00B1, r1
     2ba:	10 92 b0 00 	sts	0x00B0, r1

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	90 e0       	ldi	r25, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     2c2:	90 93 b3 00 	sts	0x00B3, r25
     2c6:	80 93 b2 00 	sts	0x00B2, r24
     2ca:	ab 98       	cbi	0x15, 3	; 21
     2cc:	a8 98       	cbi	0x15, 0	; 21
     2ce:	25 b3       	in	r18, 0x15	; 21
     2d0:	2b 7f       	andi	r18, 0xFB	; 251
     2d2:	30 e2       	ldi	r19, 0x20	; 32
     2d4:	82 e1       	ldi	r24, 0x12	; 18
     2d6:	9e ef       	ldi	r25, 0xFE	; 254
     2d8:	a0 e1       	ldi	r26, 0x10	; 16
     2da:	b0 e8       	ldi	r27, 0x80	; 128
     2dc:	44 e0       	ldi	r20, 0x04	; 4
		S_clk_WR(1);
     2de:	0c c0       	rjmp	.+24     	; 0x2f8 <_ZN7ADF702018adf7020_InitializeEv+0x234>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e0:	25 b3       	in	r18, 0x15	; 21
     2e2:	2b 7f       	andi	r18, 0xFB	; 251
     2e4:	ac 01       	movw	r20, r24
		_delay_us(5);
		regData <<= 1;
     2e6:	bd 01       	movw	r22, r26
     2e8:	44 27       	eor	r20, r20
     2ea:	77 fd       	sbrc	r23, 7
     2ec:	43 95       	inc	r20
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     2ee:	55 27       	eor	r21, r21
     2f0:	66 27       	eor	r22, r22
     2f2:	77 27       	eor	r23, r23
     2f4:	44 0f       	add	r20, r20
     2f6:	44 0f       	add	r20, r20
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     2f8:	42 2b       	or	r20, r18
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     2fa:	45 bb       	out	0x15, r20	; 21
     2fc:	a8 9a       	sbi	0x15, 0	; 21
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <_ZN7ADF702018adf7020_InitializeEv+0x23c>
     300:	00 c0       	rjmp	.+0      	; 0x302 <_ZN7ADF702018adf7020_InitializeEv+0x23e>
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     302:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	aa 1f       	adc	r26, r26
     30a:	bb 1f       	adc	r27, r27
     30c:	a8 98       	cbi	0x15, 0	; 21
     30e:	00 c0       	rjmp	.+0      	; 0x310 <_ZN7ADF702018adf7020_InitializeEv+0x24c>
	resetLED(0);
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
     310:	00 c0       	rjmp	.+0      	; 0x312 <_ZN7ADF702018adf7020_InitializeEv+0x24e>
     312:	00 00       	nop
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
     314:	31 50       	subi	r19, 0x01	; 1
     316:	21 f7       	brne	.-56     	; 0x2e0 <_ZN7ADF702018adf7020_InitializeEv+0x21c>
     318:	ab 9a       	sbi	0x15, 3	; 21
     31a:	00 c0       	rjmp	.+0      	; 0x31c <_ZN7ADF702018adf7020_InitializeEv+0x258>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <_ZN7ADF702018adf7020_InitializeEv+0x25a>
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);;
     31e:	00 00       	nop
     320:	ab 98       	cbi	0x15, 3	; 21
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	90 e0       	ldi	r25, 0x00	; 0
		ADF_Regs.R0_N.bit1.MUXOUT =1;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		_delay_ms(1);
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);
     326:	90 93 cc 00 	sts	0x00CC, r25
     32a:	80 93 cb 00 	sts	0x00CB, r24
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
		setLED(0);
     32e:	90 93 ce 00 	sts	0x00CE, r25
	//ADF_ReadBack_Format(SILICON_REV);
}
     332:	80 93 cd 00 	sts	0x00CD, r24
     336:	81 e2       	ldi	r24, 0x21	; 33
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
		setLED(0);
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	90 93 d0 00 	sts	0x00D0, r25
	//R3 Setting
	ADF_Regs.R3_ReceiverCLK.bit1.BBOS_CLK_Divide =2;		//2  for 9.6k bitrate and 8  for 14.71k
	ADF_Regs.R3_ReceiverCLK.bit1.DEMOD_CLK_Divide =2;
	

	ADF_Regs.R3_ReceiverCLK.bit1.CDR_CLK_Divide =33;		//26 for 9.6k bitrate and 17 for 14.71k
     33e:	80 93 cf 00 	sts	0x00CF, r24

	ADF_Regs.R3_ReceiverCLK.bit1.SEQ_CLK_Divide =200;
     342:	88 ec       	ldi	r24, 0xC8	; 200
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 d2 00 	sts	0x00D2, r25
     34a:	80 93 d1 00 	sts	0x00D1, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     34e:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     350:	a8 98       	cbi	0x15, 0	; 21
     352:	30 e2       	ldi	r19, 0x20	; 32
     354:	83 ea       	ldi	r24, 0xA3	; 163
     356:	91 e2       	ldi	r25, 0x21	; 33
     358:	a8 ec       	ldi	r26, 0xC8	; 200
     35a:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     35c:	25 b3       	in	r18, 0x15	; 21
     35e:	2b 7f       	andi	r18, 0xFB	; 251
     360:	ac 01       	movw	r20, r24
     362:	bd 01       	movw	r22, r26
     364:	44 27       	eor	r20, r20
     366:	77 fd       	sbrc	r23, 7
     368:	43 95       	inc	r20
     36a:	55 27       	eor	r21, r21
     36c:	66 27       	eor	r22, r22
     36e:	77 27       	eor	r23, r23
     370:	44 0f       	add	r20, r20
     372:	44 0f       	add	r20, r20
     374:	42 2b       	or	r20, r18
     376:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     378:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	00 c0       	rjmp	.+0      	; 0x37c <_ZN7ADF702018adf7020_InitializeEv+0x2b8>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <_ZN7ADF702018adf7020_InitializeEv+0x2ba>
     37e:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	aa 1f       	adc	r26, r26
     386:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     388:	a8 98       	cbi	0x15, 0	; 21
     38a:	00 c0       	rjmp	.+0      	; 0x38c <_ZN7ADF702018adf7020_InitializeEv+0x2c8>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <_ZN7ADF702018adf7020_InitializeEv+0x2ca>
     38e:	00 00       	nop
     390:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     392:	21 f7       	brne	.-56     	; 0x35c <_ZN7ADF702018adf7020_InitializeEv+0x298>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     394:	ab 9a       	sbi	0x15, 3	; 21
     396:	00 c0       	rjmp	.+0      	; 0x398 <_ZN7ADF702018adf7020_InitializeEv+0x2d4>
     398:	00 c0       	rjmp	.+0      	; 0x39a <_ZN7ADF702018adf7020_InitializeEv+0x2d6>
     39a:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     39c:	ab 98       	cbi	0x15, 3	; 21

	//_delay_us(1);


	//R4 Setting
	ADF_Regs.R4_Demod_Setup.bit1.Demod_Select =1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 d7 00 	sts	0x00D7, r25
     3a6:	80 93 d6 00 	sts	0x00D6, r24
	
	ADF_Regs.R4_Demod_Setup.bit1.PostDemod_BW =5; //5;
     3aa:	25 e0       	ldi	r18, 0x05	; 5
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	30 93 d9 00 	sts	0x00D9, r19
     3b2:	20 93 d8 00 	sts	0x00D8, r18
	ADF_Regs.R4_Demod_Setup.bit1.Demod_Lock_Timeout =0;
     3b6:	10 92 db 00 	sts	0x00DB, r1
     3ba:	10 92 da 00 	sts	0x00DA, r1
	ADF_Regs.R4_Demod_Setup.bit1.Sync_Mode =1;
     3be:	90 93 dd 00 	sts	0x00DD, r25
     3c2:	80 93 dc 00 	sts	0x00DC, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     3c6:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     3c8:	a8 98       	cbi	0x15, 0	; 21
     3ca:	30 e2       	ldi	r19, 0x20	; 32
     3cc:	84 e5       	ldi	r24, 0x54	; 84
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	a0 e0       	ldi	r26, 0x00	; 0
     3d2:	b1 e0       	ldi	r27, 0x01	; 1
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     3d4:	25 b3       	in	r18, 0x15	; 21
     3d6:	2b 7f       	andi	r18, 0xFB	; 251
     3d8:	ac 01       	movw	r20, r24
     3da:	bd 01       	movw	r22, r26
     3dc:	44 27       	eor	r20, r20
     3de:	77 fd       	sbrc	r23, 7
     3e0:	43 95       	inc	r20
     3e2:	55 27       	eor	r21, r21
     3e4:	66 27       	eor	r22, r22
     3e6:	77 27       	eor	r23, r23
     3e8:	44 0f       	add	r20, r20
     3ea:	44 0f       	add	r20, r20
     3ec:	42 2b       	or	r20, r18
     3ee:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     3f0:	a8 9a       	sbi	0x15, 0	; 21
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_ZN7ADF702018adf7020_InitializeEv+0x330>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <_ZN7ADF702018adf7020_InitializeEv+0x332>
     3f6:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	aa 1f       	adc	r26, r26
     3fe:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     400:	a8 98       	cbi	0x15, 0	; 21
     402:	00 c0       	rjmp	.+0      	; 0x404 <_ZN7ADF702018adf7020_InitializeEv+0x340>
     404:	00 c0       	rjmp	.+0      	; 0x406 <_ZN7ADF702018adf7020_InitializeEv+0x342>
     406:	00 00       	nop
     408:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     40a:	21 f7       	brne	.-56     	; 0x3d4 <_ZN7ADF702018adf7020_InitializeEv+0x310>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     40c:	ab 9a       	sbi	0x15, 3	; 21
     40e:	00 c0       	rjmp	.+0      	; 0x410 <_ZN7ADF702018adf7020_InitializeEv+0x34c>
     410:	00 c0       	rjmp	.+0      	; 0x412 <_ZN7ADF702018adf7020_InitializeEv+0x34e>
     412:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     414:	ab 98       	cbi	0x15, 3	; 21
	//Set_Register(0x00214);

	//_delay_us(1);

	//R5 Setting
	ADF_Regs.R5_Sync_Word.bit1.Sync_Length =3;
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 e2 00 	sts	0x00E2, r25
     41e:	80 93 e1 00 	sts	0x00E1, r24
	ADF_Regs.R5_Sync_Word.bit1.Match_Tolerance =0;
     422:	10 92 e4 00 	sts	0x00E4, r1
     426:	10 92 e3 00 	sts	0x00E3, r1
	ADF_Regs.R5_Sync_Word.bit1.Sync_Word_Byte = 0x94D2AD; //same as 0x123456 in 9 bit transmitter
     42a:	8d ea       	ldi	r24, 0xAD	; 173
     42c:	92 ed       	ldi	r25, 0xD2	; 210
     42e:	a4 e9       	ldi	r26, 0x94	; 148
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	80 93 e5 00 	sts	0x00E5, r24
     436:	90 93 e6 00 	sts	0x00E6, r25
     43a:	a0 93 e7 00 	sts	0x00E7, r26
     43e:	b0 93 e8 00 	sts	0x00E8, r27
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     442:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     444:	a8 98       	cbi	0x15, 0	; 21
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     446:	25 b3       	in	r18, 0x15	; 21
     448:	2b 7f       	andi	r18, 0xFB	; 251
     44a:	30 e2       	ldi	r19, 0x20	; 32
     44c:	85 e3       	ldi	r24, 0x35	; 53
     44e:	9d ea       	ldi	r25, 0xAD	; 173
     450:	a2 ed       	ldi	r26, 0xD2	; 210
     452:	b4 e9       	ldi	r27, 0x94	; 148
     454:	44 e0       	ldi	r20, 0x04	; 4
     456:	0c c0       	rjmp	.+24     	; 0x470 <__stack+0x11>
     458:	25 b3       	in	r18, 0x15	; 21
     45a:	2b 7f       	andi	r18, 0xFB	; 251
     45c:	ac 01       	movw	r20, r24
     45e:	bd 01       	movw	r22, r26
     460:	44 27       	eor	r20, r20
     462:	77 fd       	sbrc	r23, 7
     464:	43 95       	inc	r20
     466:	55 27       	eor	r21, r21
     468:	66 27       	eor	r22, r22
     46a:	77 27       	eor	r23, r23
     46c:	44 0f       	add	r20, r20
     46e:	44 0f       	add	r20, r20
     470:	42 2b       	or	r20, r18
     472:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     474:	a8 9a       	sbi	0x15, 0	; 21
     476:	00 c0       	rjmp	.+0      	; 0x478 <__stack+0x19>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__stack+0x1b>
     47a:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     484:	a8 98       	cbi	0x15, 0	; 21
     486:	00 c0       	rjmp	.+0      	; 0x488 <__stack+0x29>
     488:	00 c0       	rjmp	.+0      	; 0x48a <__stack+0x2b>
     48a:	00 00       	nop
     48c:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     48e:	21 f7       	brne	.-56     	; 0x458 <_ZN7ADF702018adf7020_InitializeEv+0x394>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     490:	ab 9a       	sbi	0x15, 3	; 21
     492:	00 c0       	rjmp	.+0      	; 0x494 <__stack+0x35>
     494:	00 c0       	rjmp	.+0      	; 0x496 <__stack+0x37>
     496:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     498:	ab 98       	cbi	0x15, 3	; 21
	//Set_Register(0xAAAA15);
	//Set_Register(0x12345635);

	//_delay_us(1);
	//R6 Setting
	ADF_Regs.R6_Correlator_Demod.bit1.Discrimin_BW =125;//0x0FA;	//110 for 19.2K deviation and 0x46 for 29K
     49a:	8d e7       	ldi	r24, 0x7D	; 125
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	90 93 eb 00 	sts	0x00EB, r25
     4a2:	80 93 ea 00 	sts	0x00EA, r24
	ADF_Regs.R6_Correlator_Demod.bit1.Dot_Product =0;		//0  for 19.2K deviation and 1    for 29K
     4a6:	10 92 ed 00 	sts	0x00ED, r1
     4aa:	10 92 ec 00 	sts	0x00EC, r1
	ADF_Regs.R6_Correlator_Demod.bit1.LNA_Mode =0;
     4ae:	10 92 ef 00 	sts	0x00EF, r1
     4b2:	10 92 ee 00 	sts	0x00EE, r1
	ADF_Regs.R6_Correlator_Demod.bit1.LNA_Current =0;
     4b6:	10 92 f1 00 	sts	0x00F1, r1
     4ba:	10 92 f0 00 	sts	0x00F0, r1
	ADF_Regs.R6_Correlator_Demod.bit1.Mixer_Linearity =0;
     4be:	10 92 f3 00 	sts	0x00F3, r1
     4c2:	10 92 f2 00 	sts	0x00F2, r1
	ADF_Regs.R6_Correlator_Demod.bit1.IF_FilterCal =0;
     4c6:	10 92 f5 00 	sts	0x00F5, r1
     4ca:	10 92 f4 00 	sts	0x00F4, r1
	ADF_Regs.R6_Correlator_Demod.bit1.IF_FilterDivider =0x190;
     4ce:	80 e9       	ldi	r24, 0x90	; 144
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	90 93 f7 00 	sts	0x00F7, r25
     4d6:	80 93 f6 00 	sts	0x00F6, r24
	ADF_Regs.R6_Correlator_Demod.bit1.RxData_InvertBit =1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 f9 00 	sts	0x00F9, r25
     4e2:	80 93 f8 00 	sts	0x00F8, r24
	ADF_Regs.R6_Correlator_Demod.bit1.Demod_ResetBit =0;
     4e6:	10 92 fb 00 	sts	0x00FB, r1
     4ea:	10 92 fa 00 	sts	0x00FA, r1
	ADF_Regs.R6_Correlator_Demod.bit1.Cdr_ResetBit =0;
     4ee:	10 92 fd 00 	sts	0x00FD, r1
     4f2:	10 92 fc 00 	sts	0x00FC, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     4f6:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     4f8:	a8 98       	cbi	0x15, 0	; 21
     4fa:	30 e2       	ldi	r19, 0x20	; 32
     4fc:	86 ed       	ldi	r24, 0xD6	; 214
     4fe:	97 e0       	ldi	r25, 0x07	; 7
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b9 e3       	ldi	r27, 0x39	; 57
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     504:	25 b3       	in	r18, 0x15	; 21
     506:	2b 7f       	andi	r18, 0xFB	; 251
     508:	ac 01       	movw	r20, r24
     50a:	bd 01       	movw	r22, r26
     50c:	44 27       	eor	r20, r20
     50e:	77 fd       	sbrc	r23, 7
     510:	43 95       	inc	r20
     512:	55 27       	eor	r21, r21
     514:	66 27       	eor	r22, r22
     516:	77 27       	eor	r23, r23
     518:	44 0f       	add	r20, r20
     51a:	44 0f       	add	r20, r20
     51c:	42 2b       	or	r20, r18
     51e:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     520:	a8 9a       	sbi	0x15, 0	; 21
     522:	00 c0       	rjmp	.+0      	; 0x524 <__stack+0xc5>
     524:	00 c0       	rjmp	.+0      	; 0x526 <__stack+0xc7>
     526:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	aa 1f       	adc	r26, r26
     52e:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     530:	a8 98       	cbi	0x15, 0	; 21
     532:	00 c0       	rjmp	.+0      	; 0x534 <__stack+0xd5>
     534:	00 c0       	rjmp	.+0      	; 0x536 <__stack+0xd7>
     536:	00 00       	nop
     538:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     53a:	21 f7       	brne	.-56     	; 0x504 <__stack+0xa5>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     53c:	ab 9a       	sbi	0x15, 3	; 21
     53e:	00 c0       	rjmp	.+0      	; 0x540 <__stack+0xe1>
     540:	00 c0       	rjmp	.+0      	; 0x542 <__stack+0xe3>
     542:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     544:	ab 98       	cbi	0x15, 3	; 21
//Set_Register(data_reg);
//Set_Register(0x39000FA6);
//Set_Register(0x19004586);

	//R11 Setting
	ADF_Regs.R11_AFC.bit1.AFC_ScaleCoefficient =0x01a3;
     546:	83 ea       	ldi	r24, 0xA3	; 163
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	90 93 3d 01 	sts	0x013D, r25
     54e:	80 93 3c 01 	sts	0x013C, r24
	ADF_Regs.R11_AFC.bit1.AFC_enableBit =1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	90 93 3f 01 	sts	0x013F, r25
     55a:	80 93 3e 01 	sts	0x013E, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     55e:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     560:	a8 98       	cbi	0x15, 0	; 21
     562:	30 e2       	ldi	r19, 0x20	; 32
     564:	8b e3       	ldi	r24, 0x3B	; 59
     566:	9a e1       	ldi	r25, 0x1A	; 26
     568:	a0 e1       	ldi	r26, 0x10	; 16
     56a:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     56c:	25 b3       	in	r18, 0x15	; 21
     56e:	2b 7f       	andi	r18, 0xFB	; 251
     570:	ac 01       	movw	r20, r24
     572:	bd 01       	movw	r22, r26
     574:	44 27       	eor	r20, r20
     576:	77 fd       	sbrc	r23, 7
     578:	43 95       	inc	r20
     57a:	55 27       	eor	r21, r21
     57c:	66 27       	eor	r22, r22
     57e:	77 27       	eor	r23, r23
     580:	44 0f       	add	r20, r20
     582:	44 0f       	add	r20, r20
     584:	42 2b       	or	r20, r18
     586:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     588:	a8 9a       	sbi	0x15, 0	; 21
     58a:	00 c0       	rjmp	.+0      	; 0x58c <__stack+0x12d>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x12f>
     58e:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 1f       	adc	r26, r26
     596:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     598:	a8 98       	cbi	0x15, 0	; 21
     59a:	00 c0       	rjmp	.+0      	; 0x59c <__stack+0x13d>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <__stack+0x13f>
     59e:	00 00       	nop
     5a0:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     5a2:	21 f7       	brne	.-56     	; 0x56c <__stack+0x10d>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     5a4:	ab 9a       	sbi	0x15, 3	; 21
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <__stack+0x149>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <__stack+0x14b>
     5aa:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     5ac:	ab 98       	cbi	0x15, 3	; 21
	Set_Register(data_reg);
	//Set_Register(0x101a3b);
	//    Set_Register(0x00102F7B);
	//_delay_us(1);
	//R9 Setting
	ADF_Regs.R9_AGC.bit1.AGC_LowThreshold =0x1e;
     5ae:	8e e1       	ldi	r24, 0x1E	; 30
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 1b 01 	sts	0x011B, r25
     5b6:	80 93 1a 01 	sts	0x011A, r24
	ADF_Regs.R9_AGC.bit1.AGC_HighThreshold =0x46;
     5ba:	86 e4       	ldi	r24, 0x46	; 70
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 1d 01 	sts	0x011D, r25
     5c2:	80 93 1c 01 	sts	0x011C, r24
	ADF_Regs.R9_AGC.bit1.AGC_Search =0;
     5c6:	10 92 1f 01 	sts	0x011F, r1
     5ca:	10 92 1e 01 	sts	0x011E, r1
	ADF_Regs.R9_AGC.bit1.Gain_Control =0;
     5ce:	10 92 21 01 	sts	0x0121, r1
     5d2:	10 92 20 01 	sts	0x0120, r1
	ADF_Regs.R9_AGC.bit1.LNA_Gain =3;
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	90 93 23 01 	sts	0x0123, r25
     5de:	80 93 22 01 	sts	0x0122, r24
	ADF_Regs.R9_AGC.bit1.Filter_Gain =2;
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	90 93 25 01 	sts	0x0125, r25
     5ea:	80 93 24 01 	sts	0x0124, r24
	ADF_Regs.R9_AGC.bit1.Filter_Current =0;
     5ee:	10 92 27 01 	sts	0x0127, r1
     5f2:	10 92 26 01 	sts	0x0126, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     5f6:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     5f8:	a8 98       	cbi	0x15, 0	; 21
     5fa:	30 e2       	ldi	r19, 0x20	; 32
     5fc:	89 ee       	ldi	r24, 0xE9	; 233
     5fe:	91 e3       	ldi	r25, 0x31	; 49
     600:	a2 eb       	ldi	r26, 0xB2	; 178
     602:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     604:	25 b3       	in	r18, 0x15	; 21
     606:	2b 7f       	andi	r18, 0xFB	; 251
     608:	ac 01       	movw	r20, r24
     60a:	bd 01       	movw	r22, r26
     60c:	44 27       	eor	r20, r20
     60e:	77 fd       	sbrc	r23, 7
     610:	43 95       	inc	r20
     612:	55 27       	eor	r21, r21
     614:	66 27       	eor	r22, r22
     616:	77 27       	eor	r23, r23
     618:	44 0f       	add	r20, r20
     61a:	44 0f       	add	r20, r20
     61c:	42 2b       	or	r20, r18
     61e:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     620:	a8 9a       	sbi	0x15, 0	; 21
     622:	00 c0       	rjmp	.+0      	; 0x624 <__stack+0x1c5>
     624:	00 c0       	rjmp	.+0      	; 0x626 <__stack+0x1c7>
     626:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	aa 1f       	adc	r26, r26
     62e:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     630:	a8 98       	cbi	0x15, 0	; 21
     632:	00 c0       	rjmp	.+0      	; 0x634 <__stack+0x1d5>
     634:	00 c0       	rjmp	.+0      	; 0x636 <__stack+0x1d7>
     636:	00 00       	nop
     638:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     63a:	21 f7       	brne	.-56     	; 0x604 <__stack+0x1a5>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     63c:	ab 9a       	sbi	0x15, 3	; 21
     63e:	00 c0       	rjmp	.+0      	; 0x640 <__stack+0x1e1>
     640:	00 c0       	rjmp	.+0      	; 0x642 <__stack+0x1e3>
     642:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     644:	ab 98       	cbi	0x15, 3	; 21
     646:	08 95       	ret
	//delay_ms(100);
	//R0 Setting
	if (mode == TRANSCEIVER_MODE_RECEIVER)
	{
		//set data and clock pins as input.
		DDRD=0x82; //0x3A
     648:	82 e8       	ldi	r24, 0x82	; 130
     64a:	81 bb       	out	0x11, r24	; 17
		PA_ENABLE_WR(0);
     64c:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64e:	89 ef       	ldi	r24, 0xF9	; 249
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <__stack+0x1f3>
     656:	00 c0       	rjmp	.+0      	; 0x658 <__stack+0x1f9>
     658:	00 00       	nop
		_delay_ms(1);
		TR_SW_WR(0);
     65a:	97 98       	cbi	0x12, 7	; 18
		
		

		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =15845;//31130;//4096;
     65c:	85 ee       	ldi	r24, 0xE5	; 229
     65e:	9d e3       	ldi	r25, 0x3D	; 61
     660:	90 93 73 00 	sts	0x0073, r25
     664:	80 93 72 00 	sts	0x0072, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio = 43;//106;
     668:	8b e2       	ldi	r24, 0x2B	; 43
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	90 93 75 00 	sts	0x0075, r25
     670:	80 93 74 00 	sts	0x0074, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	90 93 77 00 	sts	0x0077, r25
     67c:	80 93 76 00 	sts	0x0076, r24
     680:	40 91 74 00 	lds	r20, 0x0074
     684:	50 91 75 00 	lds	r21, 0x0075
     688:	40 cd       	rjmp	.-1408   	; 0x10a <_ZN7ADF702018adf7020_InitializeEv+0x46>

0000068a <_ZN7ADF702011adfReadbackEc>:
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
//////////////////////////////////////////////////////////////////////////
uint16_t ADF7020::adfReadback(char readbackMode)
{
     68a:	2f 92       	push	r2
     68c:	3f 92       	push	r3
     68e:	4f 92       	push	r4
     690:	5f 92       	push	r5
     692:	6f 92       	push	r6
     694:	7f 92       	push	r7
     696:	8f 92       	push	r8
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	60 97       	sbiw	r28, 0x10	; 16
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
	char i;
	uint16_t regData=0;
		 
	switch (readbackMode)
     6be:	63 30       	cpi	r22, 0x03	; 3
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <_ZN7ADF702011adfReadbackEc+0x3a>
     6c2:	e8 c1       	rjmp	.+976    	; 0xa94 <_ZN7ADF702011adfReadbackEc+0x40a>
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <_ZN7ADF702011adfReadbackEc+0x3e>
     6c6:	52 c1       	rjmp	.+676    	; 0x96c <_ZN7ADF702011adfReadbackEc+0x2e2>
     6c8:	65 30       	cpi	r22, 0x05	; 5
     6ca:	09 f4       	brne	.+2      	; 0x6ce <_ZN7ADF702011adfReadbackEc+0x44>
     6cc:	b3 c1       	rjmp	.+870    	; 0xa34 <_ZN7ADF702011adfReadbackEc+0x3aa>
     6ce:	08 f4       	brcc	.+2      	; 0x6d2 <_ZN7ADF702011adfReadbackEc+0x48>
     6d0:	68 c1       	rjmp	.+720    	; 0x9a2 <_ZN7ADF702011adfReadbackEc+0x318>
     6d2:	66 30       	cpi	r22, 0x06	; 6
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <_ZN7ADF702011adfReadbackEc+0x4e>
     6d6:	95 c1       	rjmp	.+810    	; 0xa02 <_ZN7ADF702011adfReadbackEc+0x378>
     6d8:	80 91 04 01 	lds	r24, 0x0104
     6dc:	90 91 05 01 	lds	r25, 0x0105
     6e0:	60 91 02 01 	lds	r22, 0x0102
     6e4:	70 91 03 01 	lds	r23, 0x0103
     6e8:	81 70       	andi	r24, 0x01	; 1
     6ea:	99 27       	eor	r25, r25
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	63 70       	andi	r22, 0x03	; 3
     6f6:	77 27       	eor	r23, r23
     6f8:	86 2b       	or	r24, r22
     6fa:	97 2b       	or	r25, r23
     6fc:	60 91 00 01 	lds	r22, 0x0100
     700:	70 91 01 01 	lds	r23, 0x0101
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	63 70       	andi	r22, 0x03	; 3
     70e:	77 27       	eor	r23, r23
     710:	86 2b       	or	r24, r22
     712:	97 2b       	or	r25, r23
     714:	82 95       	swap	r24
     716:	92 95       	swap	r25
     718:	90 7f       	andi	r25, 0xF0	; 240
     71a:	98 27       	eor	r25, r24
     71c:	80 7f       	andi	r24, 0xF0	; 240
     71e:	98 27       	eor	r25, r24
     720:	07 96       	adiw	r24, 0x07	; 7
     722:	2c 01       	movw	r4, r24
     724:	61 2c       	mov	r6, r1
     726:	71 2c       	mov	r7, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     728:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     72a:	a8 98       	cbi	0x15, 0	; 21
     72c:	70 e2       	ldi	r23, 0x20	; 32
     72e:	f8 8a       	std	Y+16, r15	; 0x10
     730:	ef 86       	std	Y+15, r14	; 0x0f
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     732:	65 b3       	in	r22, 0x15	; 21
     734:	6b 7f       	andi	r22, 0xFB	; 251
     736:	73 01       	movw	r14, r6
     738:	62 01       	movw	r12, r4
     73a:	cc 24       	eor	r12, r12
     73c:	f7 fc       	sbrc	r15, 7
     73e:	c3 94       	inc	r12
     740:	dd 24       	eor	r13, r13
     742:	ee 24       	eor	r14, r14
     744:	ff 24       	eor	r15, r15
     746:	cc 0c       	add	r12, r12
     748:	cc 0c       	add	r12, r12
     74a:	c6 2a       	or	r12, r22
     74c:	c5 ba       	out	0x15, r12	; 21
		S_clk_WR(1);
     74e:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     750:	00 c0       	rjmp	.+0      	; 0x752 <_ZN7ADF702011adfReadbackEc+0xc8>
     752:	00 c0       	rjmp	.+0      	; 0x754 <_ZN7ADF702011adfReadbackEc+0xca>
     754:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     756:	44 0c       	add	r4, r4
     758:	55 1c       	adc	r5, r5
     75a:	66 1c       	adc	r6, r6
     75c:	77 1c       	adc	r7, r7
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     75e:	a8 98       	cbi	0x15, 0	; 21
     760:	00 c0       	rjmp	.+0      	; 0x762 <_ZN7ADF702011adfReadbackEc+0xd8>
     762:	00 c0       	rjmp	.+0      	; 0x764 <_ZN7ADF702011adfReadbackEc+0xda>
     764:	00 00       	nop
     766:	71 50       	subi	r23, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     768:	21 f7       	brne	.-56     	; 0x732 <_ZN7ADF702011adfReadbackEc+0xa8>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     76a:	ab 9a       	sbi	0x15, 3	; 21
     76c:	00 c0       	rjmp	.+0      	; 0x76e <_ZN7ADF702011adfReadbackEc+0xe4>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <_ZN7ADF702011adfReadbackEc+0xe6>
     770:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     772:	ab 98       	cbi	0x15, 3	; 21
	}
	
	R7_Generate(ADF_Regs.R7_ReadbackSetup.bit1 , regData);
	Set_Register(regData);
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
     774:	ab 9a       	sbi	0x15, 3	; 21
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     776:	a8 9a       	sbi	0x15, 0	; 21
     778:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     77a:	63 b3       	in	r22, 0x13	; 19
     77c:	61 fb       	bst	r22, 1
     77e:	22 27       	eor	r18, r18
     780:	20 f9       	bld	r18, 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	28 0f       	add	r18, r24
     786:	39 1f       	adc	r19, r25
		regData <<= 1;
     788:	22 0f       	add	r18, r18
     78a:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     78c:	a8 98       	cbi	0x15, 0	; 21
     78e:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     790:	a8 9a       	sbi	0x15, 0	; 21
     792:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     794:	83 b3       	in	r24, 0x13	; 19
     796:	86 95       	lsr	r24
     798:	81 70       	andi	r24, 0x01	; 1
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	1a 82       	std	Y+2, r1	; 0x02
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	28 0f       	add	r18, r24
     7a4:	39 1f       	adc	r19, r25
		regData <<= 1;
     7a6:	22 0f       	add	r18, r18
     7a8:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7aa:	a8 98       	cbi	0x15, 0	; 21
     7ac:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7ae:	a8 9a       	sbi	0x15, 0	; 21
     7b0:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7b2:	83 b3       	in	r24, 0x13	; 19
     7b4:	86 95       	lsr	r24
     7b6:	81 70       	andi	r24, 0x01	; 1
     7b8:	8b 83       	std	Y+3, r24	; 0x03
     7ba:	1c 82       	std	Y+4, r1	; 0x04
     7bc:	eb 81       	ldd	r30, Y+3	; 0x03
     7be:	fc 81       	ldd	r31, Y+4	; 0x04
     7c0:	2e 0f       	add	r18, r30
     7c2:	3f 1f       	adc	r19, r31
		regData <<= 1;
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7c8:	a8 98       	cbi	0x15, 0	; 21
     7ca:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7cc:	a8 9a       	sbi	0x15, 0	; 21
     7ce:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7d0:	83 b3       	in	r24, 0x13	; 19
     7d2:	81 fb       	bst	r24, 1
     7d4:	00 27       	eor	r16, r16
     7d6:	00 f9       	bld	r16, 0
     7d8:	10 e0       	ldi	r17, 0x00	; 0
     7da:	20 0f       	add	r18, r16
     7dc:	31 1f       	adc	r19, r17
		regData <<= 1;
     7de:	22 0f       	add	r18, r18
     7e0:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7e2:	a8 98       	cbi	0x15, 0	; 21
     7e4:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7e6:	a8 9a       	sbi	0x15, 0	; 21
     7e8:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7ea:	83 b3       	in	r24, 0x13	; 19
     7ec:	81 fb       	bst	r24, 1
     7ee:	ee 24       	eor	r14, r14
     7f0:	e0 f8       	bld	r14, 0
     7f2:	f1 2c       	mov	r15, r1
     7f4:	2e 0d       	add	r18, r14
     7f6:	3f 1d       	adc	r19, r15
		regData <<= 1;
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7fc:	a8 98       	cbi	0x15, 0	; 21
     7fe:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     800:	a8 9a       	sbi	0x15, 0	; 21
     802:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     804:	83 b3       	in	r24, 0x13	; 19
     806:	81 fb       	bst	r24, 1
     808:	aa 27       	eor	r26, r26
     80a:	a0 f9       	bld	r26, 0
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	2a 0f       	add	r18, r26
     810:	3b 1f       	adc	r19, r27
		regData <<= 1;
     812:	22 0f       	add	r18, r18
     814:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     816:	a8 98       	cbi	0x15, 0	; 21
     818:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     81a:	a8 9a       	sbi	0x15, 0	; 21
     81c:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     81e:	83 b3       	in	r24, 0x13	; 19
     820:	81 fb       	bst	r24, 1
     822:	ee 27       	eor	r30, r30
     824:	e0 f9       	bld	r30, 0
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	2e 0f       	add	r18, r30
     82a:	3f 1f       	adc	r19, r31
		regData <<= 1;
     82c:	22 0f       	add	r18, r18
     82e:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     830:	a8 98       	cbi	0x15, 0	; 21
     832:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     834:	a8 9a       	sbi	0x15, 0	; 21
     836:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     838:	83 b3       	in	r24, 0x13	; 19
     83a:	81 fb       	bst	r24, 1
     83c:	aa 24       	eor	r10, r10
     83e:	a0 f8       	bld	r10, 0
     840:	b1 2c       	mov	r11, r1
     842:	2a 0d       	add	r18, r10
     844:	3b 1d       	adc	r19, r11
		regData <<= 1;
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     84a:	a8 98       	cbi	0x15, 0	; 21
     84c:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     84e:	a8 9a       	sbi	0x15, 0	; 21
     850:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     852:	83 b3       	in	r24, 0x13	; 19
     854:	81 fb       	bst	r24, 1
     856:	88 24       	eor	r8, r8
     858:	80 f8       	bld	r8, 0
     85a:	91 2c       	mov	r9, r1
     85c:	28 0d       	add	r18, r8
     85e:	39 1d       	adc	r19, r9
		regData <<= 1;
     860:	22 0f       	add	r18, r18
     862:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     864:	a8 98       	cbi	0x15, 0	; 21
     866:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     868:	a8 9a       	sbi	0x15, 0	; 21
     86a:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     86c:	83 b3       	in	r24, 0x13	; 19
     86e:	86 95       	lsr	r24
     870:	81 70       	andi	r24, 0x01	; 1
     872:	8d 83       	std	Y+5, r24	; 0x05
     874:	1e 82       	std	Y+6, r1	; 0x06
     876:	8d 81       	ldd	r24, Y+5	; 0x05
     878:	9e 81       	ldd	r25, Y+6	; 0x06
     87a:	28 0f       	add	r18, r24
     87c:	39 1f       	adc	r19, r25
		regData <<= 1;
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     882:	a8 98       	cbi	0x15, 0	; 21
     884:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     886:	a8 9a       	sbi	0x15, 0	; 21
     888:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     88a:	83 b3       	in	r24, 0x13	; 19
     88c:	86 95       	lsr	r24
     88e:	81 70       	andi	r24, 0x01	; 1
     890:	8f 83       	std	Y+7, r24	; 0x07
     892:	18 86       	std	Y+8, r1	; 0x08
     894:	ef 81       	ldd	r30, Y+7	; 0x07
     896:	f8 85       	ldd	r31, Y+8	; 0x08
     898:	2e 0f       	add	r18, r30
     89a:	3f 1f       	adc	r19, r31
		regData <<= 1;
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8a0:	a8 98       	cbi	0x15, 0	; 21
     8a2:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8a4:	a8 9a       	sbi	0x15, 0	; 21
     8a6:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8a8:	83 b3       	in	r24, 0x13	; 19
     8aa:	86 95       	lsr	r24
     8ac:	81 70       	andi	r24, 0x01	; 1
     8ae:	89 87       	std	Y+9, r24	; 0x09
     8b0:	1a 86       	std	Y+10, r1	; 0x0a
     8b2:	89 85       	ldd	r24, Y+9	; 0x09
     8b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b6:	28 0f       	add	r18, r24
     8b8:	39 1f       	adc	r19, r25
		regData <<= 1;
     8ba:	22 0f       	add	r18, r18
     8bc:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8be:	a8 98       	cbi	0x15, 0	; 21
     8c0:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8c2:	a8 9a       	sbi	0x15, 0	; 21
     8c4:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8c6:	83 b3       	in	r24, 0x13	; 19
     8c8:	86 95       	lsr	r24
     8ca:	81 70       	andi	r24, 0x01	; 1
     8cc:	8b 87       	std	Y+11, r24	; 0x0b
     8ce:	1c 86       	std	Y+12, r1	; 0x0c
     8d0:	eb 85       	ldd	r30, Y+11	; 0x0b
     8d2:	fc 85       	ldd	r31, Y+12	; 0x0c
     8d4:	2e 0f       	add	r18, r30
     8d6:	3f 1f       	adc	r19, r31
		regData <<= 1;
     8d8:	22 0f       	add	r18, r18
     8da:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8dc:	a8 98       	cbi	0x15, 0	; 21
     8de:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8e0:	a8 9a       	sbi	0x15, 0	; 21
     8e2:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8e4:	83 b3       	in	r24, 0x13	; 19
     8e6:	86 95       	lsr	r24
     8e8:	81 70       	andi	r24, 0x01	; 1
     8ea:	8d 87       	std	Y+13, r24	; 0x0d
     8ec:	1e 86       	std	Y+14, r1	; 0x0e
     8ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f2:	28 0f       	add	r18, r24
     8f4:	39 1f       	adc	r19, r25
		regData <<= 1;
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8fa:	a8 98       	cbi	0x15, 0	; 21
     8fc:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8fe:	a8 9a       	sbi	0x15, 0	; 21
     900:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     902:	83 b3       	in	r24, 0x13	; 19
     904:	81 fb       	bst	r24, 1
     906:	22 24       	eor	r2, r2
     908:	20 f8       	bld	r2, 0
     90a:	31 2c       	mov	r3, r1
     90c:	22 0d       	add	r18, r2
     90e:	33 1d       	adc	r19, r3
		regData <<= 1;
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     914:	a8 98       	cbi	0x15, 0	; 21
     916:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     918:	a8 9a       	sbi	0x15, 0	; 21
     91a:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     91c:	83 b3       	in	r24, 0x13	; 19
     91e:	81 fb       	bst	r24, 1
     920:	44 27       	eor	r20, r20
     922:	40 f9       	bld	r20, 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	42 0f       	add	r20, r18
     928:	53 1f       	adc	r21, r19
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     92a:	a8 98       	cbi	0x15, 0	; 21
     92c:	00 00       	nop
		_delay_us(1);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     92e:	ab 9a       	sbi	0x15, 3	; 21
     930:	00 00       	nop
	_delay_us(1);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     932:	ab 98       	cbi	0x15, 3	; 21
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
		_delay_us(1);
		regData += S_Read(); //Read MSB first
		regData <<= 1;
     934:	44 0f       	add	r20, r20
     936:	55 1f       	adc	r21, r21
	Sl_En_WR(1); // After each 32 bits SLE must become 1
	_delay_us(1);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
	
	return regData;
}
     938:	ca 01       	movw	r24, r20
     93a:	60 96       	adiw	r28, 0x10	; 16
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	9f 90       	pop	r9
     95c:	8f 90       	pop	r8
     95e:	7f 90       	pop	r7
     960:	6f 90       	pop	r6
     962:	5f 90       	pop	r5
     964:	4f 90       	pop	r4
     966:	3f 90       	pop	r3
     968:	2f 90       	pop	r2
     96a:	08 95       	ret
uint16_t ADF7020::adfReadback(char readbackMode)
{
	char i;
	uint16_t regData=0;
		 
	switch (readbackMode)
     96c:	61 30       	cpi	r22, 0x01	; 1
     96e:	09 f4       	brne	.+2      	; 0x972 <_ZN7ADF702011adfReadbackEc+0x2e8>
     970:	7a c0       	rjmp	.+244    	; 0xa66 <_ZN7ADF702011adfReadbackEc+0x3dc>
     972:	80 f1       	brcs	.+96     	; 0x9d4 <_ZN7ADF702011adfReadbackEc+0x34a>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case BATTERY_VLOTAGE_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 03 01 	sts	0x0103, r25
     97c:	80 93 02 01 	sts	0x0102, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 1;
     980:	90 93 01 01 	sts	0x0101, r25
     984:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     988:	90 93 05 01 	sts	0x0105, r25
     98c:	80 93 04 01 	sts	0x0104, r24
		break;
     990:	37 e5       	ldi	r19, 0x57	; 87
     992:	43 2e       	mov	r4, r19
     994:	55 24       	eor	r5, r5
     996:	53 94       	inc	r5
     998:	61 2c       	mov	r6, r1
     99a:	71 2c       	mov	r7, r1
     99c:	87 e5       	ldi	r24, 0x57	; 87
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	c3 ce       	rjmp	.-634    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 2;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case ADCIN_VOLTAGE_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 03 01 	sts	0x0103, r25
     9aa:	80 93 02 01 	sts	0x0102, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 3;
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	70 93 01 01 	sts	0x0101, r23
     9b6:	60 93 00 01 	sts	0x0100, r22
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     9ba:	90 93 05 01 	sts	0x0105, r25
     9be:	80 93 04 01 	sts	0x0104, r24
		break;
     9c2:	97 e7       	ldi	r25, 0x77	; 119
     9c4:	49 2e       	mov	r4, r25
     9c6:	55 24       	eor	r5, r5
     9c8:	53 94       	inc	r5
     9ca:	61 2c       	mov	r6, r1
     9cc:	71 2c       	mov	r7, r1
     9ce:	87 e7       	ldi	r24, 0x77	; 119
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	aa ce       	rjmp	.-684    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>
	uint16_t regData=0;
		 
	switch (readbackMode)
	{
		case AFC_READBACK:
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode =0;
     9d4:	10 92 03 01 	sts	0x0103, r1
     9d8:	10 92 02 01 	sts	0x0102, r1
		  ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode =0;
     9dc:	10 92 01 01 	sts	0x0101, r1
     9e0:	10 92 00 01 	sts	0x0100, r1
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit =1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 05 01 	sts	0x0105, r25
     9ec:	80 93 04 01 	sts	0x0104, r24
		break;
     9f0:	57 e0       	ldi	r21, 0x07	; 7
     9f2:	45 2e       	mov	r4, r21
     9f4:	55 24       	eor	r5, r5
     9f6:	53 94       	inc	r5
     9f8:	61 2c       	mov	r6, r1
     9fa:	71 2c       	mov	r7, r1
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	93 ce       	rjmp	.-730    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 3;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case FILTER_CALIBRETION_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 2;
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 03 01 	sts	0x0103, r25
     a0a:	80 93 02 01 	sts	0x0102, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a0e:	10 92 01 01 	sts	0x0101, r1
     a12:	10 92 00 01 	sts	0x0100, r1
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 05 01 	sts	0x0105, r25
     a1e:	80 93 04 01 	sts	0x0104, r24
		break;
     a22:	07 e8       	ldi	r16, 0x87	; 135
     a24:	40 2e       	mov	r4, r16
     a26:	55 24       	eor	r5, r5
     a28:	53 94       	inc	r5
     a2a:	61 2c       	mov	r6, r1
     a2c:	71 2c       	mov	r7, r1
     a2e:	87 e8       	ldi	r24, 0x87	; 135
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	7a ce       	rjmp	.-780    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 3;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case SILICON_REVISION_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 3;
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 03 01 	sts	0x0103, r25
     a3c:	80 93 02 01 	sts	0x0102, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a40:	10 92 01 01 	sts	0x0101, r1
     a44:	10 92 00 01 	sts	0x0100, r1
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 05 01 	sts	0x0105, r25
     a50:	80 93 04 01 	sts	0x0104, r24
		break;
     a54:	87 ec       	ldi	r24, 0xC7	; 199
     a56:	48 2e       	mov	r4, r24
     a58:	55 24       	eor	r5, r5
     a5a:	53 94       	inc	r5
     a5c:	61 2c       	mov	r6, r1
     a5e:	71 2c       	mov	r7, r1
     a60:	87 ec       	ldi	r24, 0xC7	; 199
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	61 ce       	rjmp	.-830    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode =0;
		  ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode =0;
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit =1;
		break;
		case RSSI_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	90 93 03 01 	sts	0x0103, r25
     a6e:	80 93 02 01 	sts	0x0102, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a72:	10 92 01 01 	sts	0x0101, r1
     a76:	10 92 00 01 	sts	0x0100, r1
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a7a:	90 93 05 01 	sts	0x0105, r25
     a7e:	80 93 04 01 	sts	0x0104, r24
		break;
     a82:	47 e4       	ldi	r20, 0x47	; 71
     a84:	44 2e       	mov	r4, r20
     a86:	55 24       	eor	r5, r5
     a88:	53 94       	inc	r5
     a8a:	61 2c       	mov	r6, r1
     a8c:	71 2c       	mov	r7, r1
     a8e:	87 e4       	ldi	r24, 0x47	; 71
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	4a ce       	rjmp	.-876    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case TEMPERATURE_SENSOR_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 03 01 	sts	0x0103, r25
     a9c:	80 93 02 01 	sts	0x0102, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 2;
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	70 93 01 01 	sts	0x0101, r23
     aa8:	60 93 00 01 	sts	0x0100, r22
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     aac:	90 93 05 01 	sts	0x0105, r25
     ab0:	80 93 04 01 	sts	0x0104, r24
		break;
     ab4:	27 e6       	ldi	r18, 0x67	; 103
     ab6:	42 2e       	mov	r4, r18
     ab8:	55 24       	eor	r5, r5
     aba:	53 94       	inc	r5
     abc:	61 2c       	mov	r6, r1
     abe:	71 2c       	mov	r7, r1
     ac0:	87 e6       	ldi	r24, 0x67	; 103
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	31 ce       	rjmp	.-926    	; 0x728 <_ZN7ADF702011adfReadbackEc+0x9e>

00000ac6 <_ZN7ADF70207setModeE14TranceiverMode>:
	
	return regData;
}
//////////////////////////////////////////////////////////////////////////
void ADF7020::setMode(TranceiverMode mode)
{
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	ec 01       	movw	r28, r24
	this->mode = mode;
     acc:	68 83       	st	Y, r22
	return receiveDataFlag;
}
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     ace:	61 11       	cpse	r22, r1
     ad0:	16 c0       	rjmp	.+44     	; 0xafe <_ZN7ADF70207setModeE14TranceiverMode+0x38>
		// INT0: Off
		// INT1: On
		// INT1 Mode: Rising Edge
		// INT2: On
		// INT2 Mode: Rising Edge
		GICR|=0xA0;
     ad2:	8b b7       	in	r24, 0x3b	; 59
     ad4:	80 6a       	ori	r24, 0xA0	; 160
     ad6:	8b bf       	out	0x3b, r24	; 59
		MCUCR=0x0C;
     ad8:	8c e0       	ldi	r24, 0x0C	; 12
     ada:	85 bf       	out	0x35, r24	; 53
		MCUCSR=0x40;
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	84 bf       	out	0x34, r24	; 52
		GIFR=0xA0;
     ae0:	80 ea       	ldi	r24, 0xA0	; 160
     ae2:	8a bf       	out	0x3a, r24	; 58
		//// INT2 Mode: Rising Edge
		//GICR|=0x20;
		//MCUCR=0x00;
		//MCUCSR=0x40;
		//GIFR=0x20;
		serial.init(19200);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	7b e4       	ldi	r23, 0x4B	; 75
     ae8:	8f ea       	ldi	r24, 0xAF	; 175
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN6Serial4initEi>
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
		//TIMSK=0x00;
	//else
		TIMSK=0x10;
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	89 bf       	out	0x39, r24	; 57
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     af4:	ce 01       	movw	r24, r28
	
	
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     afa:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_ZN7ADF702018adf7020_InitializeEv>
	{
		// External Interrupt(s) initialization
		// INT0: Off
		// INT1: Off
		// INT2: Off
		GICR &=0x0F;
     afe:	8b b7       	in	r24, 0x3b	; 59
     b00:	8f 70       	andi	r24, 0x0F	; 15
     b02:	8b bf       	out	0x3b, r24	; 59
		GIFR=0x00;
     b04:	1a be       	out	0x3a, r1	; 58
		MCUCR=0x00;
     b06:	15 be       	out	0x35, r1	; 53
		MCUCSR=0x00;
     b08:	14 be       	out	0x34, r1	; 52
		serial.init(19200);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	7b e4       	ldi	r23, 0x4B	; 75
     b0e:	8f ea       	ldi	r24, 0xAF	; 175
     b10:	93 e0       	ldi	r25, 0x03	; 3
     b12:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN6Serial4initEi>
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
		//TIMSK=0x00;
	//else
		TIMSK=0x10;
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	89 bf       	out	0x39, r24	; 57
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     b1a:	ce 01       	movw	r24, r28
	
	
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     b20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_ZN7ADF702018adf7020_InitializeEv>

00000b24 <_ZN7ADF702014receiveInt1ISREv>:
	
}

///////////////////////////////////////////////////
void ADF7020::receiveInt1ISR()
{
     b24:	fc 01       	movw	r30, r24
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     b26:	80 81       	ld	r24, Z
     b28:	81 11       	cpse	r24, r1
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <_ZN7ADF702014receiveInt1ISREv+0xe>
		{
			if ( receivePreambleDetect )
     b2c:	82 85       	ldd	r24, Z+10	; 0x0a
     b2e:	81 11       	cpse	r24, r1
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <_ZN7ADF702014receiveInt1ISREv+0x10>
     b32:	08 95       	ret
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::receiveBit()
{
	if( receiveBitIndex < 8)
     b34:	86 81       	ldd	r24, Z+6	; 0x06
     b36:	88 30       	cpi	r24, 0x08	; 8
     b38:	38 f4       	brcc	.+14     	; 0xb48 <_ZN7ADF702014receiveInt1ISREv+0x24>
	{
		receivedByteShadow <<= 1;
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	99 0f       	add	r25, r25
     b3e:	93 83       	std	Z+3, r25	; 0x03
		if (Data_IO_RD())
     b40:	84 9b       	sbis	0x10, 4	; 16
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <_ZN7ADF702014receiveInt1ISREv+0x24>
			receivedByteShadow |= 1;
     b44:	91 60       	ori	r25, 0x01	; 1
     b46:	93 83       	std	Z+3, r25	; 0x03
	}
	
		
	receiveBitIndex ++;
     b48:	8f 5f       	subi	r24, 0xFF	; 255
     b4a:	86 83       	std	Z+6, r24	; 0x06
	
	if (receiveBitIndex==9)
     b4c:	89 30       	cpi	r24, 0x09	; 9
     b4e:	89 f7       	brne	.-30     	; 0xb32 <_ZN7ADF702014receiveInt1ISREv+0xe>
	{
		receiveBitIndex = 0;
     b50:	16 82       	std	Z+6, r1	; 0x06
		receiveDataFlag = true;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	81 87       	std	Z+9, r24	; 0x09
		receivedByte = receivedByteShadow;
     b56:	83 81       	ldd	r24, Z+3	; 0x03
     b58:	84 83       	std	Z+4, r24	; 0x04
		receivedByteShadow = 0;
     b5a:	13 82       	std	Z+3, r1	; 0x03
     b5c:	08 95       	ret

00000b5e <_ZN7ADF702014receiveInt2ISREv>:
	
}
//////////////////////////////////////////////////////////////////////////
void ADF7020::receiveInt2ISR()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     b5e:	fc 01       	movw	r30, r24
     b60:	20 81       	ld	r18, Z
     b62:	21 11       	cpse	r18, r1
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <_ZN7ADF702014receiveInt2ISREv+0xc>
	{
		receivePreambleDetect = true;
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	22 87       	std	Z+10, r18	; 0x0a
     b6a:	08 95       	ret

00000b6c <_ZN7ADF702016transmitTimerISREv>:
		return;
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::transmitTimerISR()
{
     b6c:	fc 01       	movw	r30, r24
		//return ;
	//} 
	//else
	{
		
		Data_IO_WR (oldTransmitBit);
     b6e:	22 b3       	in	r18, 0x12	; 18
     b70:	87 81       	ldd	r24, Z+7	; 0x07
     b72:	30 e1       	ldi	r19, 0x10	; 16
     b74:	83 9f       	mul	r24, r19
     b76:	c0 01       	movw	r24, r0
     b78:	11 24       	eor	r1, r1
     b7a:	2f 7e       	andi	r18, 0xEF	; 239
     b7c:	28 2b       	or	r18, r24
     b7e:	22 bb       	out	0x12, r18	; 18
		//TCNT1L=66;		//for baudrate  9600/7 Kbps
		//timerCounter ++;		//timerCounter>6
		//if (timerCounter > 6) 
		{
		//	timerCounter =0;
		if ( sendBitIndex == 8 )
     b80:	45 81       	ldd	r20, Z+5	; 0x05
     b82:	48 30       	cpi	r20, 0x08	; 8
     b84:	89 f0       	breq	.+34     	; 0xba8 <_ZN7ADF702016transmitTimerISREv+0x3c>
			oldTransmitBit = 1 - oldTransmitBit ;
		else
			oldTransmitBit = ((sendBufferShadow >> (7-sendBitIndex) ) & 1 );
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	27 e0       	ldi	r18, 0x07	; 7
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	24 1b       	sub	r18, r20
     b90:	31 09       	sbc	r19, r1
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <_ZN7ADF702016transmitTimerISREv+0x2c>
     b94:	95 95       	asr	r25
     b96:	87 95       	ror	r24
     b98:	2a 95       	dec	r18
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <_ZN7ADF702016transmitTimerISREv+0x28>
     b9c:	81 70       	andi	r24, 0x01	; 1
     b9e:	99 27       	eor	r25, r25
     ba0:	87 83       	std	Z+7, r24	; 0x07
			
		sendBitIndex ++;
     ba2:	4f 5f       	subi	r20, 0xFF	; 255
     ba4:	45 83       	std	Z+5, r20	; 0x05
     ba6:	08 95       	ret
		//timerCounter ++;		//timerCounter>6
		//if (timerCounter > 6) 
		{
		//	timerCounter =0;
		if ( sendBitIndex == 8 )
			oldTransmitBit = 1 - oldTransmitBit ;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	97 81       	ldd	r25, Z+7	; 0x07
     bac:	28 2f       	mov	r18, r24
     bae:	29 1b       	sub	r18, r25
     bb0:	27 83       	std	Z+7, r18	; 0x07
			
		sendBitIndex ++;
			
			if ( sendBitIndex == 9 )
			{
				sendBufferShadow = sendBuffer;
     bb2:	91 81       	ldd	r25, Z+1	; 0x01
     bb4:	92 83       	std	Z+2, r25	; 0x02
				sendBuffer =0 ;
     bb6:	11 82       	std	Z+1, r1	; 0x01
				sendBitIndex = 0;
     bb8:	15 82       	std	Z+5, r1	; 0x05
				transmitBufferEmpty =true;
     bba:	80 87       	std	Z+8, r24	; 0x08
     bbc:	08 95       	ret

00000bbe <_ZN7ADF70208sendByteEc>:
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::sendByte(char data)
{
		sendBuffer = data;
     bbe:	fc 01       	movw	r30, r24
     bc0:	61 83       	std	Z+1, r22	; 0x01
		transmitBufferEmpty= false;
     bc2:	10 86       	std	Z+8, r1	; 0x08
     bc4:	08 95       	ret

00000bc6 <_ZN7ADF702018isTransmitterReadyEv>:
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isTransmitterReady()
{
	return transmitBufferEmpty;
}
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 85       	ldd	r24, Z+8	; 0x08
     bca:	08 95       	ret

00000bcc <_ZN7ADF702011receiveByteEv>:
	}
}
//////////////////////////////////////////////////////////////////////////
char ADF7020::receiveByte()
{
	receiveDataFlag = false;
     bcc:	fc 01       	movw	r30, r24
     bce:	11 86       	std	Z+9, r1	; 0x09
	return receivedByte;
}
     bd0:	84 81       	ldd	r24, Z+4	; 0x04
     bd2:	08 95       	ret

00000bd4 <_ZN7ADF702018isNewDataAvailableEv>:
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isNewDataAvailable()
{
	//receiveDataFlag=1;
	return receiveDataFlag;
}
     bd4:	fc 01       	movw	r30, r24
     bd6:	81 85       	ldd	r24, Z+9	; 0x09
     bd8:	08 95       	ret

00000bda <_ZN7ADF702010isReceiverEv>:
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
     bda:	fc 01       	movw	r30, r24
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 81       	ld	r25, Z
     be0:	91 11       	cpse	r25, r1
     be2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return true;
	}
	else
		return false;
}
     be4:	08 95       	ret

00000be6 <_ZN7ADF702020clearPreaambleDetectEv>:
//////////////////////////////////////////////////////////////////////////
void ADF7020::clearPreaambleDetect()
{
	receivePreambleDetect = false;
     be6:	fc 01       	movw	r30, r24
     be8:	12 86       	std	Z+10, r1	; 0x0a
     bea:	08 95       	ret

00000bec <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>:
void ADF7020::adf7020_ChangeMode( TranceiverMode mode )
{
	
	long int data_reg;
	
	this->mode = mode;
     bec:	fc 01       	movw	r30, r24
     bee:	60 83       	st	Z, r22
	return receiveDataFlag;
}
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     bf0:	61 11       	cpse	r22, r1
     bf2:	95 c0       	rjmp	.+298    	; 0xd1e <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x132>
		// INT0: Off
		// INT1: On
		// INT1 Mode: Rising Edge
		// INT2: On
		// INT2 Mode: Rising Edge
		GICR|=0xA0;
     bf4:	8b b7       	in	r24, 0x3b	; 59
     bf6:	80 6a       	ori	r24, 0xA0	; 160
     bf8:	8b bf       	out	0x3b, r24	; 59
		MCUCR=0x0C;
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	85 bf       	out	0x35, r24	; 53
		MCUCSR=0x40;
     bfe:	80 e4       	ldi	r24, 0x40	; 64
     c00:	84 bf       	out	0x34, r24	; 52
		GIFR=0xA0;
     c02:	80 ea       	ldi	r24, 0xA0	; 160
     c04:	8a bf       	out	0x3a, r24	; 58
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
	//TIMSK=0x00;
	//else
	TIMSK=0x10;
     c06:	80 e1       	ldi	r24, 0x10	; 16
     c08:	89 bf       	out	0x39, r24	; 57

	
	
	
	CE_WR(0);
     c0a:	ac 98       	cbi	0x15, 4	; 21
     c0c:	00 00       	nop
	_delay_us(1);
	CE_WR(1);
     c0e:	ac 9a       	sbi	0x15, 4	; 21
	//delay_ms(100);
	//R0 Setting
	if (mode == TRANSCEIVER_MODE_RECEIVER)
	{
		//set data and clock pins as input.
		DDRD=0x82; //0x3A
     c10:	82 e8       	ldi	r24, 0x82	; 130
     c12:	81 bb       	out	0x11, r24	; 17
		PA_ENABLE_WR(0);
     c14:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c16:	89 ef       	ldi	r24, 0xF9	; 249
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x2e>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x34>
     c20:	00 00       	nop
		_delay_ms(1);
		TR_SW_WR(0);
     c22:	97 98       	cbi	0x12, 7	; 18
		
		

		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =15845;//31130;//4096;
     c24:	85 ee       	ldi	r24, 0xE5	; 229
     c26:	9d e3       	ldi	r25, 0x3D	; 61
     c28:	90 93 73 00 	sts	0x0073, r25
     c2c:	80 93 72 00 	sts	0x0072, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio = 43;//106;
     c30:	8b e2       	ldi	r24, 0x2B	; 43
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 75 00 	sts	0x0075, r25
     c38:	80 93 74 00 	sts	0x0074, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 77 00 	sts	0x0077, r25
     c44:	80 93 76 00 	sts	0x0076, r24
     c48:	40 91 74 00 	lds	r20, 0x0074
     c4c:	50 91 75 00 	lds	r21, 0x0075
		
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =16500;//16500;//4096;//22938;
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio =43;//107//22 in rx
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 0;
	}
	ADF_Regs.R0_N.bit1.PLL_enablebit =1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	90 93 79 00 	sts	0x0079, r25
     c58:	80 93 78 00 	sts	0x0078, r24
	ADF_Regs.R0_N.bit1.MUXOUT =3;
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 7b 00 	sts	0x007B, r25
     c64:	80 93 7a 00 	sts	0x007A, r24
	
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     c68:	80 91 76 00 	lds	r24, 0x0076
     c6c:	90 91 77 00 	lds	r25, 0x0077
     c70:	81 70       	andi	r24, 0x01	; 1
     c72:	99 27       	eor	r25, r25
     c74:	8e 60       	ori	r24, 0x0E	; 14
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ba 2f       	mov	r27, r26
     c7c:	a9 2f       	mov	r26, r25
     c7e:	98 2f       	mov	r25, r24
     c80:	88 27       	eor	r24, r24
     c82:	55 27       	eor	r21, r21
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	84 2b       	or	r24, r20
     c8a:	95 2b       	or	r25, r21
     c8c:	a6 2b       	or	r26, r22
     c8e:	b7 2b       	or	r27, r23
     c90:	3f e0       	ldi	r19, 0x0F	; 15
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	3a 95       	dec	r19
     c9c:	d1 f7       	brne	.-12     	; 0xc92 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0xa6>
     c9e:	40 91 72 00 	lds	r20, 0x0072
     ca2:	50 91 73 00 	lds	r21, 0x0073
     ca6:	5f 77       	andi	r21, 0x7F	; 127
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	84 2b       	or	r24, r20
     cae:	95 2b       	or	r25, r21
     cb0:	a6 2b       	or	r26, r22
     cb2:	b7 2b       	or	r27, r23
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	aa 1f       	adc	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	aa 1f       	adc	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	aa 1f       	adc	r26, r26
     cca:	bb 1f       	adc	r27, r27
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	aa 1f       	adc	r26, r26
     cd2:	bb 1f       	adc	r27, r27
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     cd4:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     cd6:	a8 98       	cbi	0x15, 0	; 21
     cd8:	30 e2       	ldi	r19, 0x20	; 32
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     cda:	25 b3       	in	r18, 0x15	; 21
     cdc:	2b 7f       	andi	r18, 0xFB	; 251
     cde:	ac 01       	movw	r20, r24
     ce0:	bd 01       	movw	r22, r26
     ce2:	44 27       	eor	r20, r20
     ce4:	77 fd       	sbrc	r23, 7
     ce6:	43 95       	inc	r20
     ce8:	55 27       	eor	r21, r21
     cea:	66 27       	eor	r22, r22
     cec:	77 27       	eor	r23, r23
     cee:	44 0f       	add	r20, r20
     cf0:	44 0f       	add	r20, r20
     cf2:	42 2b       	or	r20, r18
     cf4:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     cf6:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x10e>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x110>
     cfc:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	aa 1f       	adc	r26, r26
     d04:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     d06:	a8 98       	cbi	0x15, 0	; 21
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x11e>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x120>
     d0c:	00 00       	nop
     d0e:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     d10:	21 f7       	brne	.-56     	; 0xcda <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0xee>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     d12:	ab 9a       	sbi	0x15, 3	; 21
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x12a>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x12c>
     d18:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     d1a:	ab 98       	cbi	0x15, 3	; 21
     d1c:	08 95       	ret
	{
		// External Interrupt(s) initialization
		// INT0: Off
		// INT1: Off
		// INT2: Off
		GICR &=0x0F;
     d1e:	8b b7       	in	r24, 0x3b	; 59
     d20:	8f 70       	andi	r24, 0x0F	; 15
     d22:	8b bf       	out	0x3b, r24	; 59
		GIFR=0x00;
     d24:	1a be       	out	0x3a, r1	; 58
		MCUCR=0x00;
     d26:	15 be       	out	0x35, r1	; 53
		MCUCSR=0x00;
     d28:	14 be       	out	0x34, r1	; 52
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
	//TIMSK=0x00;
	//else
	TIMSK=0x10;
     d2a:	80 e1       	ldi	r24, 0x10	; 16
     d2c:	89 bf       	out	0x39, r24	; 57

	
	
	
	CE_WR(0);
     d2e:	ac 98       	cbi	0x15, 4	; 21
     d30:	00 00       	nop
	_delay_us(1);
	CE_WR(1);
     d32:	ac 9a       	sbi	0x15, 4	; 21
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
	}
	else
	{
		//set data and clock port as aoutput.
		DDRD=0xBA;
     d34:	8a eb       	ldi	r24, 0xBA	; 186
     d36:	81 bb       	out	0x11, r24	; 17
		
		TR_SW_WR(1);
     d38:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d3a:	e9 ef       	ldi	r30, 0xF9	; 249
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x152>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x158>
     d44:	00 00       	nop
		_delay_ms(1);
		PA_ENABLE_WR(1);
     d46:	c3 9a       	sbi	0x18, 3	; 24
		
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =16500;//16500;//4096;//22938;
     d48:	84 e7       	ldi	r24, 0x74	; 116
     d4a:	90 e4       	ldi	r25, 0x40	; 64
     d4c:	90 93 73 00 	sts	0x0073, r25
     d50:	80 93 72 00 	sts	0x0072, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio =43;//107//22 in rx
     d54:	8b e2       	ldi	r24, 0x2B	; 43
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 75 00 	sts	0x0075, r25
     d5c:	80 93 74 00 	sts	0x0074, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 0;
     d60:	10 92 77 00 	sts	0x0077, r1
     d64:	10 92 76 00 	sts	0x0076, r1
     d68:	ac 01       	movw	r20, r24
     d6a:	72 cf       	rjmp	.-284    	; 0xc50 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x64>

00000d6c <_ZN7ADF702018isPreambleDetectedEv>:

//////////////////////////////////////////////////////////////////////////
bool ADF7020::isPreambleDetected()
{
	return receivePreambleDetect;
     d6c:	fc 01       	movw	r30, r24
     d6e:	82 85       	ldd	r24, Z+10	; 0x0a
     d70:	08 95       	ret

00000d72 <_ZN4FIFOC1Ev>:
#include "GlobalVariables.h"
#include <avr/interrupt.h>
// default constructor
FIFO::FIFO()
{
	readIndex = 0;
     d72:	fc 01       	movw	r30, r24
     d74:	e7 58       	subi	r30, 0x87	; 135
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	10 82       	st	Z, r1
	writeIndex = 0;
     d7c:	fc 01       	movw	r30, r24
     d7e:	e5 58       	subi	r30, 0x85	; 133
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	11 82       	std	Z+1, r1	; 0x01
     d84:	10 82       	st	Z, r1
     d86:	08 95       	ret

00000d88 <_ZN4FIFOD1Ev>:
} //FIFO

// default destructor
FIFO::~FIFO()
     d88:	08 95       	ret

00000d8a <_ZN4FIFO8readByteEv>:
{
} //~FIFO

char FIFO::readByte()
{
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
     d98:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     d9c:	fe 01       	movw	r30, r28
     d9e:	e5 58       	subi	r30, 0x85	; 133
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	40 81       	ld	r20, Z
     da4:	51 81       	ldd	r21, Z+1	; 0x01
     da6:	8e 01       	movw	r16, r28
     da8:	07 58       	subi	r16, 0x87	; 135
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	f8 01       	movw	r30, r16
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	42 17       	cp	r20, r18
     db4:	53 07       	cpc	r21, r19
     db6:	4c f5       	brge	.+82     	; 0xe0a <_ZN4FIFO8readByteEv+0x80>
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     db8:	42 1b       	sub	r20, r18
     dba:	53 0b       	sbc	r21, r19
     dbc:	7a 01       	movw	r14, r20
     dbe:	f9 e7       	ldi	r31, 0x79	; 121
     dc0:	ef 0e       	add	r14, r31
     dc2:	f1 1c       	adc	r15, r1
		
	restoreIntrrupt( intTemp );
     dc4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     dc8:	1e 14       	cp	r1, r14
     dca:	1f 04       	cpc	r1, r15
     dcc:	34 f5       	brge	.+76     	; 0xe1a <_ZN4FIFO8readByteEv+0x90>
	{
		temp = fifoBuffer[readIndex];
     dce:	f8 01       	movw	r30, r16
     dd0:	20 81       	ld	r18, Z
     dd2:	31 81       	ldd	r19, Z+1	; 0x01
     dd4:	c2 0f       	add	r28, r18
     dd6:	d3 1f       	adc	r29, r19
     dd8:	88 81       	ld	r24, Y
		readIndex ++ ;
     dda:	2f 5f       	subi	r18, 0xFF	; 255
     ddc:	3f 4f       	sbci	r19, 0xFF	; 255
		if ( readIndex > MAX_FIFO_LENGTH )
     dde:	29 37       	cpi	r18, 0x79	; 121
     de0:	31 05       	cpc	r19, r1
     de2:	54 f0       	brlt	.+20     	; 0xdf8 <_ZN4FIFO8readByteEv+0x6e>
			readIndex =0;
     de4:	f8 01       	movw	r30, r16
     de6:	11 82       	std	Z+1, r1	; 0x01
     de8:	10 82       	st	Z, r1
	}
	return temp;
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	08 95       	ret
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
	{
		temp = fifoBuffer[readIndex];
		readIndex ++ ;
     df8:	31 83       	std	Z+1, r19	; 0x01
     dfa:	20 83       	st	Z, r18
		if ( readIndex > MAX_FIFO_LENGTH )
			readIndex =0;
	}
	return temp;
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
     e0a:	7a 01       	movw	r14, r20
     e0c:	e2 1a       	sub	r14, r18
     e0e:	f3 0a       	sbc	r15, r19
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
		
	restoreIntrrupt( intTemp );
     e10:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     e14:	1e 14       	cp	r1, r14
     e16:	1f 04       	cpc	r1, r15
     e18:	d4 f2       	brlt	.-76     	; 0xdce <_ZN4FIFO8readByteEv+0x44>
{
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
     e1a:	80 e0       	ldi	r24, 0x00	; 0
		readIndex ++ ;
		if ( readIndex > MAX_FIFO_LENGTH )
			readIndex =0;
	}
	return temp;
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	08 95       	ret

00000e2a <_ZN4FIFO9writeByteEc>:

void FIFO::writeByte( char data )
{
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	ec 01       	movw	r28, r24
     e3a:	d6 2e       	mov	r13, r22
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
     e3c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     e40:	8e 01       	movw	r16, r28
     e42:	05 58       	subi	r16, 0x85	; 133
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	f8 01       	movw	r30, r16
     e48:	40 81       	ld	r20, Z
     e4a:	51 81       	ldd	r21, Z+1	; 0x01
     e4c:	fe 01       	movw	r30, r28
     e4e:	e7 58       	subi	r30, 0x87	; 135
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	20 81       	ld	r18, Z
     e54:	31 81       	ldd	r19, Z+1	; 0x01
     e56:	42 17       	cp	r20, r18
     e58:	53 07       	cpc	r21, r19
     e5a:	14 f5       	brge	.+68     	; 0xea0 <_ZN4FIFO9writeByteEc+0x76>
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     e5c:	42 1b       	sub	r20, r18
     e5e:	53 0b       	sbc	r21, r19
     e60:	7a 01       	movw	r14, r20
     e62:	f9 e7       	ldi	r31, 0x79	; 121
     e64:	ef 0e       	add	r14, r31
     e66:	f1 1c       	adc	r15, r1
		
	restoreIntrrupt( intTemp );
     e68:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
	return temp;
}

void FIFO::writeByte( char data )
{
	if (getFifoFullLength() < MAX_FIFO_LENGTH )
     e6c:	88 e7       	ldi	r24, 0x78	; 120
     e6e:	e8 16       	cp	r14, r24
     e70:	f1 04       	cpc	r15, r1
     e72:	74 f4       	brge	.+28     	; 0xe90 <_ZN4FIFO9writeByteEc+0x66>
	{
		fifoBuffer [writeIndex] = data;
     e74:	f8 01       	movw	r30, r16
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	c8 0f       	add	r28, r24
     e7c:	d9 1f       	adc	r29, r25
     e7e:	d8 82       	st	Y, r13
		writeIndex ++ ;
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
		if ( writeIndex > MAX_FIFO_LENGTH )
     e86:	89 37       	cpi	r24, 0x79	; 121
     e88:	91 05       	cpc	r25, r1
     e8a:	14 f0       	brlt	.+4      	; 0xe90 <_ZN4FIFO9writeByteEc+0x66>
			writeIndex =0;
     e8c:	11 82       	std	Z+1, r1	; 0x01
     e8e:	10 82       	st	Z, r1
	}
	
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	08 95       	ret
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
     ea0:	7a 01       	movw	r14, r20
     ea2:	e2 1a       	sub	r14, r18
     ea4:	f3 0a       	sbc	r15, r19
     ea6:	e0 cf       	rjmp	.-64     	; 0xe68 <_ZN4FIFO9writeByteEc+0x3e>

00000ea8 <_ZN4FIFO10readStringEPci>:
	}
	
}

void FIFO::readString( char *str,int strSize )
{
     ea8:	8f 92       	push	r8
     eaa:	9f 92       	push	r9
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	5c 01       	movw	r10, r24
     ec2:	7b 01       	movw	r14, r22
     ec4:	ea 01       	movw	r28, r20
	char temp;
	if ( strSize > MAX_FIFO_LENGTH )
     ec6:	49 37       	cpi	r20, 0x79	; 121
     ec8:	51 05       	cpc	r21, r1
     eca:	0c f4       	brge	.+2      	; 0xece <_ZN4FIFO10readStringEPci+0x26>
     ecc:	51 c0       	rjmp	.+162    	; 0xf70 <_ZN4FIFO10readStringEPci+0xc8>
	{
		strSize = MAX_FIFO_LENGTH ;
     ece:	c8 e7       	ldi	r28, 0x78	; 120
     ed0:	d0 e0       	ldi	r29, 0x00	; 0
     ed2:	9b e7       	ldi	r25, 0x7B	; 123
     ed4:	c9 2e       	mov	r12, r25
     ed6:	d1 2c       	mov	r13, r1
     ed8:	ca 0c       	add	r12, r10
     eda:	db 1c       	adc	r13, r11
     edc:	85 01       	movw	r16, r10
     ede:	07 58       	subi	r16, 0x87	; 135
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	20 c0       	rjmp	.+64     	; 0xf24 <_ZN4FIFO10readStringEPci+0x7c>
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     ee4:	42 1b       	sub	r20, r18
     ee6:	53 0b       	sbc	r21, r19
     ee8:	4a 01       	movw	r8, r20
     eea:	f9 e7       	ldi	r31, 0x79	; 121
     eec:	8f 0e       	add	r8, r31
     eee:	91 1c       	adc	r9, r1
		
	restoreIntrrupt( intTemp );
     ef0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     ef4:	18 14       	cp	r1, r8
     ef6:	19 04       	cpc	r1, r9
     ef8:	44 f5       	brge	.+80     	; 0xf4a <_ZN4FIFO10readStringEPci+0xa2>
	{
		temp = fifoBuffer[readIndex];
     efa:	f8 01       	movw	r30, r16
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	f5 01       	movw	r30, r10
     f02:	e8 0f       	add	r30, r24
     f04:	f9 1f       	adc	r31, r25
     f06:	20 81       	ld	r18, Z
		readIndex ++ ;
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	f8 01       	movw	r30, r16
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
		if ( readIndex > MAX_FIFO_LENGTH )
     f10:	89 37       	cpi	r24, 0x79	; 121
     f12:	91 05       	cpc	r25, r1
     f14:	14 f0       	brlt	.+4      	; 0xf1a <_ZN4FIFO10readStringEPci+0x72>
			readIndex =0;
     f16:	11 82       	std	Z+1, r1	; 0x01
     f18:	10 82       	st	Z, r1
	}
	
	while (strSize)
	{
		temp = readByte();
		*str = temp;
     f1a:	f7 01       	movw	r30, r14
     f1c:	21 93       	st	Z+, r18
     f1e:	7f 01       	movw	r14, r30
		str++;
		strSize --;
     f20:	21 97       	sbiw	r28, 0x01	; 1
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     f22:	c9 f0       	breq	.+50     	; 0xf56 <_ZN4FIFO10readStringEPci+0xae>
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
     f24:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     f28:	f6 01       	movw	r30, r12
     f2a:	40 81       	ld	r20, Z
     f2c:	51 81       	ldd	r21, Z+1	; 0x01
     f2e:	f8 01       	movw	r30, r16
     f30:	20 81       	ld	r18, Z
     f32:	31 81       	ldd	r19, Z+1	; 0x01
     f34:	42 17       	cp	r20, r18
     f36:	53 07       	cpc	r21, r19
     f38:	ac f2       	brlt	.-86     	; 0xee4 <_ZN4FIFO10readStringEPci+0x3c>
		temp =	writeIndex - readIndex;
     f3a:	4a 01       	movw	r8, r20
     f3c:	82 1a       	sub	r8, r18
     f3e:	93 0a       	sbc	r9, r19
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
		
	restoreIntrrupt( intTemp );
     f40:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     f44:	18 14       	cp	r1, r8
     f46:	19 04       	cpc	r1, r9
     f48:	c4 f2       	brlt	.-80     	; 0xefa <_ZN4FIFO10readStringEPci+0x52>
{
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
     f4a:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	while (strSize)
	{
		temp = readByte();
		*str = temp;
     f4c:	f7 01       	movw	r30, r14
     f4e:	21 93       	st	Z+, r18
     f50:	7f 01       	movw	r14, r30
		str++;
		strSize --;
     f52:	21 97       	sbiw	r28, 0x01	; 1
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     f54:	39 f7       	brne	.-50     	; 0xf24 <_ZN4FIFO10readStringEPci+0x7c>
		temp = readByte();
		*str = temp;
		str++;
		strSize --;
	};
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	bf 90       	pop	r11
     f68:	af 90       	pop	r10
     f6a:	9f 90       	pop	r9
     f6c:	8f 90       	pop	r8
     f6e:	08 95       	ret
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     f70:	20 97       	sbiw	r28, 0x00	; 0
     f72:	89 f3       	breq	.-30     	; 0xf56 <_ZN4FIFO10readStringEPci+0xae>
     f74:	8b e7       	ldi	r24, 0x7B	; 123
     f76:	c8 2e       	mov	r12, r24
     f78:	d1 2c       	mov	r13, r1
     f7a:	ca 0c       	add	r12, r10
     f7c:	db 1c       	adc	r13, r11
     f7e:	85 01       	movw	r16, r10
     f80:	07 58       	subi	r16, 0x87	; 135
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	cf cf       	rjmp	.-98     	; 0xf24 <_ZN4FIFO10readStringEPci+0x7c>

00000f86 <_ZN4FIFO11writeStringEPci>:
		strSize --;
	};
}

void FIFO::writeString( char *str,int strSize )
{
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	5c 01       	movw	r10, r24
     fa2:	ea 01       	movw	r28, r20
	if ( strSize > MAX_FIFO_LENGTH )
     fa4:	49 37       	cpi	r20, 0x79	; 121
     fa6:	51 05       	cpc	r21, r1
     fa8:	e4 f1       	brlt	.+120    	; 0x1022 <_ZN4FIFO11writeStringEPci+0x9c>
	{
		strSize = MAX_FIFO_LENGTH ;
     faa:	c8 e7       	ldi	r28, 0x78	; 120
     fac:	d0 e0       	ldi	r29, 0x00	; 0
     fae:	7b 01       	movw	r14, r22
     fb0:	85 01       	movw	r16, r10
     fb2:	05 58       	subi	r16, 0x85	; 133
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	29 e7       	ldi	r18, 0x79	; 121
     fb8:	c2 2e       	mov	r12, r18
     fba:	d1 2c       	mov	r13, r1
     fbc:	ca 0c       	add	r12, r10
     fbe:	db 1c       	adc	r13, r11
     fc0:	1e c0       	rjmp	.+60     	; 0xffe <_ZN4FIFO11writeStringEPci+0x78>
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     fc2:	42 1b       	sub	r20, r18
     fc4:	53 0b       	sbc	r21, r19
     fc6:	4a 01       	movw	r8, r20
     fc8:	f9 e7       	ldi	r31, 0x79	; 121
     fca:	8f 0e       	add	r8, r31
     fcc:	91 1c       	adc	r9, r1
		
	restoreIntrrupt( intTemp );
     fce:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
	return temp;
}

void FIFO::writeByte( char data )
{
	if (getFifoFullLength() < MAX_FIFO_LENGTH )
     fd2:	88 e7       	ldi	r24, 0x78	; 120
     fd4:	88 16       	cp	r8, r24
     fd6:	91 04       	cpc	r9, r1
     fd8:	84 f4       	brge	.+32     	; 0xffa <_ZN4FIFO11writeStringEPci+0x74>
	{
		fifoBuffer [writeIndex] = data;
     fda:	f8 01       	movw	r30, r16
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	f5 01       	movw	r30, r10
     fe2:	e8 0f       	add	r30, r24
     fe4:	f9 1f       	adc	r31, r25
     fe6:	70 82       	st	Z, r7
		writeIndex ++ ;
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	f8 01       	movw	r30, r16
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
		if ( writeIndex > MAX_FIFO_LENGTH )
     ff0:	89 37       	cpi	r24, 0x79	; 121
     ff2:	91 05       	cpc	r25, r1
     ff4:	14 f0       	brlt	.+4      	; 0xffa <_ZN4FIFO11writeStringEPci+0x74>
			writeIndex =0;
     ff6:	11 82       	std	Z+1, r1	; 0x01
     ff8:	10 82       	st	Z, r1
	
	while (strSize)
	{
		writeByte(*str);
		str++;
		strSize --;
     ffa:	21 97       	sbiw	r28, 0x01	; 1
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     ffc:	a1 f0       	breq	.+40     	; 0x1026 <_ZN4FIFO11writeStringEPci+0xa0>
	{
		writeByte(*str);
     ffe:	f7 01       	movw	r30, r14
    1000:	71 90       	ld	r7, Z+
    1002:	7f 01       	movw	r14, r30
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
    1004:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
    1008:	f8 01       	movw	r30, r16
    100a:	40 81       	ld	r20, Z
    100c:	51 81       	ldd	r21, Z+1	; 0x01
    100e:	f6 01       	movw	r30, r12
    1010:	20 81       	ld	r18, Z
    1012:	31 81       	ldd	r19, Z+1	; 0x01
    1014:	42 17       	cp	r20, r18
    1016:	53 07       	cpc	r21, r19
    1018:	a4 f2       	brlt	.-88     	; 0xfc2 <_ZN4FIFO11writeStringEPci+0x3c>
		temp =	writeIndex - readIndex;
    101a:	4a 01       	movw	r8, r20
    101c:	82 1a       	sub	r8, r18
    101e:	93 0a       	sbc	r9, r19
    1020:	d6 cf       	rjmp	.-84     	; 0xfce <_ZN4FIFO11writeStringEPci+0x48>
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    1022:	20 97       	sbiw	r28, 0x00	; 0
    1024:	21 f6       	brne	.-120    	; 0xfae <_ZN4FIFO11writeStringEPci+0x28>
	{
		writeByte(*str);
		str++;
		strSize --;
	};
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	08 95       	ret

00001042 <_ZN4FIFO17getFifoFullLengthEv>:



int FIFO::getFifoFullLength()
{
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	8c 01       	movw	r16, r24
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
    104c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
    1050:	f8 01       	movw	r30, r16
    1052:	e5 58       	subi	r30, 0x85	; 133
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	c0 81       	ld	r28, Z
    1058:	d1 81       	ldd	r29, Z+1	; 0x01
    105a:	f8 01       	movw	r30, r16
    105c:	e7 58       	subi	r30, 0x87	; 135
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	20 81       	ld	r18, Z
    1062:	31 81       	ldd	r19, Z+1	; 0x01
    1064:	c2 17       	cp	r28, r18
    1066:	d3 07       	cpc	r29, r19
    1068:	64 f4       	brge	.+24     	; 0x1082 <_ZN4FIFO17getFifoFullLengthEv+0x40>
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
    106a:	c2 1b       	sub	r28, r18
    106c:	d3 0b       	sbc	r29, r19
    106e:	c7 58       	subi	r28, 0x87	; 135
    1070:	df 4f       	sbci	r29, 0xFF	; 255
		
	restoreIntrrupt( intTemp );
    1072:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
		return temp;
}
    1076:	ce 01       	movw	r24, r28
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	08 95       	ret
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
    1082:	c2 1b       	sub	r28, r18
    1084:	d3 0b       	sbc	r29, r19
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
		
	restoreIntrrupt( intTemp );
    1086:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
		return temp;
}
    108a:	ce 01       	movw	r24, r28
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <_ZN4FIFO9clearFifoEv>:
	return temp;
}

void FIFO::clearFifo()
{
	writeIndex=readIndex=0;
    1096:	fc 01       	movw	r30, r24
    1098:	e7 58       	subi	r30, 0x87	; 135
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
    10a0:	fc 01       	movw	r30, r24
    10a2:	e5 58       	subi	r30, 0x85	; 133
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	11 82       	std	Z+1, r1	; 0x01
    10a8:	10 82       	st	Z, r1
    10aa:	08 95       	ret

000010ac <_Z16micro_Initializev>:
#include <avr/interrupt.h>


void micro_Initialize()
{
	PORTA=0x00;
    10ac:	1b ba       	out	0x1b, r1	; 27
	DDRA=0x0F;
    10ae:	8f e0       	ldi	r24, 0x0F	; 15
    10b0:	8a bb       	out	0x1a, r24	; 26

	PORTB=0x10;
    10b2:	80 e1       	ldi	r24, 0x10	; 16
    10b4:	88 bb       	out	0x18, r24	; 24
	DDRB=0x18;
    10b6:	88 e1       	ldi	r24, 0x18	; 24
    10b8:	87 bb       	out	0x17, r24	; 23

	PORTC=0x00;
    10ba:	15 ba       	out	0x15, r1	; 21
	DDRC=0x1D;
    10bc:	8d e1       	ldi	r24, 0x1D	; 29
    10be:	84 bb       	out	0x14, r24	; 20

	PORTD=0x00;
    10c0:	12 ba       	out	0x12, r1	; 18
	DDRD=0x82;
    10c2:	82 e8       	ldi	r24, 0x82	; 130
    10c4:	81 bb       	out	0x11, r24	; 17
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 7.813 kHz
	// Mode: Normal top=0xFF
	// OC0 output: Disconnected
	TCCR0=0x05;
    10c6:	85 e0       	ldi	r24, 0x05	; 5
    10c8:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
    10ca:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
    10cc:	1c be       	out	0x3c, r1	; 60
	// Input Capture on Falling Edge
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    10ce:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x01;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    10d4:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    10d6:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    10d8:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    10da:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x03;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0x41;
    10e0:	81 e4       	ldi	r24, 0x41	; 65
    10e2:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
    10e4:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    10e6:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR=0x00;
    10e8:	12 bc       	out	0x22, r1	; 34
	TCCR2=0x00;
    10ea:	15 bc       	out	0x25, r1	; 37
	TCNT2=0x00;
    10ec:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
    10ee:	13 bc       	out	0x23, r1	; 35
	//ACSR=0x00;
	//SFIOR=0x00;
	//}
	//else
	//{
	ACSR=0x80;
    10f0:	80 e8       	ldi	r24, 0x80	; 128
    10f2:	88 b9       	out	0x08, r24	; 8
	SFIOR=0x00;
    10f4:	10 be       	out	0x30, r1	; 48
    10f6:	08 95       	ret

000010f8 <_Z9ToggleLEDc>:
}

//////////////////////////////////////////////////////////////////////////
void ToggleLED(char led_num)
{
	switch(led_num)
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	01 f1       	breq	.+64     	; 0x113c <_Z9ToggleLEDc+0x44>
    10fc:	28 f0       	brcs	.+10     	; 0x1108 <_Z9ToggleLEDc+0x10>
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	19 f1       	breq	.+70     	; 0x1148 <_Z9ToggleLEDc+0x50>
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	99 f0       	breq	.+38     	; 0x112c <_Z9ToggleLEDc+0x34>
    1106:	08 95       	ret
    1108:	88 23       	and	r24, r24
    110a:	51 f0       	breq	.+20     	; 0x1120 <_Z9ToggleLEDc+0x28>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	d9 f7       	brne	.-10     	; 0x1106 <_Z9ToggleLEDc+0xe>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    1110:	8b b3       	in	r24, 0x1b	; 27
    1112:	8b 7f       	andi	r24, 0xFB	; 251
    1114:	ca 9b       	sbis	0x19, 2	; 25
    1116:	10 c0       	rjmp	.+32     	; 0x1138 <_Z9ToggleLEDc+0x40>
		break;
		case 3:
		Led3_WR(!Led3_RD());
		break;
		case 4:
		Led4_WR(!Led4_RD());
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	89 2b       	or	r24, r25
    111c:	8b bb       	out	0x1b, r24	; 27
    111e:	08 95       	ret
void ToggleLED(char led_num)
{
	switch(led_num)
	{
		case 0:
		Led0_WR(!Led0_RD());
    1120:	8b b3       	in	r24, 0x1b	; 27
    1122:	8d 7f       	andi	r24, 0xFD	; 253
    1124:	c9 99       	sbic	0x19, 1	; 25
    1126:	f8 cf       	rjmp	.-16     	; 0x1118 <_Z9ToggleLEDc+0x20>
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	f7 cf       	rjmp	.-18     	; 0x111a <_Z9ToggleLEDc+0x22>
		break;
		case 3:
		Led3_WR(!Led3_RD());
		break;
		case 4:
		Led4_WR(!Led4_RD());
    112c:	8b b3       	in	r24, 0x1b	; 27
    112e:	8f 77       	andi	r24, 0x7F	; 127
    1130:	cf 99       	sbic	0x19, 7	; 25
    1132:	f2 cf       	rjmp	.-28     	; 0x1118 <_Z9ToggleLEDc+0x20>
    1134:	90 e8       	ldi	r25, 0x80	; 128
    1136:	f1 cf       	rjmp	.-30     	; 0x111a <_Z9ToggleLEDc+0x22>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    1138:	94 e0       	ldi	r25, 0x04	; 4
    113a:	ef cf       	rjmp	.-34     	; 0x111a <_Z9ToggleLEDc+0x22>
		break;
		case 2:
		Led2_WR(!Led2_RD());
    113c:	8b b3       	in	r24, 0x1b	; 27
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	cb 99       	sbic	0x19, 3	; 25
    1142:	ea cf       	rjmp	.-44     	; 0x1118 <_Z9ToggleLEDc+0x20>
    1144:	98 e0       	ldi	r25, 0x08	; 8
    1146:	e9 cf       	rjmp	.-46     	; 0x111a <_Z9ToggleLEDc+0x22>
		break;
		case 3:
		Led3_WR(!Led3_RD());
    1148:	8b b3       	in	r24, 0x1b	; 27
    114a:	8f 7e       	andi	r24, 0xEF	; 239
    114c:	cc 99       	sbic	0x19, 4	; 25
    114e:	e4 cf       	rjmp	.-56     	; 0x1118 <_Z9ToggleLEDc+0x20>
    1150:	90 e1       	ldi	r25, 0x10	; 16
    1152:	e3 cf       	rjmp	.-58     	; 0x111a <_Z9ToggleLEDc+0x22>

00001154 <_Z6setLEDc>:
	return ;
}
//////////////////////////////////////////////////////////////////////////
void setLED(char led_num)
{
	switch(led_num)
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	79 f0       	breq	.+30     	; 0x1176 <_Z6setLEDc+0x22>
    1158:	30 f0       	brcs	.+12     	; 0x1166 <_Z6setLEDc+0x12>
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	71 f0       	breq	.+28     	; 0x117a <_Z6setLEDc+0x26>
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	41 f0       	breq	.+16     	; 0x1172 <_Z6setLEDc+0x1e>
		break;
		case 4:
		Led4_WR(1);
		break;
		default :
		Led0_WR(1);
    1162:	d9 9a       	sbi	0x1b, 1	; 27
    1164:	08 95       	ret
	return ;
}
//////////////////////////////////////////////////////////////////////////
void setLED(char led_num)
{
	switch(led_num)
    1166:	88 23       	and	r24, r24
    1168:	e1 f3       	breq	.-8      	; 0x1162 <_Z6setLEDc+0xe>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	d1 f7       	brne	.-12     	; 0x1162 <_Z6setLEDc+0xe>
	{
		case 0:
		Led0_WR(1);
		break;
		case 1:
		Led1_WR(1);
    116e:	da 9a       	sbi	0x1b, 2	; 27
		break;
    1170:	08 95       	ret
		break;
		case 3:
		Led3_WR(1);
		break;
		case 4:
		Led4_WR(1);
    1172:	df 9a       	sbi	0x1b, 7	; 27
		break;
    1174:	08 95       	ret
		break;
		case 1:
		Led1_WR(1);
		break;
		case 2:
		Led2_WR(1);
    1176:	db 9a       	sbi	0x1b, 3	; 27
		break;
    1178:	08 95       	ret
		case 3:
		Led3_WR(1);
    117a:	dc 9a       	sbi	0x1b, 4	; 27
		break;
    117c:	08 95       	ret

0000117e <_Z8resetLEDc>:
	return ;
}
//////////////////////////////////////////////////////////////////////////
void resetLED(char led_num)
{
	switch(led_num)
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	79 f0       	breq	.+30     	; 0x11a0 <_Z8resetLEDc+0x22>
    1182:	30 f0       	brcs	.+12     	; 0x1190 <_Z8resetLEDc+0x12>
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	71 f0       	breq	.+28     	; 0x11a4 <_Z8resetLEDc+0x26>
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	41 f0       	breq	.+16     	; 0x119c <_Z8resetLEDc+0x1e>
		break;
		case 4:
		Led4_WR(0);
		break;
		default :
		Led0_WR(0);
    118c:	d9 98       	cbi	0x1b, 1	; 27
    118e:	08 95       	ret
	return ;
}
//////////////////////////////////////////////////////////////////////////
void resetLED(char led_num)
{
	switch(led_num)
    1190:	88 23       	and	r24, r24
    1192:	e1 f3       	breq	.-8      	; 0x118c <_Z8resetLEDc+0xe>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	d1 f7       	brne	.-12     	; 0x118c <_Z8resetLEDc+0xe>
	{
		case 0:
		Led0_WR(0);
		break;
		case 1:
		Led1_WR(0);
    1198:	da 98       	cbi	0x1b, 2	; 27
		break;
    119a:	08 95       	ret
		break;
		case 3:
		Led3_WR(0);
		break;
		case 4:
		Led4_WR(0);
    119c:	df 98       	cbi	0x1b, 7	; 27
		break;
    119e:	08 95       	ret
		break;
		case 1:
		Led1_WR(0);
		break;
		case 2:
		Led2_WR(0);
    11a0:	db 98       	cbi	0x1b, 3	; 27
		break;
    11a2:	08 95       	ret
		case 3:
		Led3_WR(0);
    11a4:	dc 98       	cbi	0x1b, 4	; 27
		break;
    11a6:	08 95       	ret

000011a8 <_Z19receivedDataProcessPci>:
}

//////////////////////////////////////////////////////////////////////////

void receivedDataProcess(char* receivedPacket, int dataLength)
{	
    11a8:	ab 01       	movw	r20, r22
	serialTxDataBuffer.writeString(receivedPacket , dataLength );	
    11aa:	bc 01       	movw	r22, r24
    11ac:	8e e9       	ldi	r24, 0x9E	; 158
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <_ZN4FIFO11writeStringEPci>

000011b4 <_Z17setGlobalIntrruptv>:



void setGlobalIntrrupt()
{
	intrruptFlag =1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 e2 01 	sts	0x01E2, r24
	sei();
    11ba:	78 94       	sei
    11bc:	08 95       	ret

000011be <_Z19resetGlobalIntrruptv>:
}

void resetGlobalIntrrupt()
{
	intrruptFlag =0;
    11be:	10 92 e2 01 	sts	0x01E2, r1
	cli();
    11c2:	f8 94       	cli
    11c4:	08 95       	ret

000011c6 <_Z25resetAndStoreIntrruptFlagv>:
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    11c6:	80 91 e2 01 	lds	r24, 0x01E2
	intrruptFlag = 0 ;
    11ca:	10 92 e2 01 	sts	0x01E2, r1
	cli();
    11ce:	f8 94       	cli
	return temp;
}
    11d0:	08 95       	ret

000011d2 <_Z15restoreIntrruptc>:

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    11d2:	81 11       	cpse	r24, r1
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <_Z15restoreIntrruptc+0xc>
		sei();
		intrruptFlag = 1 ;
	}
	else
	{
		cli();
    11d6:	f8 94       	cli
		intrruptFlag = 0 ;
    11d8:	10 92 e2 01 	sts	0x01E2, r1
    11dc:	08 95       	ret

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
	{
		sei();
    11de:	78 94       	sei
		intrruptFlag = 1 ;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 e2 01 	sts	0x01E2, r24
    11e6:	08 95       	ret

000011e8 <_Z26processSerialReceivedBytesv>:
}


/////////////////////////////////////////
void processSerialReceivedBytes()
{
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
	static unsigned char receivedData[MAXIMUM_NUMBER_OF_DATA+4]; //commandArray[MAXIMUM_NUMBER_OF_DATA+4],
	static int counter=0;
	char temp;
	
	if (serialRxDataBuffer.getFifoFullLength() == 0 || commandRecievedFlag == 1)
    11f0:	81 e2       	ldi	r24, 0x21	; 33
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN4FIFO17getFifoFullLengthEv>
    11f8:	89 2b       	or	r24, r25
    11fa:	09 f4       	brne	.+2      	; 0x11fe <_Z26processSerialReceivedBytesv+0x16>
    11fc:	84 c0       	rjmp	.+264    	; 0x1306 <_Z26processSerialReceivedBytesv+0x11e>
    11fe:	80 91 e1 01 	lds	r24, 0x01E1
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	09 f4       	brne	.+2      	; 0x1208 <_Z26processSerialReceivedBytesv+0x20>
    1206:	7f c0       	rjmp	.+254    	; 0x1306 <_Z26processSerialReceivedBytesv+0x11e>
	return;
	temp = serialRxDataBuffer.readByte();
    1208:	81 e2       	ldi	r24, 0x21	; 33
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN4FIFO8readByteEv>
	receivedData[counter] = temp;
    1210:	20 91 61 01 	lds	r18, 0x0161
    1214:	30 91 62 01 	lds	r19, 0x0162
    1218:	f9 01       	movw	r30, r18
    121a:	ed 59       	subi	r30, 0x9D	; 157
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	80 83       	st	Z, r24
	

	if (counter == 0 && receivedData[0] != '$')
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <_Z26processSerialReceivedBytesv+0x40>
    1226:	5a c0       	rjmp	.+180    	; 0x12dc <_Z26processSerialReceivedBytesv+0xf4>
		counter = -1;
	if (counter == 1 && receivedData[1] != 'C')
    1228:	21 30       	cpi	r18, 0x01	; 1
    122a:	31 05       	cpc	r19, r1
    122c:	09 f0       	breq	.+2      	; 0x1230 <_Z26processSerialReceivedBytesv+0x48>
    122e:	70 c0       	rjmp	.+224    	; 0x1310 <_Z26processSerialReceivedBytesv+0x128>
    1230:	80 91 64 01 	lds	r24, 0x0164
    1234:	83 34       	cpi	r24, 0x43	; 67
    1236:	41 f0       	breq	.+16     	; 0x1248 <_Z26processSerialReceivedBytesv+0x60>
		counter = -1;
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	90 93 62 01 	sts	0x0162, r25
    1240:	80 93 61 01 	sts	0x0161, r24
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	3f ef       	ldi	r19, 0xFF	; 255
	if (counter == 2 && receivedData[2] != 'M')
		counter = -1;
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
    1248:	24 30       	cpi	r18, 0x04	; 4
    124a:	31 05       	cpc	r19, r1
    124c:	0c f4       	brge	.+2      	; 0x1250 <_Z26processSerialReceivedBytesv+0x68>
    124e:	55 c0       	rjmp	.+170    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
	{
		switch(receivedData[4])
    1250:	80 91 67 01 	lds	r24, 0x0167
    1254:	8f 31       	cpi	r24, 0x1F	; 31
    1256:	09 f4       	brne	.+2      	; 0x125a <_Z26processSerialReceivedBytesv+0x72>
    1258:	1f c1       	rjmp	.+574    	; 0x1498 <_Z26processSerialReceivedBytesv+0x2b0>
    125a:	08 f0       	brcs	.+2      	; 0x125e <_Z26processSerialReceivedBytesv+0x76>
    125c:	61 c0       	rjmp	.+194    	; 0x1320 <_Z26processSerialReceivedBytesv+0x138>
    125e:	8c 31       	cpi	r24, 0x1C	; 28
    1260:	09 f4       	brne	.+2      	; 0x1264 <_Z26processSerialReceivedBytesv+0x7c>
    1262:	88 c0       	rjmp	.+272    	; 0x1374 <_Z26processSerialReceivedBytesv+0x18c>
    1264:	08 f0       	brcs	.+2      	; 0x1268 <_Z26processSerialReceivedBytesv+0x80>
    1266:	ce c0       	rjmp	.+412    	; 0x1404 <_Z26processSerialReceivedBytesv+0x21c>
    1268:	81 31       	cpi	r24, 0x11	; 17
    126a:	09 f4       	brne	.+2      	; 0x126e <_Z26processSerialReceivedBytesv+0x86>
    126c:	d0 c0       	rjmp	.+416    	; 0x140e <_Z26processSerialReceivedBytesv+0x226>
    126e:	8b 31       	cpi	r24, 0x1B	; 27
    1270:	09 f0       	breq	.+2      	; 0x1274 <_Z26processSerialReceivedBytesv+0x8c>
    1272:	5f c0       	rjmp	.+190    	; 0x1332 <_Z26processSerialReceivedBytesv+0x14a>
			DEBUGMESSAGE("Read settings command received: %d\r\n", readSettingFlag);
			counter = -1;
			}
			break;/**/
			case BASE_STATION_SET_TIME_CMD:
			if (counter > baseStationSetTimeCommandCount + 4)
    1274:	2d 30       	cpi	r18, 0x0D	; 13
    1276:	31 05       	cpc	r19, r1
    1278:	0c f4       	brge	.+2      	; 0x127c <_Z26processSerialReceivedBytesv+0x94>
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				commandArray[0]=START_PACKET_BYTE ;
    127c:	9e e7       	ldi	r25, 0x7E	; 126
    127e:	90 93 7b 01 	sts	0x017B, r25
				commandArray[1]=BASE_STATION_SET_TIME_CMD;
    1282:	80 93 7c 01 	sts	0x017C, r24
				commandArray[2] = receivedData[5];
    1286:	80 91 68 01 	lds	r24, 0x0168
    128a:	80 93 7d 01 	sts	0x017D, r24
				for (char i =0; i <baseStationSetTimeCommandCount  ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    128e:	80 91 69 01 	lds	r24, 0x0169
    1292:	80 93 7e 01 	sts	0x017E, r24
    1296:	80 91 6a 01 	lds	r24, 0x016A
    129a:	80 93 7f 01 	sts	0x017F, r24
    129e:	80 91 6b 01 	lds	r24, 0x016B
    12a2:	80 93 80 01 	sts	0x0180, r24
    12a6:	80 91 6c 01 	lds	r24, 0x016C
    12aa:	80 93 81 01 	sts	0x0181, r24
    12ae:	80 91 6d 01 	lds	r24, 0x016D
    12b2:	80 93 82 01 	sts	0x0182, r24
    12b6:	80 91 6e 01 	lds	r24, 0x016E
    12ba:	80 93 83 01 	sts	0x0183, r24
    12be:	80 91 6f 01 	lds	r24, 0x016F
    12c2:	80 93 84 01 	sts	0x0184, r24
    12c6:	80 91 70 01 	lds	r24, 0x0170
    12ca:	80 93 85 01 	sts	0x0185, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetTimeCommandCount + 3;
    12ce:	8b e0       	ldi	r24, 0x0B	; 11
    12d0:	80 93 8f 01 	sts	0x018F, r24
				commandRecievedFlag =1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 e1 01 	sts	0x01E1, r24
    12da:	0d c0       	rjmp	.+26     	; 0x12f6 <_Z26processSerialReceivedBytesv+0x10e>
	return;
	temp = serialRxDataBuffer.readByte();
	receivedData[counter] = temp;
	

	if (counter == 0 && receivedData[0] != '$')
    12dc:	80 91 63 01 	lds	r24, 0x0163
    12e0:	84 32       	cpi	r24, 0x24	; 36
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <_Z26processSerialReceivedBytesv+0xfe>
    12e4:	a9 cf       	rjmp	.-174    	; 0x1238 <_Z26processSerialReceivedBytesv+0x50>
		counter = -1;
	if (counter == 1 && receivedData[1] != 'C')
		counter = -1;
	if (counter == 2 && receivedData[2] != 'M')
		counter = -1;
	if (counter == 3 && receivedData[3] != 'D')
    12e6:	23 30       	cpi	r18, 0x03	; 3
    12e8:	31 05       	cpc	r19, r1
    12ea:	09 f0       	breq	.+2      	; 0x12ee <_Z26processSerialReceivedBytesv+0x106>
    12ec:	ad cf       	rjmp	.-166    	; 0x1248 <_Z26processSerialReceivedBytesv+0x60>
    12ee:	80 91 66 01 	lds	r24, 0x0166
    12f2:	84 34       	cpi	r24, 0x44	; 68
    12f4:	11 f0       	breq	.+4      	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
				for (char i =0; i <baseStationSetTimeCommandCount  ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetTimeCommandCount + 3;
				commandRecievedFlag =1;
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	2f 5f       	subi	r18, 0xFF	; 255
    12fc:	3f 4f       	sbci	r19, 0xFF	; 255

	}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+4)
			counter = -1;
		counter++;
    12fe:	30 93 62 01 	sts	0x0162, r19
    1302:	20 93 61 01 	sts	0x0161, r18
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	08 95       	ret

	if (counter == 0 && receivedData[0] != '$')
		counter = -1;
	if (counter == 1 && receivedData[1] != 'C')
		counter = -1;
	if (counter == 2 && receivedData[2] != 'M')
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	41 f7       	brne	.-48     	; 0x12e6 <_Z26processSerialReceivedBytesv+0xfe>
    1316:	80 91 65 01 	lds	r24, 0x0165
    131a:	8d 34       	cpi	r24, 0x4D	; 77
    131c:	61 f7       	brne	.-40     	; 0x12f6 <_Z26processSerialReceivedBytesv+0x10e>
    131e:	ed cf       	rjmp	.-38     	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
	{
		switch(receivedData[4])
    1320:	82 32       	cpi	r24, 0x22	; 34
    1322:	69 f0       	breq	.+26     	; 0x133e <_Z26processSerialReceivedBytesv+0x156>
    1324:	08 f0       	brcs	.+2      	; 0x1328 <_Z26processSerialReceivedBytesv+0x140>
    1326:	8b c0       	rjmp	.+278    	; 0x143e <_Z26processSerialReceivedBytesv+0x256>
    1328:	80 32       	cpi	r24, 0x20	; 32
    132a:	09 f4       	brne	.+2      	; 0x132e <_Z26processSerialReceivedBytesv+0x146>
    132c:	26 c1       	rjmp	.+588    	; 0x157a <_Z26processSerialReceivedBytesv+0x392>
    132e:	81 32       	cpi	r24, 0x21	; 33
    1330:	31 f0       	breq	.+12     	; 0x133e <_Z26processSerialReceivedBytesv+0x156>

		}

	}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+4)
    1332:	28 31       	cpi	r18, 0x18	; 24
    1334:	31 05       	cpc	r19, r1
    1336:	0c f3       	brlt	.-62     	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	e0 cf       	rjmp	.-64     	; 0x12fe <_Z26processSerialReceivedBytesv+0x116>
				commandRecievedFlag =1;
				counter = -1 ;
			}
			break;
			case TURN_ON_OFF_LTR_CMD:
			if (counter > turnOnOffLTRCommandCount + 4)
    133e:	27 30       	cpi	r18, 0x07	; 7
    1340:	31 05       	cpc	r19, r1
    1342:	dc f2       	brlt	.-74     	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				commandArray[0] = START_PACKET_BYTE;
    1344:	9e e7       	ldi	r25, 0x7E	; 126
    1346:	90 93 7b 01 	sts	0x017B, r25
				commandArray[1] = TURN_ON_OFF_LTR_CMD;
    134a:	80 93 7c 01 	sts	0x017C, r24
				commandArray[2] =  receivedData[5];
    134e:	80 91 68 01 	lds	r24, 0x0168
    1352:	80 93 7d 01 	sts	0x017D, r24
				for (char i =0; i < turnOnOffLTRCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    1356:	80 91 69 01 	lds	r24, 0x0169
    135a:	80 93 7e 01 	sts	0x017E, r24
    135e:	80 91 6a 01 	lds	r24, 0x016A
    1362:	80 93 7f 01 	sts	0x017F, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = turnOnOffLTRCommandCount + 3;
    1366:	85 e0       	ldi	r24, 0x05	; 5
    1368:	80 93 8f 01 	sts	0x018F, r24
				commandRecievedFlag =1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 e1 01 	sts	0x01E1, r24
    1372:	e2 cf       	rjmp	.-60     	; 0x1338 <_Z26processSerialReceivedBytesv+0x150>
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetTimeCommandCount + 3;
				commandRecievedFlag =1;
				counter = -1 ;
			}
			case BASE_STATION_SET_POS_CMD:
			if (counter > baseStationSetPositionCommandCount + 4)
    1374:	22 31       	cpi	r18, 0x12	; 18
    1376:	31 05       	cpc	r19, r1
    1378:	0c f4       	brge	.+2      	; 0x137c <_Z26processSerialReceivedBytesv+0x194>
    137a:	bf cf       	rjmp	.-130    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				commandArray[0]=START_PACKET_BYTE ;
    137c:	9e e7       	ldi	r25, 0x7E	; 126
    137e:	90 93 7b 01 	sts	0x017B, r25
				commandArray[1]=BASE_STATION_SET_POS_CMD;
    1382:	80 93 7c 01 	sts	0x017C, r24
				commandArray[2] = receivedData[5];
    1386:	80 91 68 01 	lds	r24, 0x0168
    138a:	80 93 7d 01 	sts	0x017D, r24
				for (char i =0; i < baseStationSetPositionCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    138e:	80 91 69 01 	lds	r24, 0x0169
    1392:	80 93 7e 01 	sts	0x017E, r24
    1396:	80 91 6a 01 	lds	r24, 0x016A
    139a:	80 93 7f 01 	sts	0x017F, r24
    139e:	80 91 6b 01 	lds	r24, 0x016B
    13a2:	80 93 80 01 	sts	0x0180, r24
    13a6:	80 91 6c 01 	lds	r24, 0x016C
    13aa:	80 93 81 01 	sts	0x0181, r24
    13ae:	80 91 6d 01 	lds	r24, 0x016D
    13b2:	80 93 82 01 	sts	0x0182, r24
    13b6:	80 91 6e 01 	lds	r24, 0x016E
    13ba:	80 93 83 01 	sts	0x0183, r24
    13be:	80 91 6f 01 	lds	r24, 0x016F
    13c2:	80 93 84 01 	sts	0x0184, r24
    13c6:	80 91 70 01 	lds	r24, 0x0170
    13ca:	80 93 85 01 	sts	0x0185, r24
    13ce:	80 91 71 01 	lds	r24, 0x0171
    13d2:	80 93 86 01 	sts	0x0186, r24
    13d6:	80 91 72 01 	lds	r24, 0x0172
    13da:	80 93 87 01 	sts	0x0187, r24
    13de:	80 91 73 01 	lds	r24, 0x0173
    13e2:	80 93 88 01 	sts	0x0188, r24
    13e6:	80 91 74 01 	lds	r24, 0x0174
    13ea:	80 93 89 01 	sts	0x0189, r24
    13ee:	80 91 75 01 	lds	r24, 0x0175
    13f2:	80 93 8a 01 	sts	0x018A, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetPositionCommandCount + 3;
    13f6:	80 e1       	ldi	r24, 0x10	; 16
    13f8:	80 93 8f 01 	sts	0x018F, r24
				commandRecievedFlag =1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 e1 01 	sts	0x01E1, r24
    1402:	9a cf       	rjmp	.-204    	; 0x1338 <_Z26processSerialReceivedBytesv+0x150>
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
	{
		switch(receivedData[4])
    1404:	8d 31       	cpi	r24, 0x1D	; 29
    1406:	19 f0       	breq	.+6      	; 0x140e <_Z26processSerialReceivedBytesv+0x226>
    1408:	8e 31       	cpi	r24, 0x1E	; 30
    140a:	09 f0       	breq	.+2      	; 0x140e <_Z26processSerialReceivedBytesv+0x226>
    140c:	92 cf       	rjmp	.-220    	; 0x1332 <_Z26processSerialReceivedBytesv+0x14a>
				}
			
			break;
			
			case BASE_STATION_RESET_LTR_CMD:
			if (counter > baseStationResetLTRCommandCount + 4)
    140e:	26 30       	cpi	r18, 0x06	; 6
    1410:	31 05       	cpc	r19, r1
    1412:	0c f4       	brge	.+2      	; 0x1416 <_Z26processSerialReceivedBytesv+0x22e>
    1414:	72 cf       	rjmp	.-284    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				commandArray[0]=START_PACKET_BYTE ;
    1416:	9e e7       	ldi	r25, 0x7E	; 126
    1418:	90 93 7b 01 	sts	0x017B, r25
				commandArray[1]= BASE_STATION_RESET_LTR_CMD;
    141c:	80 93 7c 01 	sts	0x017C, r24
				commandArray[2] = receivedData[5];
    1420:	80 91 68 01 	lds	r24, 0x0168
    1424:	80 93 7d 01 	sts	0x017D, r24
				for (char i =0; i < baseStationResetLTRCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    1428:	80 91 69 01 	lds	r24, 0x0169
    142c:	80 93 7e 01 	sts	0x017E, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationResetLTRCommandCount + 3;
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	80 93 8f 01 	sts	0x018F, r24
				commandRecievedFlag =1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 e1 01 	sts	0x01E1, r24
    143c:	7d cf       	rjmp	.-262    	; 0x1338 <_Z26processSerialReceivedBytesv+0x150>
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
	{
		switch(receivedData[4])
    143e:	85 32       	cpi	r24, 0x25	; 37
    1440:	09 f4       	brne	.+2      	; 0x1444 <_Z26processSerialReceivedBytesv+0x25c>
    1442:	7d cf       	rjmp	.-262    	; 0x133e <_Z26processSerialReceivedBytesv+0x156>
    1444:	86 32       	cpi	r24, 0x26	; 38
    1446:	09 f4       	brne	.+2      	; 0x144a <_Z26processSerialReceivedBytesv+0x262>
    1448:	7a cf       	rjmp	.-268    	; 0x133e <_Z26processSerialReceivedBytesv+0x156>
    144a:	83 32       	cpi	r24, 0x23	; 35
    144c:	09 f0       	breq	.+2      	; 0x1450 <_Z26processSerialReceivedBytesv+0x268>
    144e:	71 cf       	rjmp	.-286    	; 0x1332 <_Z26processSerialReceivedBytesv+0x14a>
				commandRecievedFlag =1;
				counter = -1 ;
			}
			break;
			case SET_RANGE_OFFSET_CMD:
			if (counter > setRangeOffsetCommandCount + 4)
    1450:	29 30       	cpi	r18, 0x09	; 9
    1452:	31 05       	cpc	r19, r1
    1454:	0c f4       	brge	.+2      	; 0x1458 <_Z26processSerialReceivedBytesv+0x270>
    1456:	51 cf       	rjmp	.-350    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				commandArray[0] = START_PACKET_BYTE ;
    1458:	9e e7       	ldi	r25, 0x7E	; 126
    145a:	90 93 7b 01 	sts	0x017B, r25
				commandArray[1] = SET_RANGE_OFFSET_CMD;
    145e:	80 93 7c 01 	sts	0x017C, r24
				commandArray[2] =  receivedData[5];
    1462:	80 91 68 01 	lds	r24, 0x0168
    1466:	80 93 7d 01 	sts	0x017D, r24
				for (char i =0; i < setRangeOffsetCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    146a:	80 91 69 01 	lds	r24, 0x0169
    146e:	80 93 7e 01 	sts	0x017E, r24
    1472:	80 91 6a 01 	lds	r24, 0x016A
    1476:	80 93 7f 01 	sts	0x017F, r24
    147a:	80 91 6b 01 	lds	r24, 0x016B
    147e:	80 93 80 01 	sts	0x0180, r24
    1482:	80 91 6c 01 	lds	r24, 0x016C
    1486:	80 93 81 01 	sts	0x0181, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = setRangeOffsetCommandCount + 3;
    148a:	87 e0       	ldi	r24, 0x07	; 7
    148c:	80 93 8f 01 	sts	0x018F, r24
				commandRecievedFlag =1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 e1 01 	sts	0x01E1, r24
    1496:	50 cf       	rjmp	.-352    	; 0x1338 <_Z26processSerialReceivedBytesv+0x150>
				counter = -1 ;
			}
			
			break;
			case AOUTOMATIC_SEARCH_ENABLE_CMD:
			if (counter > aoutomaticSearchEnableCommandCount + 4)
    1498:	29 30       	cpi	r18, 0x09	; 9
    149a:	31 05       	cpc	r19, r1
    149c:	0c f4       	brge	.+2      	; 0x14a0 <_Z26processSerialReceivedBytesv+0x2b8>
    149e:	2d cf       	rjmp	.-422    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				minimumSearchBaseStationIndex = receivedData[5];
    14a0:	d0 91 68 01 	lds	r29, 0x0168
    14a4:	d0 93 63 00 	sts	0x0063, r29
				maximumSearchBaseStationIndex = receivedData[6];
    14a8:	c0 91 69 01 	lds	r28, 0x0169
    14ac:	c0 93 62 00 	sts	0x0062, r28
				char mode = receivedData[7];
    14b0:	e0 91 6a 01 	lds	r30, 0x016A
				char delay = receivedData[8];
    14b4:	00 91 6b 01 	lds	r16, 0x016B
		searchingarray[i] = -1;
}

void decodedelay(char input)
{
	searchdelaycounterH = 0;
    14b8:	10 92 9b 01 	sts	0x019B, r1
    14bc:	10 92 9a 01 	sts	0x019A, r1
	searchdelaycounterL = 0;
    14c0:	10 92 99 01 	sts	0x0199, r1
    14c4:	10 92 98 01 	sts	0x0198, r1
	if (input < 19) // ms
    14c8:	03 31       	cpi	r16, 0x13	; 19
    14ca:	08 f4       	brcc	.+2      	; 0x14ce <_Z26processSerialReceivedBytesv+0x2e6>
    14cc:	6f c0       	rjmp	.+222    	; 0x15ac <_Z26processSerialReceivedBytesv+0x3c4>
	{
		searchdelaymaxH = ((uint16_t)(input+1)*5000) / 65536;
		searchdelaymaxL = ((uint16_t)(input+1)*5000) % 65536;
	}
	else if (input < 138) // sec
    14ce:	0a 38       	cpi	r16, 0x8A	; 138
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <_Z26processSerialReceivedBytesv+0x2ec>
    14d2:	8e c0       	rjmp	.+284    	; 0x15f0 <_Z26processSerialReceivedBytesv+0x408>
	{
		uint32_t temp = ((uint32_t)(input-18)) * 20000;
		searchdelaymaxH = temp / 65536;
		searchdelaymaxL = temp % 65536;			
	}
	else if (input < 227) // minute
    14d4:	03 3e       	cpi	r16, 0xE3	; 227
    14d6:	08 f4       	brcc	.+2      	; 0x14da <_Z26processSerialReceivedBytesv+0x2f2>
    14d8:	9b c0       	rjmp	.+310    	; 0x1610 <_Z26processSerialReceivedBytesv+0x428>
	else // hour
	{
		if (input > 255)
			input = 255;
			
		uint16_t hour = (input - 227);
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	03 5e       	subi	r16, 0xE3	; 227
    14de:	11 09       	sbc	r17, r1
		
		searchdelaymaxH = ((uint32_t)(72000000 * hour)) / 65536;
    14e0:	d8 01       	movw	r26, r16
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	32 ea       	ldi	r19, 0xA2	; 162
    14e6:	4a e4       	ldi	r20, 0x4A	; 74
    14e8:	54 e0       	ldi	r21, 0x04	; 4
    14ea:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulshisi3>
    14ee:	90 93 97 01 	sts	0x0197, r25
    14f2:	80 93 96 01 	sts	0x0196, r24
		searchdelaymaxL = ((uint32_t)(72000000 * hour)) % 65536;
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	32 ea       	ldi	r19, 0xA2	; 162
    14fa:	02 9f       	mul	r16, r18
    14fc:	c0 01       	movw	r24, r0
    14fe:	03 9f       	mul	r16, r19
    1500:	90 0d       	add	r25, r0
    1502:	12 9f       	mul	r17, r18
    1504:	90 0d       	add	r25, r0
    1506:	11 24       	eor	r1, r1
    1508:	90 93 95 01 	sts	0x0195, r25
    150c:	80 93 94 01 	sts	0x0194, r24
				minimumSearchBaseStationIndex = receivedData[5];
				maximumSearchBaseStationIndex = receivedData[6];
				char mode = receivedData[7];
				char delay = receivedData[8];
				decodedelay(delay);
				searchindex=-1;
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	90 93 61 00 	sts	0x0061, r25
    1518:	80 93 60 00 	sts	0x0060, r24
				
				if (mode == 'R')
    151c:	e2 35       	cpi	r30, 0x52	; 82
    151e:	09 f4       	brne	.+2      	; 0x1522 <_Z26processSerialReceivedBytesv+0x33a>
    1520:	5a c0       	rjmp	.+180    	; 0x15d6 <_Z26processSerialReceivedBytesv+0x3ee>
				{
					ResetSearchArray();
					searchpointer = 0;
				}
				for (int i = minimumSearchBaseStationIndex; i <= maximumSearchBaseStationIndex; i++)
    1522:	4d 2f       	mov	r20, r29
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	6c 2f       	mov	r22, r28
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	64 17       	cp	r22, r20
    152c:	75 07       	cpc	r23, r21
    152e:	fc f0       	brlt	.+62     	; 0x156e <_Z26processSerialReceivedBytesv+0x386>
    1530:	a0 91 9c 01 	lds	r26, 0x019C
    1534:	b0 91 9d 01 	lds	r27, 0x019D
    1538:	ca 01       	movw	r24, r20
	}
}


/////////////////////////////////////////
void processSerialReceivedBytes()
    153a:	fd 01       	movw	r30, r26
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	e2 56       	subi	r30, 0x62	; 98
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	9b 01       	movw	r18, r22
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
					ResetSearchArray();
					searchpointer = 0;
				}
				for (int i = minimumSearchBaseStationIndex; i <= maximumSearchBaseStationIndex; i++)
				{
					searchingarray[searchpointer] = i;
    154a:	81 93       	st	Z+, r24
    154c:	91 93       	st	Z+, r25
    154e:	01 96       	adiw	r24, 0x01	; 1
				if (mode == 'R')
				{
					ResetSearchArray();
					searchpointer = 0;
				}
				for (int i = minimumSearchBaseStationIndex; i <= maximumSearchBaseStationIndex; i++)
    1550:	82 17       	cp	r24, r18
    1552:	93 07       	cpc	r25, r19
    1554:	d1 f7       	brne	.-12     	; 0x154a <_Z26processSerialReceivedBytesv+0x362>
	}
}


/////////////////////////////////////////
void processSerialReceivedBytes()
    1556:	cd 01       	movw	r24, r26
    1558:	02 96       	adiw	r24, 0x02	; 2
    155a:	86 0f       	add	r24, r22
    155c:	97 1f       	adc	r25, r23
    155e:	40 95       	com	r20
    1560:	50 95       	com	r21
    1562:	84 0f       	add	r24, r20
    1564:	95 1f       	adc	r25, r21
    1566:	90 93 9d 01 	sts	0x019D, r25
    156a:	80 93 9c 01 	sts	0x019C, r24
					//serial.putChar(searchpointer);
					//serial.putChar(searchingarray[searchpointer]);
					searchpointer++;
				}
				
				commandRecievedFlag =1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 e1 01 	sts	0x01E1, r24
				automaticSearchModeFlag = 1;
    1574:	80 93 e0 01 	sts	0x01E0, r24
    1578:	df ce       	rjmp	.-578    	; 0x1338 <_Z26processSerialReceivedBytesv+0x150>
				counter = -1 ;
			}
			
			break;
			case AOUTOMATIC_SEARCH_DISABLE_CMD:
			if (counter > aoutomaticSearchDisableCommandCount + 4)
    157a:	27 30       	cpi	r18, 0x07	; 7
    157c:	31 05       	cpc	r19, r1
    157e:	0c f4       	brge	.+2      	; 0x1582 <_Z26processSerialReceivedBytesv+0x39a>
    1580:	bc ce       	rjmp	.-648    	; 0x12fa <_Z26processSerialReceivedBytesv+0x112>
			{
				serial.putChar('R');
    1582:	62 e5       	ldi	r22, 0x52	; 82
    1584:	8f ea       	ldi	r24, 0xAF	; 175
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN6Serial7putCharEc>
				minimumSearchBaseStationIndex = -1;
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	80 93 63 00 	sts	0x0063, r24
				maximumSearchBaseStationIndex = -1;
    1592:	80 93 62 00 	sts	0x0062, r24
				searchindex = -1;
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	90 93 61 00 	sts	0x0061, r25
    159e:	80 93 60 00 	sts	0x0060, r24
				automaticSearchModeFlag = 0;
    15a2:	10 92 e0 01 	sts	0x01E0, r1
				commandRecievedFlag =0;
    15a6:	10 92 e1 01 	sts	0x01E1, r1
    15aa:	c6 ce       	rjmp	.-628    	; 0x1338 <_Z26processSerialReceivedBytesv+0x150>
{
	searchdelaycounterH = 0;
	searchdelaycounterL = 0;
	if (input < 19) // ms
	{
		searchdelaymaxH = ((uint16_t)(input+1)*5000) / 65536;
    15ac:	10 92 97 01 	sts	0x0197, r1
    15b0:	10 92 96 01 	sts	0x0196, r1
    15b4:	80 2f       	mov	r24, r16
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	48 e8       	ldi	r20, 0x88	; 136
    15bc:	53 e1       	ldi	r21, 0x13	; 19
    15be:	84 9f       	mul	r24, r20
    15c0:	90 01       	movw	r18, r0
    15c2:	85 9f       	mul	r24, r21
    15c4:	30 0d       	add	r19, r0
    15c6:	94 9f       	mul	r25, r20
    15c8:	30 0d       	add	r19, r0
    15ca:	11 24       	eor	r1, r1
		searchdelaymaxL = ((uint16_t)(input+1)*5000) % 65536;
    15cc:	30 93 95 01 	sts	0x0195, r19
    15d0:	20 93 94 01 	sts	0x0194, r18
    15d4:	9d cf       	rjmp	.-198    	; 0x1510 <_Z26processSerialReceivedBytesv+0x328>
    15d6:	ee e9       	ldi	r30, 0x9E	; 158
    15d8:	f1 e0       	ldi	r31, 0x01	; 1
}

void ResetSearchArray()
{
	for (int i = 0; i < 32; i++)
		searchingarray[i] = -1;
    15da:	81 93       	st	Z+, r24
    15dc:	91 93       	st	Z+, r25
	}
}

void ResetSearchArray()
{
	for (int i = 0; i < 32; i++)
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	ee 3d       	cpi	r30, 0xDE	; 222
    15e2:	f2 07       	cpc	r31, r18
    15e4:	d1 f7       	brne	.-12     	; 0x15da <_Z26processSerialReceivedBytesv+0x3f2>
				searchindex=-1;
				
				if (mode == 'R')
				{
					ResetSearchArray();
					searchpointer = 0;
    15e6:	10 92 9d 01 	sts	0x019D, r1
    15ea:	10 92 9c 01 	sts	0x019C, r1
    15ee:	99 cf       	rjmp	.-206    	; 0x1522 <_Z26processSerialReceivedBytesv+0x33a>
		searchdelaymaxH = ((uint16_t)(input+1)*5000) / 65536;
		searchdelaymaxL = ((uint16_t)(input+1)*5000) % 65536;
	}
	else if (input < 138) // sec
	{
		uint32_t temp = ((uint32_t)(input-18)) * 20000;
    15f0:	a0 2f       	mov	r26, r16
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	52 97       	sbiw	r26, 0x12	; 18
    15f6:	20 e2       	ldi	r18, 0x20	; 32
    15f8:	3e e4       	ldi	r19, 0x4E	; 78
    15fa:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__usmulhisi3>
		searchdelaymaxH = temp / 65536;
    15fe:	90 93 97 01 	sts	0x0197, r25
    1602:	80 93 96 01 	sts	0x0196, r24
		searchdelaymaxL = temp % 65536;			
    1606:	70 93 95 01 	sts	0x0195, r23
    160a:	60 93 94 01 	sts	0x0194, r22
    160e:	80 cf       	rjmp	.-256    	; 0x1510 <_Z26processSerialReceivedBytesv+0x328>
	}
	else if (input < 227) // minute
	{
			searchdelaymaxH = ((uint32_t)(input - 137) * 1200000) /65536;
    1610:	10 e0       	ldi	r17, 0x00	; 0
    1612:	09 58       	subi	r16, 0x89	; 137
    1614:	11 09       	sbc	r17, r1
    1616:	d8 01       	movw	r26, r16
    1618:	20 e8       	ldi	r18, 0x80	; 128
    161a:	3f e4       	ldi	r19, 0x4F	; 79
    161c:	42 e1       	ldi	r20, 0x12	; 18
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__mulshisi3>
    1624:	90 93 97 01 	sts	0x0197, r25
    1628:	80 93 96 01 	sts	0x0196, r24
			searchdelaymaxL = ((uint16_t)(input - 137) * 1200000);		
    162c:	20 e8       	ldi	r18, 0x80	; 128
    162e:	3f e4       	ldi	r19, 0x4F	; 79
    1630:	02 9f       	mul	r16, r18
    1632:	c0 01       	movw	r24, r0
    1634:	03 9f       	mul	r16, r19
    1636:	90 0d       	add	r25, r0
    1638:	12 9f       	mul	r17, r18
    163a:	90 0d       	add	r25, r0
    163c:	11 24       	eor	r1, r1
    163e:	90 93 95 01 	sts	0x0195, r25
    1642:	80 93 94 01 	sts	0x0194, r24
    1646:	64 cf       	rjmp	.-312    	; 0x1510 <_Z26processSerialReceivedBytesv+0x328>

00001648 <_Z36madeGetStatusCommandBaseOnMACAddressc>:
			
}

void madeGetStatusCommandBaseOnMACAddress(char macNumber)
{
	commandArray[0]=START_PACKET_BYTE ;
    1648:	9e e7       	ldi	r25, 0x7E	; 126
    164a:	90 93 7b 01 	sts	0x017B, r25
	commandArray[1]=GET_STATUS_BASED_ON_MAC_CMD;
    164e:	94 e2       	ldi	r25, 0x24	; 36
    1650:	90 93 7c 01 	sts	0x017C, r25
	commandArray[2]= macNumber;
    1654:	80 93 7d 01 	sts	0x017D, r24
	commandArray[MAXIMUM_NUMBER_OF_DATA] = 3;	
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	80 93 8f 01 	sts	0x018F, r24
    165e:	08 95       	ret

00001660 <_Z20sendAlliveSerialDatav>:
}


void sendAlliveSerialData()
{
	if (serialTxDataBuffer.getFifoFullLength() == 0 )
    1660:	8e e9       	ldi	r24, 0x9E	; 158
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN4FIFO17getFifoFullLengthEv>
    1668:	89 2b       	or	r24, r25
    166a:	09 f0       	breq	.+2      	; 0x166e <_Z20sendAlliveSerialDatav+0xe>
    166c:	08 95       	ret
	{
		serialTxDataBuffer.writeByte(START_PACKET_BYTE);
    166e:	6e e7       	ldi	r22, 0x7E	; 126
    1670:	8e e9       	ldi	r24, 0x9E	; 158
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
		serialTxDataBuffer.writeByte(BIN_KEEP_ALIVE);
    1678:	69 e0       	ldi	r22, 0x09	; 9
    167a:	8e e9       	ldi	r24, 0x9E	; 158
    167c:	92 e0       	ldi	r25, 0x02	; 2
    167e:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
		serialTxDataBuffer.writeString("I AM ALIVE" , sizeof("I AM ALIVE"));	
    1682:	4b e0       	ldi	r20, 0x0B	; 11
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	64 e6       	ldi	r22, 0x64	; 100
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	8e e9       	ldi	r24, 0x9E	; 158
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <_ZN4FIFO11writeStringEPci>

00001692 <_Z16ResetSearchArrayv>:
	}
}

void ResetSearchArray()
{
    1692:	ee e9       	ldi	r30, 0x9E	; 158
    1694:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < 32; i++)
		searchingarray[i] = -1;
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	81 93       	st	Z+, r24
    169c:	91 93       	st	Z+, r25
	}
}

void ResetSearchArray()
{
	for (int i = 0; i < 32; i++)
    169e:	21 e0       	ldi	r18, 0x01	; 1
    16a0:	ee 3d       	cpi	r30, 0xDE	; 222
    16a2:	f2 07       	cpc	r31, r18
    16a4:	d1 f7       	brne	.-12     	; 0x169a <_Z16ResetSearchArrayv+0x8>
		searchingarray[i] = -1;
}
    16a6:	08 95       	ret

000016a8 <_Z41__static_initialization_and_destruction_0ii.part.0>:

//ADF7020 Board0 ;
Transceiver transceiver;

FIFO serialTxDataBuffer,serialRxDataBuffer;
StationInfo stationInfo;
    16a8:	83 ee       	ldi	r24, 0xE3	; 227
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN11StationInfoD1Ev>
Packet packetProcessor;

//ADF7020 Board0 ;
Transceiver transceiver;

FIFO serialTxDataBuffer,serialRxDataBuffer;
    16b0:	81 e2       	ldi	r24, 0x21	; 33
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN4FIFOD1Ev>
    16b8:	8e e9       	ldi	r24, 0x9E	; 158
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN4FIFOD1Ev>
//Message message;
//Station stations[10];
Packet packetProcessor;

//ADF7020 Board0 ;
Transceiver transceiver;
    16c0:	8b e1       	ldi	r24, 0x1B	; 27
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_ZN11TransceiverD1Ev>
#include "ADF7020.h"

Serial serial;
//Message message;
//Station stations[10];
Packet packetProcessor;
    16c8:	8a ea       	ldi	r24, 0xAA	; 170
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_ZN6PacketD1Ev>

000016d0 <_GLOBAL__sub_I_serial>:
    16d0:	8a ea       	ldi	r24, 0xAA	; 170
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZN6PacketC1Ev>

//ADF7020 Board0 ;
Transceiver transceiver;
    16d8:	8b e1       	ldi	r24, 0x1B	; 27
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZN11TransceiverC1Ev>

FIFO serialTxDataBuffer,serialRxDataBuffer;
    16e0:	8e e9       	ldi	r24, 0x9E	; 158
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN4FIFOC1Ev>
    16e8:	81 e2       	ldi	r24, 0x21	; 33
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN4FIFOC1Ev>
StationInfo stationInfo;
    16f0:	83 ee       	ldi	r24, 0xE3	; 227
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <_ZN11StationInfoC1Ev>

000016f8 <_GLOBAL__sub_D_serial>:
uint16_t searchdelaycounterH, searchdelaycounterL;
uint16_t searchdelaymaxH, searchdelaymaxL;

//int32_t searchdelayhour=-1,searchdelayhourmax; //each 20counter = 1ms

    16f8:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_Z41__static_initialization_and_destruction_0ii.part.0>

000016fc <main>:
char receivedPacket[PACKET_LENGTH +1] , commandPacket[PACKET_LENGTH + 1];



int main(void)
{
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	00 d0       	rcall	.+0      	; 0x1702 <main+0x6>
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	
	int dataLength ;
	unsigned char baseStationNumber;
	uint8_t temp =0;
	//_delay_ms(5000);
	micro_Initialize();
    1706:	0e 94 56 08 	call	0x10ac	; 0x10ac <_Z16micro_Initializev>
	resetGlobalIntrrupt();
    170a:	0e 94 df 08 	call	0x11be	; 0x11be <_Z19resetGlobalIntrruptv>
	ResetSearchArray();
    170e:	0e 94 49 0b 	call	0x1692	; 0x1692 <_Z16ResetSearchArrayv>
	//{
		//DDRB = 0xFF;
		//PORTB =0xFF;
	//}
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	8b e1       	ldi	r24, 0x1B	; 27
    1716:	93 e0       	ldi	r25, 0x03	; 3
    1718:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN11Transceiver7setModeE14TranceiverMode>
	for (i=0;i<3 ;i++)
	{
		setLED(i);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z6setLEDc>
    1722:	2f e7       	ldi	r18, 0x7F	; 127
    1724:	68 e3       	ldi	r22, 0x38	; 56
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	21 50       	subi	r18, 0x01	; 1
    172a:	60 40       	sbci	r22, 0x00	; 0
    172c:	80 40       	sbci	r24, 0x00	; 0
    172e:	e1 f7       	brne	.-8      	; 0x1728 <main+0x2c>
    1730:	00 c0       	rjmp	.+0      	; 0x1732 <main+0x36>
    1732:	00 00       	nop
		_delay_ms(50);
		resetLED(i);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	0e 94 bf 08 	call	0x117e	; 0x117e <_Z8resetLEDc>
    173a:	9f e7       	ldi	r25, 0x7F	; 127
    173c:	a8 e3       	ldi	r26, 0x38	; 56
    173e:	21 e0       	ldi	r18, 0x01	; 1
    1740:	91 50       	subi	r25, 0x01	; 1
    1742:	a0 40       	sbci	r26, 0x00	; 0
    1744:	20 40       	sbci	r18, 0x00	; 0
    1746:	e1 f7       	brne	.-8      	; 0x1740 <main+0x44>
    1748:	00 c0       	rjmp	.+0      	; 0x174a <main+0x4e>
    174a:	00 00       	nop
	//}
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
	for (i=0;i<3 ;i++)
	{
		setLED(i);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z6setLEDc>
    1752:	6f e7       	ldi	r22, 0x7F	; 127
    1754:	88 e3       	ldi	r24, 0x38	; 56
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	61 50       	subi	r22, 0x01	; 1
    175a:	80 40       	sbci	r24, 0x00	; 0
    175c:	90 40       	sbci	r25, 0x00	; 0
    175e:	e1 f7       	brne	.-8      	; 0x1758 <main+0x5c>
    1760:	00 c0       	rjmp	.+0      	; 0x1762 <main+0x66>
    1762:	00 00       	nop
		_delay_ms(50);
		resetLED(i);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	0e 94 bf 08 	call	0x117e	; 0x117e <_Z8resetLEDc>
    176a:	af e7       	ldi	r26, 0x7F	; 127
    176c:	28 e3       	ldi	r18, 0x38	; 56
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	a1 50       	subi	r26, 0x01	; 1
    1772:	20 40       	sbci	r18, 0x00	; 0
    1774:	60 40       	sbci	r22, 0x00	; 0
    1776:	e1 f7       	brne	.-8      	; 0x1770 <main+0x74>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <main+0x7e>
    177a:	00 00       	nop
	//}
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
	for (i=0;i<3 ;i++)
	{
		setLED(i);
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z6setLEDc>
    1782:	8f e7       	ldi	r24, 0x7F	; 127
    1784:	98 e3       	ldi	r25, 0x38	; 56
    1786:	a1 e0       	ldi	r26, 0x01	; 1
    1788:	81 50       	subi	r24, 0x01	; 1
    178a:	90 40       	sbci	r25, 0x00	; 0
    178c:	a0 40       	sbci	r26, 0x00	; 0
    178e:	e1 f7       	brne	.-8      	; 0x1788 <main+0x8c>
    1790:	00 c0       	rjmp	.+0      	; 0x1792 <main+0x96>
    1792:	00 00       	nop
		_delay_ms(50);
		resetLED(i);
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	0e 94 bf 08 	call	0x117e	; 0x117e <_Z8resetLEDc>
    179a:	2f e7       	ldi	r18, 0x7F	; 127
    179c:	68 e3       	ldi	r22, 0x38	; 56
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	21 50       	subi	r18, 0x01	; 1
    17a2:	60 40       	sbci	r22, 0x00	; 0
    17a4:	80 40       	sbci	r24, 0x00	; 0
    17a6:	e1 f7       	brne	.-8      	; 0x17a0 <main+0xa4>
    17a8:	00 c0       	rjmp	.+0      	; 0x17aa <main+0xae>
    17aa:	00 00       	nop
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	a0 e7       	ldi	r26, 0x70	; 112
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	91 50       	subi	r25, 0x01	; 1
    17b4:	a0 40       	sbci	r26, 0x00	; 0
    17b6:	20 40       	sbci	r18, 0x00	; 0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <main+0xb6>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <main+0xc0>
    17bc:	00 00       	nop
		_delay_ms(50);
	}
	
	_delay_ms(100);
	if( (PIND & 0x04) >> 2)
    17be:	82 99       	sbic	0x10, 2	; 16
    17c0:	3a c1       	rjmp	.+628    	; 0x1a36 <main+0x33a>
    17c2:	6f ef       	ldi	r22, 0xFF	; 255
    17c4:	80 e7       	ldi	r24, 0x70	; 112
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	61 50       	subi	r22, 0x01	; 1
    17ca:	80 40       	sbci	r24, 0x00	; 0
    17cc:	90 40       	sbci	r25, 0x00	; 0
    17ce:	e1 f7       	brne	.-8      	; 0x17c8 <main+0xcc>
    17d0:	00 c0       	rjmp	.+0      	; 0x17d2 <main+0xd6>
    17d2:	00 00       	nop
	setLED(0);

	_delay_ms(100);
	setLED(0);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z6setLEDc>
	
	setGlobalIntrrupt();
    17da:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_Z17setGlobalIntrruptv>
	////else
	//////test_index2 = temp;
	//serial.putChar(temp);
	////serial.putChar(test_index2);
	//}
	 minimumSearchBaseStationIndex =-1; 
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	80 93 63 00 	sts	0x0063, r24
	 maximumSearchBaseStationIndex =-1;
    17e4:	80 93 62 00 	sts	0x0062, r24
	 automaticSearchModeFlag = 0;
    17e8:	10 92 e0 01 	sts	0x01E0, r1



int main(void)
{
	char interruptFlag=0 , answerReceivedFlag = 0 ;
    17ec:	d1 2c       	mov	r13, r1
								searchindex = nextindex;
								madeGetStatusCommandBaseOnMACAddress(searchingarray[searchindex]);
							}
							else
							{
								searchindex = -1;
    17ee:	ee 24       	eor	r14, r14
    17f0:	ea 94       	dec	r14
    17f2:	fe 2c       	mov	r15, r14
	 
	while (1)
	{
		
		
		processSerialReceivedBytes();
    17f4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_Z26processSerialReceivedBytesv>
		
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
    17f8:	8e e9       	ldi	r24, 0x9E	; 158
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN4FIFO17getFifoFullLengthEv>
    1800:	18 16       	cp	r1, r24
    1802:	19 06       	cpc	r1, r25
    1804:	34 f4       	brge	.+12     	; 0x1812 <main+0x116>
			if (serial.isSerialTxEmpty())
    1806:	8f ea       	ldi	r24, 0xAF	; 175
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_ZN6Serial15isSerialTxEmptyEv>
    180e:	81 11       	cpse	r24, r1
    1810:	48 c0       	rjmp	.+144    	; 0x18a2 <main+0x1a6>
				serial.putChar(serialTxDataBuffer.readByte());
				
		if(commandRecievedFlag)
    1812:	80 91 e1 01 	lds	r24, 0x01E1
    1816:	81 11       	cpse	r24, r1
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <main+0x146>
			ToggleLED(0);
		if (transceiver.isReceiver())
    181a:	8b e1       	ldi	r24, 0x1B	; 27
    181c:	93 e0       	ldi	r25, 0x03	; 3
    181e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <_ZN11Transceiver10isReceiverEv>
    1822:	81 11       	cpse	r24, r1
    1824:	17 c0       	rjmp	.+46     	; 0x1854 <main+0x158>
				
			}
		}
		else
		{
			setLED(2);
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z6setLEDc>
			if (transceiver.getFifoFullLength() == 0 )
    182c:	8b e1       	ldi	r24, 0x1B	; 27
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN11Transceiver17getFifoFullLengthEv>
    1834:	89 2b       	or	r24, r25
    1836:	f1 f6       	brne	.-68     	; 0x17f4 <main+0xf8>
				transceiver.changeMode();	
    1838:	8b e1       	ldi	r24, 0x1B	; 27
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN11Transceiver10changeModeEv>
    1840:	d9 cf       	rjmp	.-78     	; 0x17f4 <main+0xf8>
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
			if (serial.isSerialTxEmpty())
				serial.putChar(serialTxDataBuffer.readByte());
				
		if(commandRecievedFlag)
			ToggleLED(0);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_Z9ToggleLEDc>
		if (transceiver.isReceiver())
    1848:	8b e1       	ldi	r24, 0x1B	; 27
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <_ZN11Transceiver10isReceiverEv>
    1850:	88 23       	and	r24, r24
    1852:	49 f3       	breq	.-46     	; 0x1826 <main+0x12a>
		{
			
			if (transceiver.isPreambleDetected())
    1854:	8b e1       	ldi	r24, 0x1B	; 27
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN11Transceiver18isPreambleDetectedEv>
    185c:	81 11       	cpse	r24, r1
    185e:	50 c0       	rjmp	.+160    	; 0x1900 <main+0x204>
			{
				rssivalue = transceiver.adfReadback(RSSI_READBACK);
				//rssivalue = 0x34E5;
			}
			
			if (transceiver.getFifoFullLength() > PACKET_LENGTH - 1  )
    1860:	8b e1       	ldi	r24, 0x1B	; 27
    1862:	93 e0       	ldi	r25, 0x03	; 3
    1864:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN11Transceiver17getFifoFullLengthEv>
    1868:	82 34       	cpi	r24, 0x42	; 66
    186a:	91 05       	cpc	r25, r1
    186c:	20 f5       	brcc	.+72     	; 0x18b6 <main+0x1ba>
					receivedDataProcess(receivedPacket , dataLength);
					answerReceivedFlag = 1;
				}
				
			}
			else if ((timeoutCounter > 2500) || answerReceivedFlag )   //timeout counter must be bigger than 1889 for baudrate 9600;
    186e:	20 91 de 01 	lds	r18, 0x01DE
    1872:	30 91 df 01 	lds	r19, 0x01DF
    1876:	25 3c       	cpi	r18, 0xC5	; 197
    1878:	39 40       	sbci	r19, 0x09	; 9
    187a:	18 f4       	brcc	.+6      	; 0x1882 <main+0x186>
    187c:	dd 20       	and	r13, r13
    187e:	09 f4       	brne	.+2      	; 0x1882 <main+0x186>
    1880:	b9 cf       	rjmp	.-142    	; 0x17f4 <main+0xf8>
			{
				if(!commandRecievedFlag)
    1882:	80 91 e1 01 	lds	r24, 0x01E1
    1886:	81 11       	cpse	r24, r1
    1888:	84 c0       	rjmp	.+264    	; 0x1992 <main+0x296>
				{
					if (automaticSearchModeFlag)
    188a:	80 91 e0 01 	lds	r24, 0x01E0
    188e:	81 11       	cpse	r24, r1
    1890:	a3 c0       	rjmp	.+326    	; 0x19d8 <main+0x2dc>
					}
					
				}

				answerReceivedFlag = 0;
				timeoutCounter =0;
    1892:	10 92 df 01 	sts	0x01DF, r1
    1896:	10 92 de 01 	sts	0x01DE, r1
					transceiver.writePacket(commandPacket);
					commandRecievedFlag	= 0;
					restoreIntrrupt(interruptFlag);
				}
				else
					sendAlliveSerialData();
    189a:	0e 94 30 0b 	call	0x1660	; 0x1660 <_Z20sendAlliveSerialDatav>
						//serialTxDataBuffer.writeByte(0);
					}
					
				}

				answerReceivedFlag = 0;
    189e:	d1 2c       	mov	r13, r1
    18a0:	a9 cf       	rjmp	.-174    	; 0x17f4 <main+0xf8>
		
		processSerialReceivedBytes();
		
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
			if (serial.isSerialTxEmpty())
				serial.putChar(serialTxDataBuffer.readByte());
    18a2:	8e e9       	ldi	r24, 0x9E	; 158
    18a4:	92 e0       	ldi	r25, 0x02	; 2
    18a6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN4FIFO8readByteEv>
    18aa:	68 2f       	mov	r22, r24
    18ac:	8f ea       	ldi	r24, 0xAF	; 175
    18ae:	93 e0       	ldi	r25, 0x03	; 3
    18b0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN6Serial7putCharEc>
    18b4:	ae cf       	rjmp	.-164    	; 0x1812 <main+0x116>
			}
			
			if (transceiver.getFifoFullLength() > PACKET_LENGTH - 1  )
			{
				
				transceiver.readReceivedPacket(receivedPacket);
    18b6:	65 ef       	ldi	r22, 0xF5	; 245
    18b8:	73 e0       	ldi	r23, 0x03	; 3
    18ba:	8b e1       	ldi	r24, 0x1B	; 27
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN11Transceiver18readReceivedPacketEPc>
				resetLED(2);
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	0e 94 bf 08 	call	0x117e	; 0x117e <_Z8resetLEDc>
				
				if (packetProcessor.extractData(receivedPacket , dataLength))
    18c8:	ae 01       	movw	r20, r28
    18ca:	4f 5f       	subi	r20, 0xFF	; 255
    18cc:	5f 4f       	sbci	r21, 0xFF	; 255
    18ce:	65 ef       	ldi	r22, 0xF5	; 245
    18d0:	73 e0       	ldi	r23, 0x03	; 3
    18d2:	8a ea       	ldi	r24, 0xAA	; 170
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN6Packet11extractDataEPcRi>
    18da:	88 23       	and	r24, r24
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <main+0x1e4>
    18de:	8a cf       	rjmp	.-236    	; 0x17f4 <main+0xf8>
				{			
					ToggleLED(1);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_Z9ToggleLEDc>
					StationInfoStructure* structPtr = (StationInfoStructure*) receivedPacket;
					structPtr->rssiCenterStation = rssivalue ;
    18e6:	10 93 1c 04 	sts	0x041C, r17
    18ea:	00 93 1b 04 	sts	0x041B, r16
					receivedDataProcess(receivedPacket , dataLength);
    18ee:	69 81       	ldd	r22, Y+1	; 0x01
    18f0:	7a 81       	ldd	r23, Y+2	; 0x02
    18f2:	85 ef       	ldi	r24, 0xF5	; 245
    18f4:	93 e0       	ldi	r25, 0x03	; 3
    18f6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_Z19receivedDataProcessPci>
					answerReceivedFlag = 1;
    18fa:	dd 24       	eor	r13, r13
    18fc:	d3 94       	inc	r13
    18fe:	7a cf       	rjmp	.-268    	; 0x17f4 <main+0xf8>
		if (transceiver.isReceiver())
		{
			
			if (transceiver.isPreambleDetected())
			{
				rssivalue = transceiver.adfReadback(RSSI_READBACK);
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	8b e1       	ldi	r24, 0x1B	; 27
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN11Transceiver11adfReadbackEc>
    190a:	8c 01       	movw	r16, r24
    190c:	a9 cf       	rjmp	.-174    	; 0x1860 <main+0x164>
						
						sendAlliveSerialData();

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
						{
							ToggleLED(1);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_Z9ToggleLEDc>
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
    1914:	e0 91 60 00 	lds	r30, 0x0060
    1918:	f0 91 61 00 	lds	r31, 0x0061
    191c:	cf 01       	movw	r24, r30
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	9c 01       	movw	r18, r24
    1922:	40 91 9c 01 	lds	r20, 0x019C
    1926:	50 91 9d 01 	lds	r21, 0x019D
    192a:	48 17       	cp	r20, r24
    192c:	59 07       	cpc	r21, r25
    192e:	d0 f0       	brcs	.+52     	; 0x1964 <main+0x268>
							{
								//serial.getChar(searchingarray[i]);
								if (searchingarray[i] != -1)
    1930:	dc 01       	movw	r26, r24
    1932:	aa 0f       	add	r26, r26
    1934:	bb 1f       	adc	r27, r27
    1936:	a2 56       	subi	r26, 0x62	; 98
    1938:	be 4f       	sbci	r27, 0xFE	; 254
    193a:	6d 91       	ld	r22, X+
    193c:	7c 91       	ld	r23, X
    193e:	6f 3f       	cpi	r22, 0xFF	; 255
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	09 f0       	breq	.+2      	; 0x1946 <main+0x24a>
    1944:	65 c0       	rjmp	.+202    	; 0x1a10 <main+0x314>

char receivedPacket[PACKET_LENGTH +1] , commandPacket[PACKET_LENGTH + 1];



int main(void)
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	ee 55       	subi	r30, 0x5E	; 94
    194c:	fe 4f       	sbci	r31, 0xFE	; 254
    194e:	05 c0       	rjmp	.+10     	; 0x195a <main+0x25e>
							ToggleLED(1);
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
							{
								//serial.getChar(searchingarray[i]);
								if (searchingarray[i] != -1)
    1950:	81 91       	ld	r24, Z+
    1952:	91 91       	ld	r25, Z+
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	09 f0       	breq	.+2      	; 0x195a <main+0x25e>
    1958:	5c c0       	rjmp	.+184    	; 0x1a12 <main+0x316>

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
						{
							ToggleLED(1);
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	42 17       	cp	r20, r18
    1960:	53 07       	cpc	r21, r19
    1962:	b0 f7       	brcc	.-20     	; 0x1950 <main+0x254>
								searchindex = nextindex;
								madeGetStatusCommandBaseOnMACAddress(searchingarray[searchindex]);
							}
							else
							{
								searchindex = -1;
    1964:	f0 92 61 00 	sts	0x0061, r15
    1968:	e0 92 60 00 	sts	0x0060, r14
								searchdelaycounterH = searchdelaymaxH;
    196c:	80 91 96 01 	lds	r24, 0x0196
    1970:	90 91 97 01 	lds	r25, 0x0197
    1974:	90 93 9b 01 	sts	0x019B, r25
    1978:	80 93 9a 01 	sts	0x019A, r24
								searchdelaycounterL = searchdelaymaxL;
    197c:	80 91 94 01 	lds	r24, 0x0194
    1980:	90 91 95 01 	lds	r25, 0x0195
    1984:	90 93 99 01 	sts	0x0199, r25
    1988:	80 93 98 01 	sts	0x0198, r24
							}
														
							commandRecievedFlag = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	80 93 e1 01 	sts	0x01E1, r24
					}
					
				}

				answerReceivedFlag = 0;
				timeoutCounter =0;
    1992:	10 92 df 01 	sts	0x01DF, r1
    1996:	10 92 de 01 	sts	0x01DE, r1
				
				if (commandRecievedFlag)
				{
					interruptFlag = resetAndStoreIntrruptFlag();
    199a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
    199e:	d8 2e       	mov	r13, r24
					transceiver.changeMode();
    19a0:	8b e1       	ldi	r24, 0x1B	; 27
    19a2:	93 e0       	ldi	r25, 0x03	; 3
    19a4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN11Transceiver10changeModeEv>
					
					packetProcessor.createPacket(commandArray , commandArray[MAXIMUM_NUMBER_OF_DATA] , commandPacket);
    19a8:	40 91 8f 01 	lds	r20, 0x018F
    19ac:	22 eb       	ldi	r18, 0xB2	; 178
    19ae:	33 e0       	ldi	r19, 0x03	; 3
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	6b e7       	ldi	r22, 0x7B	; 123
    19b4:	71 e0       	ldi	r23, 0x01	; 1
    19b6:	8a ea       	ldi	r24, 0xAA	; 170
    19b8:	93 e0       	ldi	r25, 0x03	; 3
    19ba:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN6Packet12createPacketEPciS0_>
					transceiver.writePacket(commandPacket);
    19be:	62 eb       	ldi	r22, 0xB2	; 178
    19c0:	73 e0       	ldi	r23, 0x03	; 3
    19c2:	8b e1       	ldi	r24, 0x1B	; 27
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN11Transceiver11writePacketEPc>
					commandRecievedFlag	= 0;
    19ca:	10 92 e1 01 	sts	0x01E1, r1
					restoreIntrrupt(interruptFlag);
    19ce:	8d 2d       	mov	r24, r13
    19d0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
						//serialTxDataBuffer.writeByte(0);
					}
					
				}

				answerReceivedFlag = 0;
    19d4:	d1 2c       	mov	r13, r1
    19d6:	0e cf       	rjmp	.-484    	; 0x17f4 <main+0xf8>
						{
							;//serialTxDataBuffer.writeString("$CMD" , sizeof("$CMD"));
							//serialTxDataBuffer.writeByte(0);
						}
						
						sendAlliveSerialData();
    19d8:	0e 94 30 0b 	call	0x1660	; 0x1660 <_Z20sendAlliveSerialDatav>

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
    19dc:	80 91 98 01 	lds	r24, 0x0198
    19e0:	90 91 99 01 	lds	r25, 0x0199
    19e4:	89 2b       	or	r24, r25
    19e6:	39 f4       	brne	.+14     	; 0x19f6 <main+0x2fa>
    19e8:	80 91 9a 01 	lds	r24, 0x019A
    19ec:	90 91 9b 01 	lds	r25, 0x019B
    19f0:	89 2b       	or	r24, r25
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <main+0x2fa>
    19f4:	8c cf       	rjmp	.-232    	; 0x190e <main+0x212>
							//if (searchdelaycounter > -1)
								//searchdelaycounter--;
							//else
								//searchdelaycounter = searchdelaymax;
							//if (searchdelaycounterH == 0)
							ToggleLED(2);
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_Z9ToggleLEDc>
    19fc:	80 91 e1 01 	lds	r24, 0x01E1
					}
					
				}

				answerReceivedFlag = 0;
				timeoutCounter =0;
    1a00:	10 92 df 01 	sts	0x01DF, r1
    1a04:	10 92 de 01 	sts	0x01DE, r1
				
				if (commandRecievedFlag)
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <main+0x312>
    1a0c:	46 cf       	rjmp	.-372    	; 0x189a <main+0x19e>
    1a0e:	c5 cf       	rjmp	.-118    	; 0x199a <main+0x29e>

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
						{
							ToggleLED(1);
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
    1a10:	9c 01       	movw	r18, r24
								{
									nextindex = i;
									break;
								}
							}
							if (nextindex != -1)
    1a12:	2f 3f       	cpi	r18, 0xFF	; 255
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	38 07       	cpc	r19, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <main+0x320>
    1a1a:	a4 cf       	rjmp	.-184    	; 0x1964 <main+0x268>
							{
								searchindex = nextindex;
    1a1c:	30 93 61 00 	sts	0x0061, r19
    1a20:	20 93 60 00 	sts	0x0060, r18
								madeGetStatusCommandBaseOnMACAddress(searchingarray[searchindex]);
    1a24:	f9 01       	movw	r30, r18
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	e2 56       	subi	r30, 0x62	; 98
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	80 81       	ld	r24, Z
    1a30:	0e 94 24 0b 	call	0x1648	; 0x1648 <_Z36madeGetStatusCommandBaseOnMACAddressc>
    1a34:	ab cf       	rjmp	.-170    	; 0x198c <main+0x290>
		_delay_ms(50);
	}
	
	_delay_ms(100);
	if( (PIND & 0x04) >> 2)
	setLED(0);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	0e 94 aa 08 	call	0x1154	; 0x1154 <_Z6setLEDc>
    1a3c:	c2 ce       	rjmp	.-636    	; 0x17c2 <main+0xc6>

00001a3e <_ZN6PacketC1Ev>:
#include "GlobalVariables.h"

// default constructor
Packet::Packet()
{
	header[0]=0x11;
    1a3e:	21 e1       	ldi	r18, 0x11	; 17
    1a40:	fc 01       	movw	r30, r24
    1a42:	24 83       	std	Z+4, r18	; 0x04
    1a44:	08 95       	ret

00001a46 <_ZN6PacketD1Ev>:
	//header = {0x11,0x22,0x33,0x44,0x55,0x66};
	//preamble ={0x12,0x34,0x56};
} //Packet

// default destructor
Packet::~Packet()
    1a46:	08 95       	ret

00001a48 <_ZN6Packet12createPacketEPciS0_>:
{
} //~Packet

void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
	unsigned char i;
	crcPacket =0;
    1a56:	dc 01       	movw	r26, r24
    1a58:	13 96       	adiw	r26, 0x03	; 3
    1a5a:	1c 92       	st	X, r1
    1a5c:	1e 92       	st	-X, r1
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
	if (dataLength > DATA_LENGTH )
    1a60:	4e 33       	cpi	r20, 0x3E	; 62
    1a62:	51 05       	cpc	r21, r1
    1a64:	88 f4       	brcc	.+34     	; 0x1a88 <_ZN6Packet12createPacketEPciS0_+0x40>
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
    1a66:	41 15       	cp	r20, r1
    1a68:	51 05       	cpc	r21, r1
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <_ZN6Packet12createPacketEPciS0_+0x26>
    1a6c:	50 c0       	rjmp	.+160    	; 0x1b0e <_ZN6Packet12createPacketEPciS0_+0xc6>
    1a6e:	f9 01       	movw	r30, r18
    1a70:	82 e4       	ldi	r24, 0x42	; 66
		//packetString[21] =0xFF;
	}
	else
	for (i=0 ; i<PACKET_LENGTH ; i++ )
	{
		packetString[i]= 0x00;
    1a72:	11 92       	st	Z+, r1
    1a74:	81 50       	subi	r24, 0x01	; 1
		packetString[PACKET_LENGTH  - 2 ] = (crcPacket >> 8) ;
		packetString[PACKET_LENGTH - 1 ] = (crcPacket & 0xFF );
		//packetString[21] =0xFF;
	}
	else
	for (i=0 ; i<PACKET_LENGTH ; i++ )
    1a76:	e9 f7       	brne	.-6      	; 0x1a72 <_ZN6Packet12createPacketEPciS0_+0x2a>
	{
		packetString[i]= 0x00;
	}
	
	
}
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	08 95       	ret
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
	{
		for (i=0; i < PACKET_HEADER_NUM ; i++)
		{
			packetString[i] = header[i];
    1a88:	ec 01       	movw	r28, r24
    1a8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a8c:	f9 01       	movw	r30, r18
    1a8e:	40 83       	st	Z, r20
		}
		
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
    1a90:	11 82       	std	Z+1, r1	; 0x01
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
    1a92:	4d e3       	ldi	r20, 0x3D	; 61
    1a94:	42 83       	std	Z+2, r20	; 0x02
    1a96:	10 e4       	ldi	r17, 0x40	; 64
void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
	unsigned char i;
	crcPacket =0;
	if (dataLength > DATA_LENGTH )
		dataLength = DATA_LENGTH;
    1a98:	4d e3       	ldi	r20, 0x3D	; 61
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
Packet::~Packet()
{
} //~Packet

void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
    1a9c:	00 e0       	ldi	r16, 0x00	; 0
    1a9e:	a0 e0       	ldi	r26, 0x00	; 0
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
		
		for (i=0; i < dataLength ; i++)
		{
			crcPacket += dataString[i];
    1aa2:	6b 01       	movw	r12, r22
    1aa4:	ca 0e       	add	r12, r26
    1aa6:	db 1e       	adc	r13, r27
    1aa8:	f6 01       	movw	r30, r12
    1aaa:	f0 80       	ld	r15, Z
    1aac:	fc 01       	movw	r30, r24
    1aae:	c2 81       	ldd	r28, Z+2	; 0x02
    1ab0:	d3 81       	ldd	r29, Z+3	; 0x03
    1ab2:	cf 0d       	add	r28, r15
    1ab4:	d1 1d       	adc	r29, r1
    1ab6:	d3 83       	std	Z+3, r29	; 0x03
    1ab8:	c2 83       	std	Z+2, r28	; 0x02
			packetString[i + PACKET_HEADER_NUM  + 2 ]= dataString[i];
    1aba:	e6 01       	movw	r28, r12
    1abc:	e8 81       	ld	r30, Y
    1abe:	a2 0f       	add	r26, r18
    1ac0:	b3 1f       	adc	r27, r19
    1ac2:	13 96       	adiw	r26, 0x03	; 3
    1ac4:	ec 93       	st	X, r30
		}
		
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
		
		for (i=0; i < dataLength ; i++)
    1ac6:	0f 5f       	subi	r16, 0xFF	; 255
    1ac8:	a0 2f       	mov	r26, r16
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	a4 17       	cp	r26, r20
    1ace:	b5 07       	cpc	r27, r21
    1ad0:	44 f3       	brlt	.-48     	; 0x1aa2 <_ZN6Packet12createPacketEPciS0_+0x5a>
    1ad2:	05 c0       	rjmp	.+10     	; 0x1ade <_ZN6Packet12createPacketEPciS0_+0x96>
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH  ]= '\r';
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH + 1 ]= '\n';
		
		for (i=(PACKET_HEADER_NUM  + dataLength +2 ) ; i < (PACKET_LENGTH - 2) ; i++)
		{
			packetString[ i ]= 0x00;
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	e1 0f       	add	r30, r17
    1ad8:	f1 1d       	adc	r31, r1
    1ada:	10 82       	st	Z, r1
			packetString[i + PACKET_HEADER_NUM  + 2 ]= dataString[i];
		}
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH  ]= '\r';
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH + 1 ]= '\n';
		
		for (i=(PACKET_HEADER_NUM  + dataLength +2 ) ; i < (PACKET_LENGTH - 2) ; i++)
    1adc:	1f 5f       	subi	r17, 0xFF	; 255
    1ade:	10 34       	cpi	r17, 0x40	; 64
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <_ZN6Packet12createPacketEPciS0_+0x8c>
		{
			packetString[ i ]= 0x00;
		}
		
		packetString[PACKET_LENGTH  - 2 ] = (crcPacket >> 8) ;
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	e0 5c       	subi	r30, 0xC0	; 192
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	dc 01       	movw	r26, r24
    1aea:	13 96       	adiw	r26, 0x03	; 3
    1aec:	4c 91       	ld	r20, X
    1aee:	13 97       	sbiw	r26, 0x03	; 3
    1af0:	40 83       	st	Z, r20
		packetString[PACKET_LENGTH - 1 ] = (crcPacket & 0xFF );
    1af2:	f9 01       	movw	r30, r18
    1af4:	ef 5b       	subi	r30, 0xBF	; 191
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	12 96       	adiw	r26, 0x02	; 2
    1afa:	8c 91       	ld	r24, X
    1afc:	80 83       	st	Z, r24
	{
		packetString[i]= 0x00;
	}
	
	
}
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	df 90       	pop	r13
    1b0a:	cf 90       	pop	r12
    1b0c:	08 95       	ret
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
	{
		for (i=0; i < PACKET_HEADER_NUM ; i++)
		{
			packetString[i] = header[i];
    1b0e:	14 96       	adiw	r26, 0x04	; 4
    1b10:	ec 91       	ld	r30, X
    1b12:	e9 01       	movw	r28, r18
    1b14:	e8 83       	st	Y, r30
		}
		
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
    1b16:	19 82       	std	Y+1, r1	; 0x01
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
    1b18:	4a 83       	std	Y+2, r20	; 0x02
    1b1a:	14 2f       	mov	r17, r20
    1b1c:	1d 5f       	subi	r17, 0xFD	; 253
    1b1e:	be cf       	rjmp	.-132    	; 0x1a9c <_ZN6Packet12createPacketEPciS0_+0x54>

00001b20 <_ZN6Packet11extractDataEPcRi>:
	
	
}

bool Packet::extractData(char *packetString ,int &dataLength )
{
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	db 01       	movw	r26, r22
bool Packet::isHeaderDetected( char *string )
{
	unsigned char i;
	for (i=0; i < PACKET_HEADER_NUM ; i++)
	{
		if (string[i] != header[i])
    1b26:	2c 91       	ld	r18, X
    1b28:	fc 01       	movw	r30, r24
    1b2a:	84 81       	ldd	r24, Z+4	; 0x04
    1b2c:	28 13       	cpse	r18, r24
    1b2e:	41 c0       	rjmp	.+130    	; 0x1bb2 <_ZN6Packet11extractDataEPcRi+0x92>
	int crcRecived=0, crcClaculated, tempDataLength =0;
	if (isHeaderDetected(packetString))
	{
		
		tempDataLength |= (packetString[PACKET_HEADER_NUM] & 0xFF);
		tempDataLength <<=8;
    1b30:	11 96       	adiw	r26, 0x01	; 1
    1b32:	3c 91       	ld	r19, X
    1b34:	11 97       	sbiw	r26, 0x01	; 1
    1b36:	20 e0       	ldi	r18, 0x00	; 0
		tempDataLength |= (packetString[PACKET_HEADER_NUM + 1] & 0xFF );
    1b38:	12 96       	adiw	r26, 0x02	; 2
    1b3a:	8c 91       	ld	r24, X
    1b3c:	12 97       	sbiw	r26, 0x02	; 2
    1b3e:	28 2b       	or	r18, r24
		
		if (tempDataLength > DATA_LENGTH )
    1b40:	2e 33       	cpi	r18, 0x3E	; 62
    1b42:	31 05       	cpc	r19, r1
    1b44:	b0 f5       	brcc	.+108    	; 0x1bb2 <_ZN6Packet11extractDataEPcRi+0x92>
		{
			return false;
		}
		
		dataLength = tempDataLength;
    1b46:	fa 01       	movw	r30, r20
    1b48:	31 83       	std	Z+1, r19	; 0x01
    1b4a:	20 83       	st	Z, r18
		
		crcClaculated = calculatedCRC(packetString + PACKET_HEADER_NUM + 2 , tempDataLength);
    1b4c:	6d 5f       	subi	r22, 0xFD	; 253
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
int Packet::calculatedCRC( char *string , int strSize )
{
	unsigned char i;
	int calcCRC=0;
	
	for (i=0; i < strSize ; i++)
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	21 15       	cp	r18, r1
    1b56:	31 05       	cpc	r19, r1
    1b58:	e9 f0       	breq	.+58     	; 0x1b94 <_ZN6Packet11extractDataEPcRi+0x74>
    1b5a:	e0 e0       	ldi	r30, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
	{
		calcCRC += string[i];
    1b60:	eb 01       	movw	r28, r22
    1b62:	c8 0f       	add	r28, r24
    1b64:	d9 1f       	adc	r29, r25
    1b66:	88 81       	ld	r24, Y
    1b68:	48 0f       	add	r20, r24
    1b6a:	51 1d       	adc	r21, r1
int Packet::calculatedCRC( char *string , int strSize )
{
	unsigned char i;
	int calcCRC=0;
	
	for (i=0; i < strSize ; i++)
    1b6c:	ef 5f       	subi	r30, 0xFF	; 255
    1b6e:	8e 2f       	mov	r24, r30
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	82 17       	cp	r24, r18
    1b74:	93 07       	cpc	r25, r19
    1b76:	a4 f3       	brlt	.-24     	; 0x1b60 <_ZN6Packet11extractDataEPcRi+0x40>
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
		dataLength = tempDataLength;
		
		crcClaculated = calculatedCRC(packetString + PACKET_HEADER_NUM + 2 , tempDataLength);
		
		for (i=0; i< tempDataLength ; i++)
			 packetString[i] = packetString[i + PACKET_HEADER_NUM + 2 ];
    1b7e:	fd 01       	movw	r30, r26
    1b80:	e8 0f       	add	r30, r24
    1b82:	f9 1f       	adc	r31, r25
    1b84:	83 81       	ldd	r24, Z+3	; 0x03
    1b86:	80 83       	st	Z, r24
		
		dataLength = tempDataLength;
		
		crcClaculated = calculatedCRC(packetString + PACKET_HEADER_NUM + 2 , tempDataLength);
		
		for (i=0; i< tempDataLength ; i++)
    1b88:	6f 5f       	subi	r22, 0xFF	; 255
    1b8a:	86 2f       	mov	r24, r22
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	82 17       	cp	r24, r18
    1b90:	93 07       	cpc	r25, r19
    1b92:	ac f3       	brlt	.-22     	; 0x1b7e <_ZN6Packet11extractDataEPcRi+0x5e>
			 packetString[i] = packetString[i + PACKET_HEADER_NUM + 2 ];

		crcRecived |= (packetString[PACKET_LENGTH - 2 ] & 0xFF) ;
    1b94:	fd 01       	movw	r30, r26
    1b96:	e0 5c       	subi	r30, 0xC0	; 192
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
		
		crcRecived <<= 8;
    1b9a:	90 81       	ld	r25, Z
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
		crcRecived |=(packetString[PACKET_LENGTH - 1 ]  & 0xFF);
    1b9e:	af 5b       	subi	r26, 0xBF	; 191
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	2c 91       	ld	r18, X
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	62 2b       	or	r22, r18
    1ba8:	9b 01       	movw	r18, r22
		
		if (crcRecived == crcClaculated)
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	24 17       	cp	r18, r20
    1bae:	35 07       	cpc	r19, r21
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <_ZN6Packet11extractDataEPcRi+0x94>
		{
			return true;
		}
	}
	return false;
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
	//return true;
}
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <_ZN6Serial4initEi>:
			// Communication Parameters: 8 Data, 1 Stop, No Parity
			// USART Receiver: On
			// USART Transmitter: On
			// USART Mode: Asynchronous
			// USART Baud Rate: 19200
			UCSRA=0x00;
    1bba:	1b b8       	out	0x0b, r1	; 11
			UCSRB=0x18;
    1bbc:	88 e1       	ldi	r24, 0x18	; 24
    1bbe:	8a b9       	out	0x0a, r24	; 10
			UCSRC=0x86;
    1bc0:	86 e8       	ldi	r24, 0x86	; 134
    1bc2:	80 bd       	out	0x20, r24	; 32
			UBRRH=0x00;
    1bc4:	10 bc       	out	0x20, r1	; 32
	//UCSRA=0x00;
	//UCSRB=0x98;
	//UCSRC=0x86;
	//UBRRH=0x00;
	//UBRRL=0x67;
	switch (baudRate)
    1bc6:	60 38       	cpi	r22, 0x80	; 128
    1bc8:	85 e2       	ldi	r24, 0x25	; 37
    1bca:	78 07       	cpc	r23, r24
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <_ZN6Serial4initEi+0x1a>
    1bce:	61 15       	cp	r22, r1
    1bd0:	7b 44       	sbci	r23, 0x4B	; 75
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <_ZN6Serial4initEi+0x20>
			// USART Baud Rate: 9600
			UCSRA=0x00;
			UCSRB=0x18;
			UCSRC=0x86;
			UBRRH=0x00;
			UBRRL=0x33;
    1bd4:	83 e3       	ldi	r24, 0x33	; 51
    1bd6:	89 b9       	out	0x09, r24	; 9
    1bd8:	08 95       	ret
			// USART Baud Rate: 19200
			UCSRA=0x00;
			UCSRB=0x18;
			UCSRC=0x86;
			UBRRH=0x00;
			UBRRL=0x19;
    1bda:	89 e1       	ldi	r24, 0x19	; 25
    1bdc:	89 b9       	out	0x09, r24	; 9
			break;
    1bde:	08 95       	ret

00001be0 <_ZN6Serial7putCharEc>:
}

void Serial::putChar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
    1be0:	5d 9b       	sbis	0x0b, 5	; 11
    1be2:	fe cf       	rjmp	.-4      	; 0x1be0 <_ZN6Serial7putCharEc>
	// Start transmission
	UDR = data;
    1be4:	6c b9       	out	0x0c, r22	; 12
    1be6:	08 95       	ret

00001be8 <_ZN6Serial15isSerialTxEmptyEv>:
}

bool Serial::isSerialTxEmpty()
{
	return (UCSRA & (_BV(UDRE)));
    1be8:	8b b1       	in	r24, 0x0b	; 11
}
    1bea:	85 fb       	bst	r24, 5
    1bec:	88 27       	eor	r24, r24
    1bee:	80 f9       	bld	r24, 0
    1bf0:	08 95       	ret

00001bf2 <_ZN6Serial14isSerialRxFullEv>:
		putChar(pkt[i]);
}

bool Serial::isSerialRxFull()
{
	return (UCSRA & (_BV(RXC)));
    1bf2:	8b b1       	in	r24, 0x0b	; 11
}
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	88 27       	eor	r24, r24
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	08 95       	ret

00001bfc <_ZN11StationInfoC1Ev>:
#include "StationInfo.h"

// default constructor
StationInfo::StationInfo()
{
	structStartPointer = (char*)&stationInfoStructure;
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	95 af       	std	Z+61, r25	; 0x3d
    1c00:	84 af       	std	Z+60, r24	; 0x3c
	stationInfoStructure.stationNumber = -1;
    1c02:	2f ef       	ldi	r18, 0xFF	; 255
    1c04:	22 83       	std	Z+2, r18	; 0x02
    1c06:	08 95       	ret

00001c08 <_ZN11StationInfoD1Ev>:
} //StationInfo

// default destructor
StationInfo::~StationInfo()
    1c08:	08 95       	ret

00001c0a <_ZN11TransceiverC1Ev>:
#include "definition.h"
#include "GlobalVariables.h"
#include "functions.h"

// default constructor
Transceiver::Transceiver()
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
    1c10:	05 96       	adiw	r24, 0x05	; 5
    1c12:	0e 94 56 00 	call	0xac	; 0xac <_ZN7ADF7020C1Ev>
    1c16:	ce 01       	movw	r24, r28
    1c18:	42 96       	adiw	r24, 0x12	; 18
    1c1a:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN4FIFOC1Ev>
{
	preamble[0]=0x12;
    1c1e:	82 e1       	ldi	r24, 0x12	; 18
    1c20:	8a 83       	std	Y+2, r24	; 0x02
	preamble[1]=0x34;
    1c22:	84 e3       	ldi	r24, 0x34	; 52
    1c24:	8b 83       	std	Y+3, r24	; 0x03
	preamble[2]=0x56;
    1c26:	86 e5       	ldi	r24, 0x56	; 86
    1c28:	8c 83       	std	Y+4, r24	; 0x04
	
} //Transceiver
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <_ZN11TransceiverD1Ev>:

// default destructor
Transceiver::~Transceiver()
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
    1c36:	42 96       	adiw	r24, 0x12	; 18
    1c38:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN4FIFOD1Ev>
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	05 96       	adiw	r24, 0x05	; 5
{
} //~Transceiver
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
	preamble[2]=0x56;
	
} //Transceiver

// default destructor
Transceiver::~Transceiver()
    1c44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_ZN7ADF7020D1Ev>

00001c48 <_ZN11Transceiver7setModeE14TranceiverMode>:

//////////////////////////////////////////////////////////////////////////

void Transceiver::setMode( TranceiverMode mode )
{
	myadf7020.setMode(mode);
    1c48:	05 96       	adiw	r24, 0x05	; 5
    1c4a:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_ZN7ADF70207setModeE14TranceiverMode>

00001c4e <_ZN11Transceiver11adfReadbackEc>:
	myadf7020.ADF_Program_Check();
}

uint16_t Transceiver::adfReadback( char readBackMode )
{
	return myadf7020.adfReadback(readBackMode);
    1c4e:	05 96       	adiw	r24, 0x05	; 5
    1c50:	0c 94 45 03 	jmp	0x68a	; 0x68a <_ZN7ADF702011adfReadbackEc>

00001c54 <_ZN11Transceiver16transmitTimerISREv>:
{
	myadf7020.receiveInt2ISR();
}

void Transceiver::transmitTimerISR()
{
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	8c 01       	movw	r16, r24
	unsigned char temp;
	timeoutCounter ++;
    1c5e:	20 91 de 01 	lds	r18, 0x01DE
    1c62:	30 91 df 01 	lds	r19, 0x01DF
    1c66:	2f 5f       	subi	r18, 0xFF	; 255
    1c68:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6a:	30 93 df 01 	sts	0x01DF, r19
    1c6e:	20 93 de 01 	sts	0x01DE, r18
	if (searchdelaycounterL > 0)
    1c72:	80 91 98 01 	lds	r24, 0x0198
    1c76:	90 91 99 01 	lds	r25, 0x0199
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	89 f0       	breq	.+34     	; 0x1ca0 <_ZN11Transceiver16transmitTimerISREv+0x4c>
		searchdelaycounterL--;
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	90 93 99 01 	sts	0x0199, r25
    1c84:	80 93 98 01 	sts	0x0198, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1c88:	e8 01       	movw	r28, r16
    1c8a:	25 96       	adiw	r28, 0x05	; 5
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN7ADF702010isReceiverEv>
		searchdelaycounterH--;
	}
	//else
	//	serial.putChar('F');
		
	if(isReceiver())
    1c92:	88 23       	and	r24, r24
    1c94:	f9 f0       	breq	.+62     	; 0x1cd4 <_ZN11Transceiver16transmitTimerISREv+0x80>
			//serial.putChar(temp);
		}
	}
	
	
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	08 95       	ret
{
	unsigned char temp;
	timeoutCounter ++;
	if (searchdelaycounterL > 0)
		searchdelaycounterL--;
	else if (searchdelaycounterH > 0)
    1ca0:	80 91 9a 01 	lds	r24, 0x019A
    1ca4:	90 91 9b 01 	lds	r25, 0x019B
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	71 f3       	breq	.-36     	; 0x1c88 <_ZN11Transceiver16transmitTimerISREv+0x34>
	{
		searchdelaycounterL = searchdelaymaxL;
    1cac:	20 91 94 01 	lds	r18, 0x0194
    1cb0:	30 91 95 01 	lds	r19, 0x0195
    1cb4:	30 93 99 01 	sts	0x0199, r19
    1cb8:	20 93 98 01 	sts	0x0198, r18
		searchdelaycounterH--;
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	90 93 9b 01 	sts	0x019B, r25
    1cc2:	80 93 9a 01 	sts	0x019A, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1cc6:	e8 01       	movw	r28, r16
    1cc8:	25 96       	adiw	r28, 0x05	; 5
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN7ADF702010isReceiverEv>
		searchdelaycounterH--;
	}
	//else
	//	serial.putChar('F');
		
	if(isReceiver())
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	e1 cf       	rjmp	.-62     	; 0x1c96 <_ZN11Transceiver16transmitTimerISREv+0x42>
		return;
	else
	{
		myadf7020.transmitTimerISR();
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN7ADF702016transmitTimerISREv>
	return myadf7020.isReceiver();
}

bool Transceiver::isTransmitterReady()
{
	return myadf7020.isTransmitterReady();
    1cda:	ce 01       	movw	r24, r28
    1cdc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN7ADF702018isTransmitterReadyEv>
		return;
	else
	{
		myadf7020.transmitTimerISR();

		if (isTransmitterReady())
    1ce0:	88 23       	and	r24, r24
    1ce2:	c9 f2       	breq	.-78     	; 0x1c96 <_ZN11Transceiver16transmitTimerISREv+0x42>
		{
			
			if (transmittedByteCounter > 39 )
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	88 32       	cpi	r24, 0x28	; 40
    1cec:	91 05       	cpc	r25, r1
    1cee:	bc f4       	brge	.+46     	; 0x1d1e <_ZN11Transceiver16transmitTimerISREv+0xca>
			{
				temp = dataBuffer.readByte();
				//serial.putChar(temp);
				temp ^= 0xAA;
			}
			else if (transmittedByteCounter == 37)
    1cf0:	85 32       	cpi	r24, 0x25	; 37
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	d9 f0       	breq	.+54     	; 0x1d2c <_ZN11Transceiver16transmitTimerISREv+0xd8>
				temp = preamble[0];
			else if (transmittedByteCounter == 38)
    1cf6:	86 32       	cpi	r24, 0x26	; 38
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	d9 f0       	breq	.+54     	; 0x1d32 <_ZN11Transceiver16transmitTimerISREv+0xde>
				temp = preamble[1];
			else if (transmittedByteCounter == 39)
    1cfc:	87 97       	sbiw	r24, 0x27	; 39
    1cfe:	e1 f0       	breq	.+56     	; 0x1d38 <_ZN11Transceiver16transmitTimerISREv+0xe4>
				temp = preamble[2];
			else
				temp = 0xAA;
    1d00:	6a ea       	ldi	r22, 0xAA	; 170
	
}

void Transceiver::sendByte( char data )
{
	myadf7020.sendByte(data);
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN7ADF70208sendByteEc>
				temp = 0xAA;
			
			
			sendByte(temp);
			//serial.putChar(temp);
			transmittedByteCounter ++ ;
    1d08:	f8 01       	movw	r30, r16
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
			//serial.putChar(temp);
		}
	}
	
	
}
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret
		if (isTransmitterReady())
		{
			
			if (transmittedByteCounter > 39 )
			{
				temp = dataBuffer.readByte();
    1d1e:	c8 01       	movw	r24, r16
    1d20:	42 96       	adiw	r24, 0x12	; 18
    1d22:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN4FIFO8readByteEv>
				//serial.putChar(temp);
				temp ^= 0xAA;
    1d26:	6a ea       	ldi	r22, 0xAA	; 170
    1d28:	68 27       	eor	r22, r24
    1d2a:	eb cf       	rjmp	.-42     	; 0x1d02 <_ZN11Transceiver16transmitTimerISREv+0xae>
			}
			else if (transmittedByteCounter == 37)
				temp = preamble[0];
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	62 81       	ldd	r22, Z+2	; 0x02
    1d30:	e8 cf       	rjmp	.-48     	; 0x1d02 <_ZN11Transceiver16transmitTimerISREv+0xae>
			else if (transmittedByteCounter == 38)
				temp = preamble[1];
    1d32:	f8 01       	movw	r30, r16
    1d34:	63 81       	ldd	r22, Z+3	; 0x03
    1d36:	e5 cf       	rjmp	.-54     	; 0x1d02 <_ZN11Transceiver16transmitTimerISREv+0xae>
			else if (transmittedByteCounter == 39)
				temp = preamble[2];
    1d38:	f8 01       	movw	r30, r16
    1d3a:	64 81       	ldd	r22, Z+4	; 0x04
    1d3c:	e2 cf       	rjmp	.-60     	; 0x1d02 <_ZN11Transceiver16transmitTimerISREv+0xae>

00001d3e <_ZN11Transceiver10isReceiverEv>:
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1d3e:	05 96       	adiw	r24, 0x05	; 5
    1d40:	0c 94 ed 05 	jmp	0xbda	; 0xbda <_ZN7ADF702010isReceiverEv>

00001d44 <_ZN11Transceiver10changeModeEv>:
{
	return myadf7020.isTransmitterReady();
}

void Transceiver::changeMode( void )
{
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	ec 01       	movw	r28, r24
	char intTemp;
	intTemp = resetAndStoreIntrruptFlag();
    1d50:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z25resetAndStoreIntrruptFlagv>
    1d54:	f8 2e       	mov	r15, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1d56:	8e 01       	movw	r16, r28
    1d58:	0b 5f       	subi	r16, 0xFB	; 251
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	c8 01       	movw	r24, r16
    1d5e:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN7ADF702010isReceiverEv>
void Transceiver::changeMode( void )
{
	char intTemp;
	intTemp = resetAndStoreIntrruptFlag();
	
	if (isReceiver())
    1d62:	81 11       	cpse	r24, r1
    1d64:	17 c0       	rjmp	.+46     	; 0x1d94 <_ZN11Transceiver10changeModeEv+0x50>
		dataBuffer.clearFifo();
		transmittedByteCounter = 0;
	}
	else
	{
		myadf7020.adf7020_ChangeMode(TRANSCEIVER_MODE_RECEIVER);
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	c8 01       	movw	r24, r16
    1d6a:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>
		serialTxDataBuffer.clearFifo();
    1d6e:	8e e9       	ldi	r24, 0x9E	; 158
    1d70:	92 e0       	ldi	r25, 0x02	; 2
    1d72:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN4FIFO9clearFifoEv>
		dataBuffer.clearFifo();
    1d76:	ce 01       	movw	r24, r28
    1d78:	42 96       	adiw	r24, 0x12	; 18
    1d7a:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN4FIFO9clearFifoEv>
	}
	
	GIFR &=0x1F;
    1d7e:	9a b7       	in	r25, 0x3a	; 58
    1d80:	9f 71       	andi	r25, 0x1F	; 31
    1d82:	9a bf       	out	0x3a, r25	; 58
	
	restoreIntrrupt(intTemp);
    1d84:	8f 2d       	mov	r24, r15
}
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
		dataBuffer.clearFifo();
	}
	
	GIFR &=0x1F;
	
	restoreIntrrupt(intTemp);
    1d90:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <_Z15restoreIntrruptc>
	char intTemp;
	intTemp = resetAndStoreIntrruptFlag();
	
	if (isReceiver())
	{
		myadf7020.adf7020_ChangeMode(TRANSCEIVER_MODE_TRANSMITTER);
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	c8 01       	movw	r24, r16
    1d98:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>
		dataBuffer.clearFifo();
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	42 96       	adiw	r24, 0x12	; 18
    1da0:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN4FIFO9clearFifoEv>
		transmittedByteCounter = 0;
    1da4:	19 82       	std	Y+1, r1	; 0x01
    1da6:	18 82       	st	Y, r1
    1da8:	ea cf       	rjmp	.-44     	; 0x1d7e <_ZN11Transceiver10changeModeEv+0x3a>

00001daa <_ZN11Transceiver11writePacketEPc>:
	
	restoreIntrrupt(intTemp);
}

bool Transceiver::writePacket( char *str )
{
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
	dataBuffer.writeString(str , PACKET_LENGTH );
    1dae:	ec 01       	movw	r28, r24
    1db0:	62 96       	adiw	r28, 0x12	; 18
    1db2:	42 e4       	ldi	r20, 0x42	; 66
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN4FIFO11writeStringEPci>
	
	//add three byte for correct send data length
	dataBuffer.writeByte(0x00);
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
	dataBuffer.writeByte(0x00);
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
	dataBuffer.writeByte(0x00);
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	ce 01       	movw	r24, r28
    1dd0:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
	
	return true;
}
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <_ZN11Transceiver17getFifoFullLengthEv>:
	//return true;
//}

int Transceiver::getFifoFullLength()
{
	return dataBuffer.getFifoFullLength();
    1ddc:	42 96       	adiw	r24, 0x12	; 18
    1dde:	0c 94 21 08 	jmp	0x1042	; 0x1042 <_ZN4FIFO17getFifoFullLengthEv>

00001de2 <_ZN11Transceiver18readReceivedPacketEPc>:
	//for (int i=0 ; i<PACKET_LENGTH  ;i++ )
	//{
		//serial.putChar(dataBuffer.readByte());
	//}
	//sei();
	dataBuffer.readString(str , PACKET_LENGTH );
    1de2:	42 e4       	ldi	r20, 0x42	; 66
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	42 96       	adiw	r24, 0x12	; 18
    1de8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN4FIFO10readStringEPci>
	return true;
}
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	08 95       	ret

00001df0 <_ZN11Transceiver18isPreambleDetectedEv>:
}

//////////////////////////////////////////////////////////////////////////
bool Transceiver::isPreambleDetected()
{
	return myadf7020.isPreambleDetected();
    1df0:	05 96       	adiw	r24, 0x05	; 5
    1df2:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <_ZN7ADF702018isPreambleDetectedEv>

00001df6 <__vector_2>:



///////////////////////////////////////////////////
ISR(INT1_vect)
{
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	2f 93       	push	r18
    1e02:	3f 93       	push	r19
    1e04:	4f 93       	push	r20
    1e06:	5f 93       	push	r21
    1e08:	6f 93       	push	r22
    1e0a:	7f 93       	push	r23
    1e0c:	8f 93       	push	r24
    1e0e:	9f 93       	push	r25
    1e10:	af 93       	push	r26
    1e12:	bf 93       	push	r27
    1e14:	ef 93       	push	r30
    1e16:	ff 93       	push	r31
}

void Transceiver::receiveInt1ISR()
{
	unsigned char temp;
	myadf7020.receiveInt1ISR();
    1e18:	80 e2       	ldi	r24, 0x20	; 32
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN7ADF702014receiveInt1ISREv>
	if (myadf7020.isNewDataAvailable())
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN7ADF702018isNewDataAvailableEv>
    1e28:	81 11       	cpse	r24, r1
    1e2a:	11 c0       	rjmp	.+34     	; 0x1e4e <__vector_2+0x58>

///////////////////////////////////////////////////
ISR(INT1_vect)
{
	transceiver.receiveInt1ISR();
}
    1e2c:	ff 91       	pop	r31
    1e2e:	ef 91       	pop	r30
    1e30:	bf 91       	pop	r27
    1e32:	af 91       	pop	r26
    1e34:	9f 91       	pop	r25
    1e36:	8f 91       	pop	r24
    1e38:	7f 91       	pop	r23
    1e3a:	6f 91       	pop	r22
    1e3c:	5f 91       	pop	r21
    1e3e:	4f 91       	pop	r20
    1e40:	3f 91       	pop	r19
    1e42:	2f 91       	pop	r18
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti
{
	unsigned char temp;
	myadf7020.receiveInt1ISR();
	if (myadf7020.isNewDataAvailable())
	{
		temp =(myadf7020.receiveByte());
    1e4e:	80 e2       	ldi	r24, 0x20	; 32
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN7ADF702011receiveByteEv>
		temp ^= 0xAA ;
    1e56:	6a ea       	ldi	r22, 0xAA	; 170
    1e58:	68 27       	eor	r22, r24
		dataBuffer.writeByte(temp);
    1e5a:	8d e2       	ldi	r24, 0x2D	; 45
    1e5c:	93 e0       	ldi	r25, 0x03	; 3
    1e5e:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
		receivedByteCounter++;
    1e62:	80 91 2c 03 	lds	r24, 0x032C
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	80 93 2c 03 	sts	0x032C, r24
		
		//serial.putChar(temp);
		
		//receivedByteCounter = PACKET_LENGTH ;
		if (receivedByteCounter > PACKET_LENGTH - 1 )
    1e6c:	82 34       	cpi	r24, 0x42	; 66
    1e6e:	f0 f2       	brcs	.-68     	; 0x1e2c <__vector_2+0x36>
		{
			myadf7020.clearPreaambleDetect();
    1e70:	80 e2       	ldi	r24, 0x20	; 32
    1e72:	93 e0       	ldi	r25, 0x03	; 3
    1e74:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN7ADF702020clearPreaambleDetectEv>
			receivedByteCounter = 0;
    1e78:	10 92 2c 03 	sts	0x032C, r1
    1e7c:	d7 cf       	rjmp	.-82     	; 0x1e2c <__vector_2+0x36>

00001e7e <__vector_18>:
{
	transceiver.receiveInt1ISR();
}

ISR(INT2_vect)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31

}

void Transceiver::receiveInt2ISR()
{
	myadf7020.receiveInt2ISR();
    1ea0:	80 e2       	ldi	r24, 0x20	; 32
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN7ADF702014receiveInt2ISREv>
}

ISR(INT2_vect)
{
	transceiver.receiveInt2ISR();
}
    1ea8:	ff 91       	pop	r31
    1eaa:	ef 91       	pop	r30
    1eac:	bf 91       	pop	r27
    1eae:	af 91       	pop	r26
    1eb0:	9f 91       	pop	r25
    1eb2:	8f 91       	pop	r24
    1eb4:	7f 91       	pop	r23
    1eb6:	6f 91       	pop	r22
    1eb8:	5f 91       	pop	r21
    1eba:	4f 91       	pop	r20
    1ebc:	3f 91       	pop	r19
    1ebe:	2f 91       	pop	r18
    1ec0:	0f 90       	pop	r0
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	0f 90       	pop	r0
    1ec6:	1f 90       	pop	r1
    1ec8:	18 95       	reti

00001eca <__vector_6>:

ISR(TIMER1_COMPA_vect)
// Timer 1 output compare A interrupt service routine
//interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
    1eca:	1f 92       	push	r1
    1ecc:	0f 92       	push	r0
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	0f 92       	push	r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
	TCNT1H=0x00;
    1eec:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=44;
    1eee:	8c e2       	ldi	r24, 0x2C	; 44
    1ef0:	8c bd       	out	0x2c, r24	; 44
	TCNT0 = 0;
    1ef2:	12 be       	out	0x32, r1	; 50
	transceiver.transmitTimerISR();
    1ef4:	8b e1       	ldi	r24, 0x1B	; 27
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZN11Transceiver16transmitTimerISREv>

	if (serial.isSerialRxFull())
    1efc:	8f ea       	ldi	r24, 0xAF	; 175
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN6Serial14isSerialRxFullEv>
    1f04:	88 23       	and	r24, r24
    1f06:	29 f0       	breq	.+10     	; 0x1f12 <__vector_6+0x48>
	{
		serialRxDataBuffer.writeByte(UDR);//TODO: read serial
    1f08:	6c b1       	in	r22, 0x0c	; 12
    1f0a:	81 e2       	ldi	r24, 0x21	; 33
    1f0c:	92 e0       	ldi	r25, 0x02	; 2
    1f0e:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN4FIFO9writeByteEc>
	}
}
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <__usmulhisi3>:
    1f34:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__umulhisi3>

00001f38 <__usmulhisi3_tail>:
    1f38:	b7 ff       	sbrs	r27, 7
    1f3a:	08 95       	ret
    1f3c:	82 1b       	sub	r24, r18
    1f3e:	93 0b       	sbc	r25, r19
    1f40:	08 95       	ret

00001f42 <__mulshisi3>:
    1f42:	b7 ff       	sbrs	r27, 7
    1f44:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__muluhisi3>

00001f48 <__mulohisi3>:
    1f48:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__muluhisi3>
    1f4c:	82 1b       	sub	r24, r18
    1f4e:	93 0b       	sbc	r25, r19
    1f50:	08 95       	ret

00001f52 <__tablejump2__>:
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31

00001f56 <__tablejump__>:
    1f56:	05 90       	lpm	r0, Z+
    1f58:	f4 91       	lpm	r31, Z
    1f5a:	e0 2d       	mov	r30, r0
    1f5c:	09 94       	ijmp

00001f5e <__umulhisi3>:
    1f5e:	a2 9f       	mul	r26, r18
    1f60:	b0 01       	movw	r22, r0
    1f62:	b3 9f       	mul	r27, r19
    1f64:	c0 01       	movw	r24, r0
    1f66:	a3 9f       	mul	r26, r19
    1f68:	01 d0       	rcall	.+2      	; 0x1f6c <__umulhisi3+0xe>
    1f6a:	b2 9f       	mul	r27, r18
    1f6c:	70 0d       	add	r23, r0
    1f6e:	81 1d       	adc	r24, r1
    1f70:	11 24       	eor	r1, r1
    1f72:	91 1d       	adc	r25, r1
    1f74:	08 95       	ret

00001f76 <__muluhisi3>:
    1f76:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__umulhisi3>
    1f7a:	a5 9f       	mul	r26, r21
    1f7c:	90 0d       	add	r25, r0
    1f7e:	b4 9f       	mul	r27, r20
    1f80:	90 0d       	add	r25, r0
    1f82:	a4 9f       	mul	r26, r20
    1f84:	80 0d       	add	r24, r0
    1f86:	91 1d       	adc	r25, r1
    1f88:	11 24       	eor	r1, r1
    1f8a:	08 95       	ret

00001f8c <__do_global_dtors>:
    1f8c:	10 e0       	ldi	r17, 0x00	; 0
    1f8e:	c6 e5       	ldi	r28, 0x56	; 86
    1f90:	d0 e0       	ldi	r29, 0x00	; 0
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <__do_global_dtors+0x10>
    1f94:	fe 01       	movw	r30, r28
    1f96:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__tablejump__>
    1f9a:	22 96       	adiw	r28, 0x02	; 2
    1f9c:	c8 35       	cpi	r28, 0x58	; 88
    1f9e:	d1 07       	cpc	r29, r17
    1fa0:	c9 f7       	brne	.-14     	; 0x1f94 <__do_global_dtors+0x8>
    1fa2:	f8 94       	cli

00001fa4 <__stop_program>:
    1fa4:	ff cf       	rjmp	.-2      	; 0x1fa4 <__stop_program>
