
BaseStationCenter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001fde  00002072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ca  0080006e  0080006e  00002080  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000027e3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e0  00000000  00000000  00002812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009620  00000000  00000000  00002bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d0d  00000000  00000000  0000c212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bfe  00000000  00000000  0000df1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000988  00000000  00000000  0000fb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000222c  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000039be  00000000  00000000  000126d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  00016092  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	baseGetStatusPacket.checksum[0] = crc & 0xFF;
	baseGetStatusPacket.checksum[1] = (crc>>8) & 0xFF;
}

void Message::sendBaseGetStatusPacket()
{
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	//return (crc);
//}

void Message::constructBaseGetStatusPacket()
{
	baseGetStatusPacket.frameHeader = 0x7e;
       8:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__vector_2>
	baseGetStatusPacket.messageType = 1;
       c:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__vector_3>
	baseGetStatusPacket.frameTrailer = 0x81;
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	
	unsigned char* packetPointer = (unsigned char*)&baseGetStatusPacket;
	int len = sizeof(BaseGetStatusPacket)-4;

	packetPointer++;
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	int crc = calculateCRC(packetPointer, len);
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_7>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

	baseGetStatusPacket.checksum[0] = crc & 0xFF;
	baseGetStatusPacket.checksum[1] = (crc>>8) & 0xFF;
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

void Message::sendBaseGetStatusPacket()
{
	constructBaseGetStatusPacket();
	
	serial.sendPacket((char*)&baseGetStatusPacket, sizeof(struct BaseGetStatusPacket));
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

void Message::sendBaseGetStatusPacket()
{
	constructBaseGetStatusPacket();
	
	serial.sendPacket((char*)&baseGetStatusPacket, sizeof(struct BaseGetStatusPacket));
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	7d 0b       	sbc	r23, r29

00000056 <__ctors_end>:
      56:	91 0b       	sbc	r25, r17

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d8 e0       	ldi	r29, 0x08	; 8
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	10 e0       	ldi	r17, 0x00	; 0
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	ee ed       	ldi	r30, 0xDE	; 222
      6c:	ff e1       	ldi	r31, 0x1F	; 31
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	ae 36       	cpi	r26, 0x6E	; 110
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	24 e0       	ldi	r18, 0x04	; 4
      7c:	ae e6       	ldi	r26, 0x6E	; 110
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a8 33       	cpi	r26, 0x38	; 56
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	c6 e5       	ldi	r28, 0x56	; 86
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	22 97       	sbiw	r28, 0x02	; 2
      94:	fe 01       	movw	r30, r28
      96:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__tablejump__>
      9a:	c4 35       	cpi	r28, 0x54	; 84
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 93 0b 	call	0x1726	; 0x1726 <main>
      a4:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_ZN7ADF7020C1Ev>:
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
      ac:	fc 01       	movw	r30, r24
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
      ae:	11 82       	std	Z+1, r1	; 0x01
      b0:	13 82       	std	Z+3, r1	; 0x03
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
      b2:	14 82       	std	Z+4, r1	; 0x04
      b4:	15 82       	std	Z+5, r1	; 0x05
      b6:	16 82       	std	Z+6, r1	; 0x06
      b8:	17 82       	std	Z+7, r1	; 0x07
      ba:	10 86       	std	Z+8, r1	; 0x08
      bc:	11 86       	std	Z+9, r1	; 0x09
      be:	12 86       	std	Z+10, r1	; 0x0a
      c0:	08 95       	ret

000000c2 <_ZN7ADF7020D1Ev>:
      c2:	08 95       	ret

000000c4 <_ZN7ADF702018adf7020_InitializeEv>:
      c4:	ac 98       	cbi	0x15, 4	; 21
      c6:	00 00       	nop
      c8:	ac 9a       	sbi	0x15, 4	; 21
      ca:	fc 01       	movw	r30, r24
      cc:	80 81       	ld	r24, Z
		S_clk_WR(1);
      ce:	88 23       	and	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	09 f4       	brne	.+2      	; 0xd4 <_ZN7ADF702018adf7020_InitializeEv+0x10>
      d2:	b9 c2       	rjmp	.+1394   	; 0x646 <_ZN7ADF702018adf7020_InitializeEv+0x582>
      d4:	8a eb       	ldi	r24, 0xBA	; 186
		_delay_us(5);
		regData <<= 1;
      d6:	81 bb       	out	0x11, r24	; 17
      d8:	ae 98       	cbi	0x15, 6	; 21
      da:	ad 9a       	sbi	0x15, 5	; 21
      dc:	97 9a       	sbi	0x12, 7	; 18
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
      de:	00 00       	nop
      e0:	85 b3       	in	r24, 0x15	; 21
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	88 bb       	out	0x18, r24	; 24
      e6:	84 e7       	ldi	r24, 0x74	; 116
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
      e8:	90 e4       	ldi	r25, 0x40	; 64
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
      ea:	90 93 71 00 	sts	0x0071, r25
      ee:	80 93 70 00 	sts	0x0070, r24
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
      f2:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 73 00 	sts	0x0073, r25
      fa:	80 93 72 00 	sts	0x0072, r24
      fe:	10 92 75 00 	sts	0x0075, r1
	{
		ADF_Regs.R0_N.bit1.MUXOUT =1;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		_delay_ms(1);
		if( (PIND & 0x04) >> 2)
     102:	10 92 74 00 	sts	0x0074, r1
     106:	ac 01       	movw	r20, r24
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	90 93 77 00 	sts	0x0077, r25
     110:	80 93 76 00 	sts	0x0076, r24
     114:	83 e0       	ldi	r24, 0x03	; 3
			ToggleLED(0);
		
		_delay_ms(300);
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	90 93 79 00 	sts	0x0079, r25
     11c:	80 93 78 00 	sts	0x0078, r24
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     120:	80 91 74 00 	lds	r24, 0x0074
     124:	90 91 75 00 	lds	r25, 0x0075
     128:	81 70       	andi	r24, 0x01	; 1
     12a:	99 27       	eor	r25, r25
     12c:	8e 60       	ori	r24, 0x0E	; 14
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	ba 2f       	mov	r27, r26
     134:	a9 2f       	mov	r26, r25
     136:	98 2f       	mov	r25, r24
     138:	88 27       	eor	r24, r24
     13a:	55 27       	eor	r21, r21
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	84 2b       	or	r24, r20
     142:	95 2b       	or	r25, r21
     144:	a6 2b       	or	r26, r22
     146:	b7 2b       	or	r27, r23
     148:	3f e0       	ldi	r19, 0x0F	; 15
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	3a 95       	dec	r19
     154:	d1 f7       	brne	.-12     	; 0x14a <_ZN7ADF702018adf7020_InitializeEv+0x86>
     156:	40 91 70 00 	lds	r20, 0x0070
     15a:	50 91 71 00 	lds	r21, 0x0071
     15e:	5f 77       	andi	r21, 0x7F	; 127
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	84 2b       	or	r24, r20
     166:	95 2b       	or	r25, r21
     168:	a6 2b       	or	r26, r22
     16a:	b7 2b       	or	r27, r23
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	aa 1f       	adc	r26, r26
     172:	bb 1f       	adc	r27, r27
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	aa 1f       	adc	r26, r26
     17a:	bb 1f       	adc	r27, r27
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	aa 1f       	adc	r26, r26
     182:	bb 1f       	adc	r27, r27
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	aa 1f       	adc	r26, r26
     18a:	bb 1f       	adc	r27, r27
     18c:	ab 98       	cbi	0x15, 3	; 21
     18e:	a8 98       	cbi	0x15, 0	; 21
     190:	30 e2       	ldi	r19, 0x20	; 32
     192:	25 b3       	in	r18, 0x15	; 21
     194:	2b 7f       	andi	r18, 0xFB	; 251
     196:	ac 01       	movw	r20, r24
     198:	bd 01       	movw	r22, r26
     19a:	44 27       	eor	r20, r20
     19c:	77 fd       	sbrc	r23, 7
     19e:	43 95       	inc	r20
     1a0:	55 27       	eor	r21, r21
     1a2:	66 27       	eor	r22, r22
     1a4:	77 27       	eor	r23, r23
     1a6:	44 0f       	add	r20, r20
     1a8:	44 0f       	add	r20, r20
     1aa:	42 2b       	or	r20, r18
     1ac:	45 bb       	out	0x15, r20	; 21
     1ae:	a8 9a       	sbi	0x15, 0	; 21
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <_ZN7ADF702018adf7020_InitializeEv+0xee>
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN7ADF702018adf7020_InitializeEv+0xf0>
     1b4:	00 00       	nop
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	aa 1f       	adc	r26, r26
     1bc:	bb 1f       	adc	r27, r27
     1be:	a8 98       	cbi	0x15, 0	; 21
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_ZN7ADF702018adf7020_InitializeEv+0xfe>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN7ADF702018adf7020_InitializeEv+0x100>
     1c4:	00 00       	nop
     1c6:	31 50       	subi	r19, 0x01	; 1
     1c8:	21 f7       	brne	.-56     	; 0x192 <_ZN7ADF702018adf7020_InitializeEv+0xce>
     1ca:	ab 9a       	sbi	0x15, 3	; 21
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_ZN7ADF702018adf7020_InitializeEv+0x10a>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN7ADF702018adf7020_InitializeEv+0x10c>
     1d0:	00 00       	nop
		S_clk_WR(1);
     1d2:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	90 93 7d 00 	sts	0x007D, r25
		_delay_us(5);
		regData <<= 1;
     1dc:	80 93 7c 00 	sts	0x007C, r24
     1e0:	10 92 7f 00 	sts	0x007F, r1
     1e4:	10 92 7e 00 	sts	0x007E, r1
     1e8:	10 92 81 00 	sts	0x0081, r1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     1ec:	10 92 80 00 	sts	0x0080, r1
     1f0:	10 92 83 00 	sts	0x0083, r1
     1f4:	10 92 82 00 	sts	0x0082, r1
		_delay_ms(300);
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		if( (PIND & 0x04) >> 2)
     1f8:	10 92 85 00 	sts	0x0085, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	10 92 84 00 	sts	0x0084, r1
     200:	90 93 87 00 	sts	0x0087, r25
     204:	80 93 86 00 	sts	0x0086, r24
     208:	85 e0       	ldi	r24, 0x05	; 5
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	90 93 89 00 	sts	0x0089, r25
     210:	80 93 88 00 	sts	0x0088, r24
void ADF7020::ADF_Program_Check(void)
{
	int i;
	unsigned long  data_reg;
	
	for (i=1;i<=5;i++)
     214:	83 e0       	ldi	r24, 0x03	; 3
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);;
		
		_delay_ms(300);
	};
	resetLED(0);
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	90 93 8b 00 	sts	0x008B, r25
	ADF_Regs.R0_N.bit1.MUXOUT =3;
     21c:	80 93 8a 00 	sts	0x008A, r24
     220:	10 92 8d 00 	sts	0x008D, r1
     224:	10 92 8c 00 	sts	0x008C, r1
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     228:	ab 98       	cbi	0x15, 3	; 21
     22a:	a8 98       	cbi	0x15, 0	; 21
     22c:	30 e2       	ldi	r19, 0x20	; 32
     22e:	81 e2       	ldi	r24, 0x21	; 33
     230:	90 e8       	ldi	r25, 0x80	; 128
     232:	a5 e3       	ldi	r26, 0x35	; 53
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	25 b3       	in	r18, 0x15	; 21
     238:	2b 7f       	andi	r18, 0xFB	; 251
     23a:	ac 01       	movw	r20, r24
     23c:	bd 01       	movw	r22, r26
     23e:	44 27       	eor	r20, r20
     240:	77 fd       	sbrc	r23, 7
     242:	43 95       	inc	r20
     244:	55 27       	eor	r21, r21
     246:	66 27       	eor	r22, r22
     248:	77 27       	eor	r23, r23
     24a:	44 0f       	add	r20, r20
     24c:	44 0f       	add	r20, r20
     24e:	42 2b       	or	r20, r18
     250:	45 bb       	out	0x15, r20	; 21
     252:	a8 9a       	sbi	0x15, 0	; 21
     254:	00 c0       	rjmp	.+0      	; 0x256 <_ZN7ADF702018adf7020_InitializeEv+0x192>
     256:	00 c0       	rjmp	.+0      	; 0x258 <_ZN7ADF702018adf7020_InitializeEv+0x194>
     258:	00 00       	nop
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	aa 1f       	adc	r26, r26
     260:	bb 1f       	adc	r27, r27
     262:	a8 98       	cbi	0x15, 0	; 21
     264:	00 c0       	rjmp	.+0      	; 0x266 <_ZN7ADF702018adf7020_InitializeEv+0x1a2>
     266:	00 c0       	rjmp	.+0      	; 0x268 <_ZN7ADF702018adf7020_InitializeEv+0x1a4>
     268:	00 00       	nop
     26a:	31 50       	subi	r19, 0x01	; 1
     26c:	21 f7       	brne	.-56     	; 0x236 <_ZN7ADF702018adf7020_InitializeEv+0x172>
     26e:	ab 9a       	sbi	0x15, 3	; 21
     270:	00 c0       	rjmp	.+0      	; 0x272 <_ZN7ADF702018adf7020_InitializeEv+0x1ae>
     272:	00 c0       	rjmp	.+0      	; 0x274 <_ZN7ADF702018adf7020_InitializeEv+0x1b0>
     274:	00 00       	nop
     276:	ab 98       	cbi	0x15, 3	; 21
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 a3 00 	sts	0x00A3, r25
     280:	80 93 a2 00 	sts	0x00A2, r24
     284:	10 92 a5 00 	sts	0x00A5, r1
     288:	10 92 a4 00 	sts	0x00A4, r1
     28c:	10 92 a7 00 	sts	0x00A7, r1
     290:	10 92 a6 00 	sts	0x00A6, r1
     294:	8f e3       	ldi	r24, 0x3F	; 63
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	90 93 a9 00 	sts	0x00A9, r25
     29c:	80 93 a8 00 	sts	0x00A8, r24
     2a0:	81 e2       	ldi	r24, 0x21	; 33
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	90 93 ab 00 	sts	0x00AB, r25
     2a8:	80 93 aa 00 	sts	0x00AA, r24
     2ac:	10 92 ad 00 	sts	0x00AD, r1
     2b0:	10 92 ac 00 	sts	0x00AC, r1
     2b4:	10 92 af 00 	sts	0x00AF, r1
     2b8:	10 92 ae 00 	sts	0x00AE, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     2bc:	82 e0       	ldi	r24, 0x02	; 2
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	90 93 b1 00 	sts	0x00B1, r25
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     2c4:	80 93 b0 00 	sts	0x00B0, r24
     2c8:	ab 98       	cbi	0x15, 3	; 21
     2ca:	a8 98       	cbi	0x15, 0	; 21
     2cc:	25 b3       	in	r18, 0x15	; 21
     2ce:	2b 7f       	andi	r18, 0xFB	; 251
     2d0:	30 e2       	ldi	r19, 0x20	; 32
     2d2:	82 e1       	ldi	r24, 0x12	; 18
     2d4:	9e ef       	ldi	r25, 0xFE	; 254
     2d6:	a0 e1       	ldi	r26, 0x10	; 16
     2d8:	b0 e8       	ldi	r27, 0x80	; 128
     2da:	44 e0       	ldi	r20, 0x04	; 4
     2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <_ZN7ADF702018adf7020_InitializeEv+0x232>
		S_clk_WR(1);
     2de:	25 b3       	in	r18, 0x15	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e0:	2b 7f       	andi	r18, 0xFB	; 251
     2e2:	ac 01       	movw	r20, r24
     2e4:	bd 01       	movw	r22, r26
		_delay_us(5);
		regData <<= 1;
     2e6:	44 27       	eor	r20, r20
     2e8:	77 fd       	sbrc	r23, 7
     2ea:	43 95       	inc	r20
     2ec:	55 27       	eor	r21, r21
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     2ee:	66 27       	eor	r22, r22
     2f0:	77 27       	eor	r23, r23
     2f2:	44 0f       	add	r20, r20
     2f4:	44 0f       	add	r20, r20
     2f6:	42 2b       	or	r20, r18
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     2f8:	45 bb       	out	0x15, r20	; 21
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     2fa:	a8 9a       	sbi	0x15, 0	; 21
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <_ZN7ADF702018adf7020_InitializeEv+0x23a>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <_ZN7ADF702018adf7020_InitializeEv+0x23c>
     300:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     302:	88 0f       	add	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     304:	99 1f       	adc	r25, r25
     306:	aa 1f       	adc	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	a8 98       	cbi	0x15, 0	; 21
     30c:	00 c0       	rjmp	.+0      	; 0x30e <_ZN7ADF702018adf7020_InitializeEv+0x24a>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <_ZN7ADF702018adf7020_InitializeEv+0x24c>
	resetLED(0);
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
     310:	00 00       	nop
     312:	31 50       	subi	r19, 0x01	; 1
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
     314:	21 f7       	brne	.-56     	; 0x2de <_ZN7ADF702018adf7020_InitializeEv+0x21a>
     316:	ab 9a       	sbi	0x15, 3	; 21
     318:	00 c0       	rjmp	.+0      	; 0x31a <_ZN7ADF702018adf7020_InitializeEv+0x256>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <_ZN7ADF702018adf7020_InitializeEv+0x258>
     31c:	00 00       	nop
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);;
     31e:	ab 98       	cbi	0x15, 3	; 21
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	90 93 ca 00 	sts	0x00CA, r25
		ADF_Regs.R0_N.bit1.MUXOUT =1;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		_delay_ms(1);
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);
     328:	80 93 c9 00 	sts	0x00C9, r24
     32c:	90 93 cc 00 	sts	0x00CC, r25
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
     330:	80 93 cb 00 	sts	0x00CB, r24
     334:	81 e2       	ldi	r24, 0x21	; 33
     336:	90 e0       	ldi	r25, 0x00	; 0
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
		setLED(0);
     338:	90 93 ce 00 	sts	0x00CE, r25
	//R3 Setting
	ADF_Regs.R3_ReceiverCLK.bit1.BBOS_CLK_Divide =2;		//2  for 9.6k bitrate and 8  for 14.71k
	ADF_Regs.R3_ReceiverCLK.bit1.DEMOD_CLK_Divide =2;
	

	ADF_Regs.R3_ReceiverCLK.bit1.CDR_CLK_Divide =33;		//26 for 9.6k bitrate and 17 for 14.71k
     33c:	80 93 cd 00 	sts	0x00CD, r24

	ADF_Regs.R3_ReceiverCLK.bit1.SEQ_CLK_Divide =200;
     340:	88 ec       	ldi	r24, 0xC8	; 200
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	90 93 d0 00 	sts	0x00D0, r25
     348:	80 93 cf 00 	sts	0x00CF, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     34c:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     34e:	a8 98       	cbi	0x15, 0	; 21
     350:	30 e2       	ldi	r19, 0x20	; 32
     352:	83 ea       	ldi	r24, 0xA3	; 163
     354:	91 e2       	ldi	r25, 0x21	; 33
     356:	a8 ec       	ldi	r26, 0xC8	; 200
     358:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     35a:	25 b3       	in	r18, 0x15	; 21
     35c:	2b 7f       	andi	r18, 0xFB	; 251
     35e:	ac 01       	movw	r20, r24
     360:	bd 01       	movw	r22, r26
     362:	44 27       	eor	r20, r20
     364:	77 fd       	sbrc	r23, 7
     366:	43 95       	inc	r20
     368:	55 27       	eor	r21, r21
     36a:	66 27       	eor	r22, r22
     36c:	77 27       	eor	r23, r23
     36e:	44 0f       	add	r20, r20
     370:	44 0f       	add	r20, r20
     372:	42 2b       	or	r20, r18
     374:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     376:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     378:	00 c0       	rjmp	.+0      	; 0x37a <_ZN7ADF702018adf7020_InitializeEv+0x2b6>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <_ZN7ADF702018adf7020_InitializeEv+0x2b8>
     37c:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	aa 1f       	adc	r26, r26
     384:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     386:	a8 98       	cbi	0x15, 0	; 21
     388:	00 c0       	rjmp	.+0      	; 0x38a <_ZN7ADF702018adf7020_InitializeEv+0x2c6>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <_ZN7ADF702018adf7020_InitializeEv+0x2c8>
     38c:	00 00       	nop
     38e:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     390:	21 f7       	brne	.-56     	; 0x35a <_ZN7ADF702018adf7020_InitializeEv+0x296>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     392:	ab 9a       	sbi	0x15, 3	; 21
     394:	00 c0       	rjmp	.+0      	; 0x396 <_ZN7ADF702018adf7020_InitializeEv+0x2d2>
     396:	00 c0       	rjmp	.+0      	; 0x398 <_ZN7ADF702018adf7020_InitializeEv+0x2d4>
     398:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     39a:	ab 98       	cbi	0x15, 3	; 21

	//_delay_us(1);


	//R4 Setting
	ADF_Regs.R4_Demod_Setup.bit1.Demod_Select =1;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 d5 00 	sts	0x00D5, r25
     3a4:	80 93 d4 00 	sts	0x00D4, r24
	
	ADF_Regs.R4_Demod_Setup.bit1.PostDemod_BW =5; //5;
     3a8:	25 e0       	ldi	r18, 0x05	; 5
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	30 93 d7 00 	sts	0x00D7, r19
     3b0:	20 93 d6 00 	sts	0x00D6, r18
	ADF_Regs.R4_Demod_Setup.bit1.Demod_Lock_Timeout =0;
     3b4:	10 92 d9 00 	sts	0x00D9, r1
     3b8:	10 92 d8 00 	sts	0x00D8, r1
	ADF_Regs.R4_Demod_Setup.bit1.Sync_Mode =1;
     3bc:	90 93 db 00 	sts	0x00DB, r25
     3c0:	80 93 da 00 	sts	0x00DA, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     3c4:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     3c6:	a8 98       	cbi	0x15, 0	; 21
     3c8:	30 e2       	ldi	r19, 0x20	; 32
     3ca:	84 e5       	ldi	r24, 0x54	; 84
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     3d2:	25 b3       	in	r18, 0x15	; 21
     3d4:	2b 7f       	andi	r18, 0xFB	; 251
     3d6:	ac 01       	movw	r20, r24
     3d8:	bd 01       	movw	r22, r26
     3da:	44 27       	eor	r20, r20
     3dc:	77 fd       	sbrc	r23, 7
     3de:	43 95       	inc	r20
     3e0:	55 27       	eor	r21, r21
     3e2:	66 27       	eor	r22, r22
     3e4:	77 27       	eor	r23, r23
     3e6:	44 0f       	add	r20, r20
     3e8:	44 0f       	add	r20, r20
     3ea:	42 2b       	or	r20, r18
     3ec:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     3ee:	a8 9a       	sbi	0x15, 0	; 21
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <_ZN7ADF702018adf7020_InitializeEv+0x32e>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_ZN7ADF702018adf7020_InitializeEv+0x330>
     3f4:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	aa 1f       	adc	r26, r26
     3fc:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     3fe:	a8 98       	cbi	0x15, 0	; 21
     400:	00 c0       	rjmp	.+0      	; 0x402 <_ZN7ADF702018adf7020_InitializeEv+0x33e>
     402:	00 c0       	rjmp	.+0      	; 0x404 <_ZN7ADF702018adf7020_InitializeEv+0x340>
     404:	00 00       	nop
     406:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     408:	21 f7       	brne	.-56     	; 0x3d2 <_ZN7ADF702018adf7020_InitializeEv+0x30e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     40a:	ab 9a       	sbi	0x15, 3	; 21
     40c:	00 c0       	rjmp	.+0      	; 0x40e <_ZN7ADF702018adf7020_InitializeEv+0x34a>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <_ZN7ADF702018adf7020_InitializeEv+0x34c>
     410:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     412:	ab 98       	cbi	0x15, 3	; 21
	//Set_Register(0x00214);

	//_delay_us(1);

	//R5 Setting
	ADF_Regs.R5_Sync_Word.bit1.Sync_Length =3;
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 e0 00 	sts	0x00E0, r25
     41c:	80 93 df 00 	sts	0x00DF, r24
	ADF_Regs.R5_Sync_Word.bit1.Match_Tolerance =0;
     420:	10 92 e2 00 	sts	0x00E2, r1
     424:	10 92 e1 00 	sts	0x00E1, r1
	ADF_Regs.R5_Sync_Word.bit1.Sync_Word_Byte = 0x94D2AD; //same as 0x123456 in 9 bit transmitter
     428:	8d ea       	ldi	r24, 0xAD	; 173
     42a:	92 ed       	ldi	r25, 0xD2	; 210
     42c:	a4 e9       	ldi	r26, 0x94	; 148
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	80 93 e3 00 	sts	0x00E3, r24
     434:	90 93 e4 00 	sts	0x00E4, r25
     438:	a0 93 e5 00 	sts	0x00E5, r26
     43c:	b0 93 e6 00 	sts	0x00E6, r27
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     440:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     442:	a8 98       	cbi	0x15, 0	; 21
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     444:	25 b3       	in	r18, 0x15	; 21
     446:	2b 7f       	andi	r18, 0xFB	; 251
     448:	30 e2       	ldi	r19, 0x20	; 32
     44a:	85 e3       	ldi	r24, 0x35	; 53
     44c:	9d ea       	ldi	r25, 0xAD	; 173
     44e:	a2 ed       	ldi	r26, 0xD2	; 210
     450:	b4 e9       	ldi	r27, 0x94	; 148
     452:	44 e0       	ldi	r20, 0x04	; 4
     454:	0c c0       	rjmp	.+24     	; 0x46e <_ZN7ADF702018adf7020_InitializeEv+0x3aa>
     456:	25 b3       	in	r18, 0x15	; 21
     458:	2b 7f       	andi	r18, 0xFB	; 251
     45a:	ac 01       	movw	r20, r24
     45c:	bd 01       	movw	r22, r26
     45e:	44 27       	eor	r20, r20
     460:	77 fd       	sbrc	r23, 7
     462:	43 95       	inc	r20
     464:	55 27       	eor	r21, r21
     466:	66 27       	eor	r22, r22
     468:	77 27       	eor	r23, r23
     46a:	44 0f       	add	r20, r20
     46c:	44 0f       	add	r20, r20
     46e:	42 2b       	or	r20, r18
     470:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     472:	a8 9a       	sbi	0x15, 0	; 21
     474:	00 c0       	rjmp	.+0      	; 0x476 <_ZN7ADF702018adf7020_InitializeEv+0x3b2>
     476:	00 c0       	rjmp	.+0      	; 0x478 <_ZN7ADF702018adf7020_InitializeEv+0x3b4>
     478:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	aa 1f       	adc	r26, r26
     480:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     482:	a8 98       	cbi	0x15, 0	; 21
     484:	00 c0       	rjmp	.+0      	; 0x486 <_ZN7ADF702018adf7020_InitializeEv+0x3c2>
     486:	00 c0       	rjmp	.+0      	; 0x488 <_ZN7ADF702018adf7020_InitializeEv+0x3c4>
     488:	00 00       	nop
     48a:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     48c:	21 f7       	brne	.-56     	; 0x456 <_ZN7ADF702018adf7020_InitializeEv+0x392>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     48e:	ab 9a       	sbi	0x15, 3	; 21
     490:	00 c0       	rjmp	.+0      	; 0x492 <_ZN7ADF702018adf7020_InitializeEv+0x3ce>
     492:	00 c0       	rjmp	.+0      	; 0x494 <_ZN7ADF702018adf7020_InitializeEv+0x3d0>
     494:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     496:	ab 98       	cbi	0x15, 3	; 21
	//Set_Register(0xAAAA15);
	//Set_Register(0x12345635);

	//_delay_us(1);
	//R6 Setting
	ADF_Regs.R6_Correlator_Demod.bit1.Discrimin_BW =125;//0x0FA;	//110 for 19.2K deviation and 0x46 for 29K
     498:	8d e7       	ldi	r24, 0x7D	; 125
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	90 93 e9 00 	sts	0x00E9, r25
     4a0:	80 93 e8 00 	sts	0x00E8, r24
	ADF_Regs.R6_Correlator_Demod.bit1.Dot_Product =0;		//0  for 19.2K deviation and 1    for 29K
     4a4:	10 92 eb 00 	sts	0x00EB, r1
     4a8:	10 92 ea 00 	sts	0x00EA, r1
	ADF_Regs.R6_Correlator_Demod.bit1.LNA_Mode =0;
     4ac:	10 92 ed 00 	sts	0x00ED, r1
     4b0:	10 92 ec 00 	sts	0x00EC, r1
	ADF_Regs.R6_Correlator_Demod.bit1.LNA_Current =0;
     4b4:	10 92 ef 00 	sts	0x00EF, r1
     4b8:	10 92 ee 00 	sts	0x00EE, r1
	ADF_Regs.R6_Correlator_Demod.bit1.Mixer_Linearity =0;
     4bc:	10 92 f1 00 	sts	0x00F1, r1
     4c0:	10 92 f0 00 	sts	0x00F0, r1
	ADF_Regs.R6_Correlator_Demod.bit1.IF_FilterCal =0;
     4c4:	10 92 f3 00 	sts	0x00F3, r1
     4c8:	10 92 f2 00 	sts	0x00F2, r1
	ADF_Regs.R6_Correlator_Demod.bit1.IF_FilterDivider =0x190;
     4cc:	80 e9       	ldi	r24, 0x90	; 144
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	90 93 f5 00 	sts	0x00F5, r25
     4d4:	80 93 f4 00 	sts	0x00F4, r24
	ADF_Regs.R6_Correlator_Demod.bit1.RxData_InvertBit =1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 f7 00 	sts	0x00F7, r25
     4e0:	80 93 f6 00 	sts	0x00F6, r24
	ADF_Regs.R6_Correlator_Demod.bit1.Demod_ResetBit =0;
     4e4:	10 92 f9 00 	sts	0x00F9, r1
     4e8:	10 92 f8 00 	sts	0x00F8, r1
	ADF_Regs.R6_Correlator_Demod.bit1.Cdr_ResetBit =0;
     4ec:	10 92 fb 00 	sts	0x00FB, r1
     4f0:	10 92 fa 00 	sts	0x00FA, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     4f4:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     4f6:	a8 98       	cbi	0x15, 0	; 21
     4f8:	30 e2       	ldi	r19, 0x20	; 32
     4fa:	86 ed       	ldi	r24, 0xD6	; 214
     4fc:	97 e0       	ldi	r25, 0x07	; 7
     4fe:	a0 e0       	ldi	r26, 0x00	; 0
     500:	b9 e3       	ldi	r27, 0x39	; 57
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     502:	25 b3       	in	r18, 0x15	; 21
     504:	2b 7f       	andi	r18, 0xFB	; 251
     506:	ac 01       	movw	r20, r24
     508:	bd 01       	movw	r22, r26
     50a:	44 27       	eor	r20, r20
     50c:	77 fd       	sbrc	r23, 7
     50e:	43 95       	inc	r20
     510:	55 27       	eor	r21, r21
     512:	66 27       	eor	r22, r22
     514:	77 27       	eor	r23, r23
     516:	44 0f       	add	r20, r20
     518:	44 0f       	add	r20, r20
     51a:	42 2b       	or	r20, r18
     51c:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     51e:	a8 9a       	sbi	0x15, 0	; 21
     520:	00 c0       	rjmp	.+0      	; 0x522 <_ZN7ADF702018adf7020_InitializeEv+0x45e>
     522:	00 c0       	rjmp	.+0      	; 0x524 <_ZN7ADF702018adf7020_InitializeEv+0x460>
     524:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	aa 1f       	adc	r26, r26
     52c:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     52e:	a8 98       	cbi	0x15, 0	; 21
     530:	00 c0       	rjmp	.+0      	; 0x532 <_ZN7ADF702018adf7020_InitializeEv+0x46e>
     532:	00 c0       	rjmp	.+0      	; 0x534 <_ZN7ADF702018adf7020_InitializeEv+0x470>
     534:	00 00       	nop
     536:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     538:	21 f7       	brne	.-56     	; 0x502 <_ZN7ADF702018adf7020_InitializeEv+0x43e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     53a:	ab 9a       	sbi	0x15, 3	; 21
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_ZN7ADF702018adf7020_InitializeEv+0x47a>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_ZN7ADF702018adf7020_InitializeEv+0x47c>
     540:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     542:	ab 98       	cbi	0x15, 3	; 21
//Set_Register(data_reg);
//Set_Register(0x39000FA6);
//Set_Register(0x19004586);

	//R11 Setting
	ADF_Regs.R11_AFC.bit1.AFC_ScaleCoefficient =0x01a3;
     544:	83 ea       	ldi	r24, 0xA3	; 163
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	90 93 3b 01 	sts	0x013B, r25
     54c:	80 93 3a 01 	sts	0x013A, r24
	ADF_Regs.R11_AFC.bit1.AFC_enableBit =1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	90 93 3d 01 	sts	0x013D, r25
     558:	80 93 3c 01 	sts	0x013C, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     55c:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     55e:	a8 98       	cbi	0x15, 0	; 21
     560:	30 e2       	ldi	r19, 0x20	; 32
     562:	8b e3       	ldi	r24, 0x3B	; 59
     564:	9a e1       	ldi	r25, 0x1A	; 26
     566:	a0 e1       	ldi	r26, 0x10	; 16
     568:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     56a:	25 b3       	in	r18, 0x15	; 21
     56c:	2b 7f       	andi	r18, 0xFB	; 251
     56e:	ac 01       	movw	r20, r24
     570:	bd 01       	movw	r22, r26
     572:	44 27       	eor	r20, r20
     574:	77 fd       	sbrc	r23, 7
     576:	43 95       	inc	r20
     578:	55 27       	eor	r21, r21
     57a:	66 27       	eor	r22, r22
     57c:	77 27       	eor	r23, r23
     57e:	44 0f       	add	r20, r20
     580:	44 0f       	add	r20, r20
     582:	42 2b       	or	r20, r18
     584:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     586:	a8 9a       	sbi	0x15, 0	; 21
     588:	00 c0       	rjmp	.+0      	; 0x58a <_ZN7ADF702018adf7020_InitializeEv+0x4c6>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <_ZN7ADF702018adf7020_InitializeEv+0x4c8>
     58c:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	aa 1f       	adc	r26, r26
     594:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     596:	a8 98       	cbi	0x15, 0	; 21
     598:	00 c0       	rjmp	.+0      	; 0x59a <_ZN7ADF702018adf7020_InitializeEv+0x4d6>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <_ZN7ADF702018adf7020_InitializeEv+0x4d8>
     59c:	00 00       	nop
     59e:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     5a0:	21 f7       	brne	.-56     	; 0x56a <_ZN7ADF702018adf7020_InitializeEv+0x4a6>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     5a2:	ab 9a       	sbi	0x15, 3	; 21
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <_ZN7ADF702018adf7020_InitializeEv+0x4e2>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <_ZN7ADF702018adf7020_InitializeEv+0x4e4>
     5a8:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     5aa:	ab 98       	cbi	0x15, 3	; 21
	Set_Register(data_reg);
	//Set_Register(0x101a3b);
	//    Set_Register(0x00102F7B);
	//_delay_us(1);
	//R9 Setting
	ADF_Regs.R9_AGC.bit1.AGC_LowThreshold =0x1e;
     5ac:	8e e1       	ldi	r24, 0x1E	; 30
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	90 93 19 01 	sts	0x0119, r25
     5b4:	80 93 18 01 	sts	0x0118, r24
	ADF_Regs.R9_AGC.bit1.AGC_HighThreshold =0x46;
     5b8:	86 e4       	ldi	r24, 0x46	; 70
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 1b 01 	sts	0x011B, r25
     5c0:	80 93 1a 01 	sts	0x011A, r24
	ADF_Regs.R9_AGC.bit1.AGC_Search =0;
     5c4:	10 92 1d 01 	sts	0x011D, r1
     5c8:	10 92 1c 01 	sts	0x011C, r1
	ADF_Regs.R9_AGC.bit1.Gain_Control =0;
     5cc:	10 92 1f 01 	sts	0x011F, r1
     5d0:	10 92 1e 01 	sts	0x011E, r1
	ADF_Regs.R9_AGC.bit1.LNA_Gain =3;
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 21 01 	sts	0x0121, r25
     5dc:	80 93 20 01 	sts	0x0120, r24
	ADF_Regs.R9_AGC.bit1.Filter_Gain =2;
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	90 93 23 01 	sts	0x0123, r25
     5e8:	80 93 22 01 	sts	0x0122, r24
	ADF_Regs.R9_AGC.bit1.Filter_Current =0;
     5ec:	10 92 25 01 	sts	0x0125, r1
     5f0:	10 92 24 01 	sts	0x0124, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     5f4:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     5f6:	a8 98       	cbi	0x15, 0	; 21
     5f8:	30 e2       	ldi	r19, 0x20	; 32
     5fa:	89 ee       	ldi	r24, 0xE9	; 233
     5fc:	91 e3       	ldi	r25, 0x31	; 49
     5fe:	a2 eb       	ldi	r26, 0xB2	; 178
     600:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     602:	25 b3       	in	r18, 0x15	; 21
     604:	2b 7f       	andi	r18, 0xFB	; 251
     606:	ac 01       	movw	r20, r24
     608:	bd 01       	movw	r22, r26
     60a:	44 27       	eor	r20, r20
     60c:	77 fd       	sbrc	r23, 7
     60e:	43 95       	inc	r20
     610:	55 27       	eor	r21, r21
     612:	66 27       	eor	r22, r22
     614:	77 27       	eor	r23, r23
     616:	44 0f       	add	r20, r20
     618:	44 0f       	add	r20, r20
     61a:	42 2b       	or	r20, r18
     61c:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     61e:	a8 9a       	sbi	0x15, 0	; 21
     620:	00 c0       	rjmp	.+0      	; 0x622 <_ZN7ADF702018adf7020_InitializeEv+0x55e>
     622:	00 c0       	rjmp	.+0      	; 0x624 <_ZN7ADF702018adf7020_InitializeEv+0x560>
     624:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	aa 1f       	adc	r26, r26
     62c:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     62e:	a8 98       	cbi	0x15, 0	; 21
     630:	00 c0       	rjmp	.+0      	; 0x632 <_ZN7ADF702018adf7020_InitializeEv+0x56e>
     632:	00 c0       	rjmp	.+0      	; 0x634 <_ZN7ADF702018adf7020_InitializeEv+0x570>
     634:	00 00       	nop
     636:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     638:	21 f7       	brne	.-56     	; 0x602 <_ZN7ADF702018adf7020_InitializeEv+0x53e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     63a:	ab 9a       	sbi	0x15, 3	; 21
     63c:	00 c0       	rjmp	.+0      	; 0x63e <_ZN7ADF702018adf7020_InitializeEv+0x57a>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <_ZN7ADF702018adf7020_InitializeEv+0x57c>
     640:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     642:	ab 98       	cbi	0x15, 3	; 21
     644:	08 95       	ret
	//delay_ms(100);
	//R0 Setting
	if (mode == TRANSCEIVER_MODE_RECEIVER)
	{
		//set data and clock pins as input.
		DDRD=0x82; //0x3A
     646:	82 e8       	ldi	r24, 0x82	; 130
     648:	81 bb       	out	0x11, r24	; 17
		PA_ENABLE_WR(0);
     64a:	85 b3       	in	r24, 0x15	; 21
     64c:	8f 77       	andi	r24, 0x7F	; 127
     64e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     650:	89 ef       	ldi	r24, 0xF9	; 249
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <_ZN7ADF702018adf7020_InitializeEv+0x590>
     658:	00 c0       	rjmp	.+0      	; 0x65a <_ZN7ADF702018adf7020_InitializeEv+0x596>
     65a:	00 00       	nop
		_delay_ms(1);
		//RF3023 Setting: RX: V1=1,V2=0 ---- Tx V1=0,V2=1;
		TR_SWV1_WR(1);
     65c:	ae 9a       	sbi	0x15, 6	; 21
		TR_SWV2_WR(0);
     65e:	ad 98       	cbi	0x15, 5	; 21
		
		//HMC646 Setting: 1 = Tx Enable
		TR_SW_WR(0);
     660:	97 98       	cbi	0x12, 7	; 18
		
		

		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =15845;//31130;//4096;
     662:	85 ee       	ldi	r24, 0xE5	; 229
     664:	9d e3       	ldi	r25, 0x3D	; 61
     666:	90 93 71 00 	sts	0x0071, r25
     66a:	80 93 70 00 	sts	0x0070, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio = 43;//106;
     66e:	8b e2       	ldi	r24, 0x2B	; 43
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 73 00 	sts	0x0073, r25
     676:	80 93 72 00 	sts	0x0072, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	90 93 75 00 	sts	0x0075, r25
     682:	80 93 74 00 	sts	0x0074, r24
     686:	40 91 72 00 	lds	r20, 0x0072
     68a:	50 91 73 00 	lds	r21, 0x0073
     68e:	3c cd       	rjmp	.-1416   	; 0x108 <_ZN7ADF702018adf7020_InitializeEv+0x44>

00000690 <_ZN7ADF702011adfReadbackEc>:
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
//////////////////////////////////////////////////////////////////////////
uint16_t ADF7020::adfReadback(char readbackMode)
{
     690:	2f 92       	push	r2
     692:	3f 92       	push	r3
     694:	4f 92       	push	r4
     696:	5f 92       	push	r5
     698:	6f 92       	push	r6
     69a:	7f 92       	push	r7
     69c:	8f 92       	push	r8
     69e:	9f 92       	push	r9
     6a0:	af 92       	push	r10
     6a2:	bf 92       	push	r11
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	60 97       	sbiw	r28, 0x10	; 16
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
	char i;
	uint16_t regData=0;
		 
	switch (readbackMode)
     6c4:	63 30       	cpi	r22, 0x03	; 3
     6c6:	09 f4       	brne	.+2      	; 0x6ca <_ZN7ADF702011adfReadbackEc+0x3a>
     6c8:	e8 c1       	rjmp	.+976    	; 0xa9a <__stack+0x23b>
     6ca:	08 f4       	brcc	.+2      	; 0x6ce <_ZN7ADF702011adfReadbackEc+0x3e>
     6cc:	52 c1       	rjmp	.+676    	; 0x972 <__stack+0x113>
     6ce:	65 30       	cpi	r22, 0x05	; 5
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <_ZN7ADF702011adfReadbackEc+0x44>
     6d2:	b3 c1       	rjmp	.+870    	; 0xa3a <__stack+0x1db>
     6d4:	08 f4       	brcc	.+2      	; 0x6d8 <_ZN7ADF702011adfReadbackEc+0x48>
     6d6:	68 c1       	rjmp	.+720    	; 0x9a8 <__stack+0x149>
     6d8:	66 30       	cpi	r22, 0x06	; 6
     6da:	09 f4       	brne	.+2      	; 0x6de <_ZN7ADF702011adfReadbackEc+0x4e>
     6dc:	95 c1       	rjmp	.+810    	; 0xa08 <__stack+0x1a9>
     6de:	80 91 02 01 	lds	r24, 0x0102
     6e2:	90 91 03 01 	lds	r25, 0x0103
     6e6:	60 91 00 01 	lds	r22, 0x0100
     6ea:	70 91 01 01 	lds	r23, 0x0101
     6ee:	81 70       	andi	r24, 0x01	; 1
     6f0:	99 27       	eor	r25, r25
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	63 70       	andi	r22, 0x03	; 3
     6fc:	77 27       	eor	r23, r23
     6fe:	86 2b       	or	r24, r22
     700:	97 2b       	or	r25, r23
     702:	60 91 fe 00 	lds	r22, 0x00FE
     706:	70 91 ff 00 	lds	r23, 0x00FF
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	63 70       	andi	r22, 0x03	; 3
     714:	77 27       	eor	r23, r23
     716:	86 2b       	or	r24, r22
     718:	97 2b       	or	r25, r23
     71a:	82 95       	swap	r24
     71c:	92 95       	swap	r25
     71e:	90 7f       	andi	r25, 0xF0	; 240
     720:	98 27       	eor	r25, r24
     722:	80 7f       	andi	r24, 0xF0	; 240
     724:	98 27       	eor	r25, r24
     726:	07 96       	adiw	r24, 0x07	; 7
     728:	2c 01       	movw	r4, r24
     72a:	61 2c       	mov	r6, r1
     72c:	71 2c       	mov	r7, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     72e:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     730:	a8 98       	cbi	0x15, 0	; 21
     732:	70 e2       	ldi	r23, 0x20	; 32
     734:	f8 8a       	std	Y+16, r15	; 0x10
     736:	ef 86       	std	Y+15, r14	; 0x0f
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     738:	65 b3       	in	r22, 0x15	; 21
     73a:	6b 7f       	andi	r22, 0xFB	; 251
     73c:	73 01       	movw	r14, r6
     73e:	62 01       	movw	r12, r4
     740:	cc 24       	eor	r12, r12
     742:	f7 fc       	sbrc	r15, 7
     744:	c3 94       	inc	r12
     746:	dd 24       	eor	r13, r13
     748:	ee 24       	eor	r14, r14
     74a:	ff 24       	eor	r15, r15
     74c:	cc 0c       	add	r12, r12
     74e:	cc 0c       	add	r12, r12
     750:	c6 2a       	or	r12, r22
     752:	c5 ba       	out	0x15, r12	; 21
		S_clk_WR(1);
     754:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     756:	00 c0       	rjmp	.+0      	; 0x758 <_ZN7ADF702011adfReadbackEc+0xc8>
     758:	00 c0       	rjmp	.+0      	; 0x75a <_ZN7ADF702011adfReadbackEc+0xca>
     75a:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     75c:	44 0c       	add	r4, r4
     75e:	55 1c       	adc	r5, r5
     760:	66 1c       	adc	r6, r6
     762:	77 1c       	adc	r7, r7
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     764:	a8 98       	cbi	0x15, 0	; 21
     766:	00 c0       	rjmp	.+0      	; 0x768 <_ZN7ADF702011adfReadbackEc+0xd8>
     768:	00 c0       	rjmp	.+0      	; 0x76a <_ZN7ADF702011adfReadbackEc+0xda>
     76a:	00 00       	nop
     76c:	71 50       	subi	r23, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     76e:	21 f7       	brne	.-56     	; 0x738 <_ZN7ADF702011adfReadbackEc+0xa8>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     770:	ab 9a       	sbi	0x15, 3	; 21
     772:	00 c0       	rjmp	.+0      	; 0x774 <_ZN7ADF702011adfReadbackEc+0xe4>
     774:	00 c0       	rjmp	.+0      	; 0x776 <_ZN7ADF702011adfReadbackEc+0xe6>
     776:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     778:	ab 98       	cbi	0x15, 3	; 21
	}
	
	R7_Generate(ADF_Regs.R7_ReadbackSetup.bit1 , regData);
	Set_Register(regData);
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
     77a:	ab 9a       	sbi	0x15, 3	; 21
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     77c:	a8 9a       	sbi	0x15, 0	; 21
     77e:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     780:	63 b3       	in	r22, 0x13	; 19
     782:	61 fb       	bst	r22, 1
     784:	22 27       	eor	r18, r18
     786:	20 f9       	bld	r18, 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	28 0f       	add	r18, r24
     78c:	39 1f       	adc	r19, r25
		regData <<= 1;
     78e:	22 0f       	add	r18, r18
     790:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     792:	a8 98       	cbi	0x15, 0	; 21
     794:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     796:	a8 9a       	sbi	0x15, 0	; 21
     798:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     79a:	83 b3       	in	r24, 0x13	; 19
     79c:	86 95       	lsr	r24
     79e:	81 70       	andi	r24, 0x01	; 1
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	1a 82       	std	Y+2, r1	; 0x02
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	28 0f       	add	r18, r24
     7aa:	39 1f       	adc	r19, r25
		regData <<= 1;
     7ac:	22 0f       	add	r18, r18
     7ae:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7b0:	a8 98       	cbi	0x15, 0	; 21
     7b2:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7b4:	a8 9a       	sbi	0x15, 0	; 21
     7b6:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7b8:	83 b3       	in	r24, 0x13	; 19
     7ba:	86 95       	lsr	r24
     7bc:	81 70       	andi	r24, 0x01	; 1
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	1c 82       	std	Y+4, r1	; 0x04
     7c2:	eb 81       	ldd	r30, Y+3	; 0x03
     7c4:	fc 81       	ldd	r31, Y+4	; 0x04
     7c6:	2e 0f       	add	r18, r30
     7c8:	3f 1f       	adc	r19, r31
		regData <<= 1;
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7ce:	a8 98       	cbi	0x15, 0	; 21
     7d0:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7d2:	a8 9a       	sbi	0x15, 0	; 21
     7d4:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7d6:	83 b3       	in	r24, 0x13	; 19
     7d8:	81 fb       	bst	r24, 1
     7da:	00 27       	eor	r16, r16
     7dc:	00 f9       	bld	r16, 0
     7de:	10 e0       	ldi	r17, 0x00	; 0
     7e0:	20 0f       	add	r18, r16
     7e2:	31 1f       	adc	r19, r17
		regData <<= 1;
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7e8:	a8 98       	cbi	0x15, 0	; 21
     7ea:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7ec:	a8 9a       	sbi	0x15, 0	; 21
     7ee:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7f0:	83 b3       	in	r24, 0x13	; 19
     7f2:	81 fb       	bst	r24, 1
     7f4:	ee 24       	eor	r14, r14
     7f6:	e0 f8       	bld	r14, 0
     7f8:	f1 2c       	mov	r15, r1
     7fa:	2e 0d       	add	r18, r14
     7fc:	3f 1d       	adc	r19, r15
		regData <<= 1;
     7fe:	22 0f       	add	r18, r18
     800:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     802:	a8 98       	cbi	0x15, 0	; 21
     804:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     806:	a8 9a       	sbi	0x15, 0	; 21
     808:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     80a:	83 b3       	in	r24, 0x13	; 19
     80c:	81 fb       	bst	r24, 1
     80e:	aa 27       	eor	r26, r26
     810:	a0 f9       	bld	r26, 0
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	2a 0f       	add	r18, r26
     816:	3b 1f       	adc	r19, r27
		regData <<= 1;
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     81c:	a8 98       	cbi	0x15, 0	; 21
     81e:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     820:	a8 9a       	sbi	0x15, 0	; 21
     822:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     824:	83 b3       	in	r24, 0x13	; 19
     826:	81 fb       	bst	r24, 1
     828:	ee 27       	eor	r30, r30
     82a:	e0 f9       	bld	r30, 0
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	2e 0f       	add	r18, r30
     830:	3f 1f       	adc	r19, r31
		regData <<= 1;
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     836:	a8 98       	cbi	0x15, 0	; 21
     838:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     83a:	a8 9a       	sbi	0x15, 0	; 21
     83c:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     83e:	83 b3       	in	r24, 0x13	; 19
     840:	81 fb       	bst	r24, 1
     842:	aa 24       	eor	r10, r10
     844:	a0 f8       	bld	r10, 0
     846:	b1 2c       	mov	r11, r1
     848:	2a 0d       	add	r18, r10
     84a:	3b 1d       	adc	r19, r11
		regData <<= 1;
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     850:	a8 98       	cbi	0x15, 0	; 21
     852:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     854:	a8 9a       	sbi	0x15, 0	; 21
     856:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     858:	83 b3       	in	r24, 0x13	; 19
     85a:	81 fb       	bst	r24, 1
     85c:	88 24       	eor	r8, r8
     85e:	80 f8       	bld	r8, 0
     860:	91 2c       	mov	r9, r1
     862:	28 0d       	add	r18, r8
     864:	39 1d       	adc	r19, r9
		regData <<= 1;
     866:	22 0f       	add	r18, r18
     868:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     86a:	a8 98       	cbi	0x15, 0	; 21
     86c:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     86e:	a8 9a       	sbi	0x15, 0	; 21
     870:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     872:	83 b3       	in	r24, 0x13	; 19
     874:	86 95       	lsr	r24
     876:	81 70       	andi	r24, 0x01	; 1
     878:	8d 83       	std	Y+5, r24	; 0x05
     87a:	1e 82       	std	Y+6, r1	; 0x06
     87c:	8d 81       	ldd	r24, Y+5	; 0x05
     87e:	9e 81       	ldd	r25, Y+6	; 0x06
     880:	28 0f       	add	r18, r24
     882:	39 1f       	adc	r19, r25
		regData <<= 1;
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     888:	a8 98       	cbi	0x15, 0	; 21
     88a:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     88c:	a8 9a       	sbi	0x15, 0	; 21
     88e:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     890:	83 b3       	in	r24, 0x13	; 19
     892:	86 95       	lsr	r24
     894:	81 70       	andi	r24, 0x01	; 1
     896:	8f 83       	std	Y+7, r24	; 0x07
     898:	18 86       	std	Y+8, r1	; 0x08
     89a:	ef 81       	ldd	r30, Y+7	; 0x07
     89c:	f8 85       	ldd	r31, Y+8	; 0x08
     89e:	2e 0f       	add	r18, r30
     8a0:	3f 1f       	adc	r19, r31
		regData <<= 1;
     8a2:	22 0f       	add	r18, r18
     8a4:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8a6:	a8 98       	cbi	0x15, 0	; 21
     8a8:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8aa:	a8 9a       	sbi	0x15, 0	; 21
     8ac:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8ae:	83 b3       	in	r24, 0x13	; 19
     8b0:	86 95       	lsr	r24
     8b2:	81 70       	andi	r24, 0x01	; 1
     8b4:	89 87       	std	Y+9, r24	; 0x09
     8b6:	1a 86       	std	Y+10, r1	; 0x0a
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	28 0f       	add	r18, r24
     8be:	39 1f       	adc	r19, r25
		regData <<= 1;
     8c0:	22 0f       	add	r18, r18
     8c2:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8c4:	a8 98       	cbi	0x15, 0	; 21
     8c6:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8c8:	a8 9a       	sbi	0x15, 0	; 21
     8ca:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8cc:	83 b3       	in	r24, 0x13	; 19
     8ce:	86 95       	lsr	r24
     8d0:	81 70       	andi	r24, 0x01	; 1
     8d2:	8b 87       	std	Y+11, r24	; 0x0b
     8d4:	1c 86       	std	Y+12, r1	; 0x0c
     8d6:	eb 85       	ldd	r30, Y+11	; 0x0b
     8d8:	fc 85       	ldd	r31, Y+12	; 0x0c
     8da:	2e 0f       	add	r18, r30
     8dc:	3f 1f       	adc	r19, r31
		regData <<= 1;
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8e2:	a8 98       	cbi	0x15, 0	; 21
     8e4:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8e6:	a8 9a       	sbi	0x15, 0	; 21
     8e8:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8ea:	83 b3       	in	r24, 0x13	; 19
     8ec:	86 95       	lsr	r24
     8ee:	81 70       	andi	r24, 0x01	; 1
     8f0:	8d 87       	std	Y+13, r24	; 0x0d
     8f2:	1e 86       	std	Y+14, r1	; 0x0e
     8f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f8:	28 0f       	add	r18, r24
     8fa:	39 1f       	adc	r19, r25
		regData <<= 1;
     8fc:	22 0f       	add	r18, r18
     8fe:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     900:	a8 98       	cbi	0x15, 0	; 21
     902:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     904:	a8 9a       	sbi	0x15, 0	; 21
     906:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     908:	83 b3       	in	r24, 0x13	; 19
     90a:	81 fb       	bst	r24, 1
     90c:	22 24       	eor	r2, r2
     90e:	20 f8       	bld	r2, 0
     910:	31 2c       	mov	r3, r1
     912:	22 0d       	add	r18, r2
     914:	33 1d       	adc	r19, r3
		regData <<= 1;
     916:	22 0f       	add	r18, r18
     918:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     91a:	a8 98       	cbi	0x15, 0	; 21
     91c:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     91e:	a8 9a       	sbi	0x15, 0	; 21
     920:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     922:	83 b3       	in	r24, 0x13	; 19
     924:	81 fb       	bst	r24, 1
     926:	44 27       	eor	r20, r20
     928:	40 f9       	bld	r20, 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	42 0f       	add	r20, r18
     92e:	53 1f       	adc	r21, r19
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     930:	a8 98       	cbi	0x15, 0	; 21
     932:	00 00       	nop
		_delay_us(1);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     934:	ab 9a       	sbi	0x15, 3	; 21
     936:	00 00       	nop
	_delay_us(1);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     938:	ab 98       	cbi	0x15, 3	; 21
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
		_delay_us(1);
		regData += S_Read(); //Read MSB first
		regData <<= 1;
     93a:	44 0f       	add	r20, r20
     93c:	55 1f       	adc	r21, r21
	Sl_En_WR(1); // After each 32 bits SLE must become 1
	_delay_us(1);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
	
	return regData;
}
     93e:	ca 01       	movw	r24, r20
     940:	60 96       	adiw	r28, 0x10	; 16
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	cf 90       	pop	r12
     95c:	bf 90       	pop	r11
     95e:	af 90       	pop	r10
     960:	9f 90       	pop	r9
     962:	8f 90       	pop	r8
     964:	7f 90       	pop	r7
     966:	6f 90       	pop	r6
     968:	5f 90       	pop	r5
     96a:	4f 90       	pop	r4
     96c:	3f 90       	pop	r3
     96e:	2f 90       	pop	r2
     970:	08 95       	ret
uint16_t ADF7020::adfReadback(char readbackMode)
{
	char i;
	uint16_t regData=0;
		 
	switch (readbackMode)
     972:	61 30       	cpi	r22, 0x01	; 1
     974:	09 f4       	brne	.+2      	; 0x978 <__stack+0x119>
     976:	7a c0       	rjmp	.+244    	; 0xa6c <__stack+0x20d>
     978:	80 f1       	brcs	.+96     	; 0x9da <__stack+0x17b>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case BATTERY_VLOTAGE_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 01 01 	sts	0x0101, r25
     982:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 1;
     986:	90 93 ff 00 	sts	0x00FF, r25
     98a:	80 93 fe 00 	sts	0x00FE, r24
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     98e:	90 93 03 01 	sts	0x0103, r25
     992:	80 93 02 01 	sts	0x0102, r24
		break;
     996:	37 e5       	ldi	r19, 0x57	; 87
     998:	43 2e       	mov	r4, r19
     99a:	55 24       	eor	r5, r5
     99c:	53 94       	inc	r5
     99e:	61 2c       	mov	r6, r1
     9a0:	71 2c       	mov	r7, r1
     9a2:	87 e5       	ldi	r24, 0x57	; 87
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	c3 ce       	rjmp	.-634    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 2;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case ADCIN_VOLTAGE_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 01 01 	sts	0x0101, r25
     9b0:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 3;
     9b4:	63 e0       	ldi	r22, 0x03	; 3
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	70 93 ff 00 	sts	0x00FF, r23
     9bc:	60 93 fe 00 	sts	0x00FE, r22
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     9c0:	90 93 03 01 	sts	0x0103, r25
     9c4:	80 93 02 01 	sts	0x0102, r24
		break;
     9c8:	97 e7       	ldi	r25, 0x77	; 119
     9ca:	49 2e       	mov	r4, r25
     9cc:	55 24       	eor	r5, r5
     9ce:	53 94       	inc	r5
     9d0:	61 2c       	mov	r6, r1
     9d2:	71 2c       	mov	r7, r1
     9d4:	87 e7       	ldi	r24, 0x77	; 119
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	aa ce       	rjmp	.-684    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>
	uint16_t regData=0;
		 
	switch (readbackMode)
	{
		case AFC_READBACK:
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode =0;
     9da:	10 92 01 01 	sts	0x0101, r1
     9de:	10 92 00 01 	sts	0x0100, r1
		  ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode =0;
     9e2:	10 92 ff 00 	sts	0x00FF, r1
     9e6:	10 92 fe 00 	sts	0x00FE, r1
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit =1;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	90 93 03 01 	sts	0x0103, r25
     9f2:	80 93 02 01 	sts	0x0102, r24
		break;
     9f6:	57 e0       	ldi	r21, 0x07	; 7
     9f8:	45 2e       	mov	r4, r21
     9fa:	55 24       	eor	r5, r5
     9fc:	53 94       	inc	r5
     9fe:	61 2c       	mov	r6, r1
     a00:	71 2c       	mov	r7, r1
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	93 ce       	rjmp	.-730    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 3;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case FILTER_CALIBRETION_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 2;
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 01 01 	sts	0x0101, r25
     a10:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a14:	10 92 ff 00 	sts	0x00FF, r1
     a18:	10 92 fe 00 	sts	0x00FE, r1
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 03 01 	sts	0x0103, r25
     a24:	80 93 02 01 	sts	0x0102, r24
		break;
     a28:	07 e8       	ldi	r16, 0x87	; 135
     a2a:	40 2e       	mov	r4, r16
     a2c:	55 24       	eor	r5, r5
     a2e:	53 94       	inc	r5
     a30:	61 2c       	mov	r6, r1
     a32:	71 2c       	mov	r7, r1
     a34:	87 e8       	ldi	r24, 0x87	; 135
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	7a ce       	rjmp	.-780    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 3;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case SILICON_REVISION_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 3;
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	90 93 01 01 	sts	0x0101, r25
     a42:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a46:	10 92 ff 00 	sts	0x00FF, r1
     a4a:	10 92 fe 00 	sts	0x00FE, r1
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	90 93 03 01 	sts	0x0103, r25
     a56:	80 93 02 01 	sts	0x0102, r24
		break;
     a5a:	87 ec       	ldi	r24, 0xC7	; 199
     a5c:	48 2e       	mov	r4, r24
     a5e:	55 24       	eor	r5, r5
     a60:	53 94       	inc	r5
     a62:	61 2c       	mov	r6, r1
     a64:	71 2c       	mov	r7, r1
     a66:	87 ec       	ldi	r24, 0xC7	; 199
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	61 ce       	rjmp	.-830    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode =0;
		  ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode =0;
		  ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit =1;
		break;
		case RSSI_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	90 93 01 01 	sts	0x0101, r25
     a74:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a78:	10 92 ff 00 	sts	0x00FF, r1
     a7c:	10 92 fe 00 	sts	0x00FE, r1
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a80:	90 93 03 01 	sts	0x0103, r25
     a84:	80 93 02 01 	sts	0x0102, r24
		break;
     a88:	47 e4       	ldi	r20, 0x47	; 71
     a8a:	44 2e       	mov	r4, r20
     a8c:	55 24       	eor	r5, r5
     a8e:	53 94       	inc	r5
     a90:	61 2c       	mov	r6, r1
     a92:	71 2c       	mov	r7, r1
     a94:	87 e4       	ldi	r24, 0x47	; 71
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	4a ce       	rjmp	.-876    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 1;
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case TEMPERATURE_SENSOR_READBACK:
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 01 01 	sts	0x0101, r25
     aa2:	80 93 00 01 	sts	0x0100, r24
			ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 2;
     aa6:	62 e0       	ldi	r22, 0x02	; 2
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	70 93 ff 00 	sts	0x00FF, r23
     aae:	60 93 fe 00 	sts	0x00FE, r22
			ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     ab2:	90 93 03 01 	sts	0x0103, r25
     ab6:	80 93 02 01 	sts	0x0102, r24
		break;
     aba:	27 e6       	ldi	r18, 0x67	; 103
     abc:	42 2e       	mov	r4, r18
     abe:	55 24       	eor	r5, r5
     ac0:	53 94       	inc	r5
     ac2:	61 2c       	mov	r6, r1
     ac4:	71 2c       	mov	r7, r1
     ac6:	87 e6       	ldi	r24, 0x67	; 103
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	31 ce       	rjmp	.-926    	; 0x72e <_ZN7ADF702011adfReadbackEc+0x9e>

00000acc <_ZN7ADF70207setModeE14TranceiverMode>:
	
	return regData;
}
//////////////////////////////////////////////////////////////////////////
void ADF7020::setMode(TranceiverMode mode)
{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
	this->mode = mode;
     ad2:	68 83       	st	Y, r22
	return receiveDataFlag;
}
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     ad4:	61 11       	cpse	r22, r1
     ad6:	16 c0       	rjmp	.+44     	; 0xb04 <_ZN7ADF70207setModeE14TranceiverMode+0x38>
		// INT0: Off
		// INT1: On
		// INT1 Mode: Rising Edge
		// INT2: On
		// INT2 Mode: Rising Edge
		GICR|=0xA0;
     ad8:	8b b7       	in	r24, 0x3b	; 59
     ada:	80 6a       	ori	r24, 0xA0	; 160
     adc:	8b bf       	out	0x3b, r24	; 59
		MCUCR=0x0C;
     ade:	8c e0       	ldi	r24, 0x0C	; 12
     ae0:	85 bf       	out	0x35, r24	; 53
		MCUCSR=0x40;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	84 bf       	out	0x34, r24	; 52
		GIFR=0xA0;
     ae6:	80 ea       	ldi	r24, 0xA0	; 160
     ae8:	8a bf       	out	0x3a, r24	; 58
		//// INT2 Mode: Rising Edge
		//GICR|=0x20;
		//MCUCR=0x00;
		//MCUCSR=0x40;
		//GIFR=0x20;
		serial.init(19200);
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	7b e4       	ldi	r23, 0x4B	; 75
     aee:	8f ea       	ldi	r24, 0xAF	; 175
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6Serial4initEi>
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
		//TIMSK=0x00;
	//else
		TIMSK=0x10;
     af6:	80 e1       	ldi	r24, 0x10	; 16
     af8:	89 bf       	out	0x39, r24	; 57
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     afa:	ce 01       	movw	r24, r28
	
	
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     b00:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_ZN7ADF702018adf7020_InitializeEv>
	{
		// External Interrupt(s) initialization
		// INT0: Off
		// INT1: Off
		// INT2: Off
		GICR &=0x0F;
     b04:	8b b7       	in	r24, 0x3b	; 59
     b06:	8f 70       	andi	r24, 0x0F	; 15
     b08:	8b bf       	out	0x3b, r24	; 59
		GIFR=0x00;
     b0a:	1a be       	out	0x3a, r1	; 58
		MCUCR=0x00;
     b0c:	15 be       	out	0x35, r1	; 53
		MCUCSR=0x00;
     b0e:	14 be       	out	0x34, r1	; 52
		serial.init(19200);
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	7b e4       	ldi	r23, 0x4B	; 75
     b14:	8f ea       	ldi	r24, 0xAF	; 175
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6Serial4initEi>
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
		//TIMSK=0x00;
	//else
		TIMSK=0x10;
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	89 bf       	out	0x39, r24	; 57
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     b20:	ce 01       	movw	r24, r28
	
	
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     b26:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_ZN7ADF702018adf7020_InitializeEv>

00000b2a <_ZN7ADF702014receiveInt1ISREv>:
	
}

///////////////////////////////////////////////////
void ADF7020::receiveInt1ISR()
{
     b2a:	fc 01       	movw	r30, r24
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     b2c:	80 81       	ld	r24, Z
     b2e:	81 11       	cpse	r24, r1
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <_ZN7ADF702014receiveInt1ISREv+0xe>
		{
			if ( receivePreambleDetect )
     b32:	82 85       	ldd	r24, Z+10	; 0x0a
     b34:	81 11       	cpse	r24, r1
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <_ZN7ADF702014receiveInt1ISREv+0x10>
     b38:	08 95       	ret
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::receiveBit()
{
	if( receiveBitIndex < 8)
     b3a:	86 81       	ldd	r24, Z+6	; 0x06
     b3c:	88 30       	cpi	r24, 0x08	; 8
     b3e:	38 f4       	brcc	.+14     	; 0xb4e <_ZN7ADF702014receiveInt1ISREv+0x24>
	{
		receivedByteShadow <<= 1;
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	99 0f       	add	r25, r25
     b44:	93 83       	std	Z+3, r25	; 0x03
		if (Data_IO_RD())
     b46:	84 9b       	sbis	0x10, 4	; 16
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <_ZN7ADF702014receiveInt1ISREv+0x24>
			receivedByteShadow |= 1;
     b4a:	91 60       	ori	r25, 0x01	; 1
     b4c:	93 83       	std	Z+3, r25	; 0x03
	}
	
		
	receiveBitIndex ++;
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	86 83       	std	Z+6, r24	; 0x06
	
	if (receiveBitIndex==9)
     b52:	89 30       	cpi	r24, 0x09	; 9
     b54:	89 f7       	brne	.-30     	; 0xb38 <_ZN7ADF702014receiveInt1ISREv+0xe>
	{
		receiveBitIndex = 0;
     b56:	16 82       	std	Z+6, r1	; 0x06
		receiveDataFlag = true;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	81 87       	std	Z+9, r24	; 0x09
		receivedByte = receivedByteShadow;
     b5c:	83 81       	ldd	r24, Z+3	; 0x03
     b5e:	84 83       	std	Z+4, r24	; 0x04
		receivedByteShadow = 0;
     b60:	13 82       	std	Z+3, r1	; 0x03
     b62:	08 95       	ret

00000b64 <_ZN7ADF702014receiveInt2ISREv>:
	
}
//////////////////////////////////////////////////////////////////////////
void ADF7020::receiveInt2ISR()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     b64:	fc 01       	movw	r30, r24
     b66:	20 81       	ld	r18, Z
     b68:	21 11       	cpse	r18, r1
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <_ZN7ADF702014receiveInt2ISREv+0xc>
	{
		receivePreambleDetect = true;
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	22 87       	std	Z+10, r18	; 0x0a
     b70:	08 95       	ret

00000b72 <_ZN7ADF702016transmitTimerISREv>:
		return;
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::transmitTimerISR()
{
     b72:	fc 01       	movw	r30, r24
		//return ;
	//} 
	//else
	{
		
		Data_IO_WR (oldTransmitBit);
     b74:	22 b3       	in	r18, 0x12	; 18
     b76:	87 81       	ldd	r24, Z+7	; 0x07
     b78:	30 e1       	ldi	r19, 0x10	; 16
     b7a:	83 9f       	mul	r24, r19
     b7c:	c0 01       	movw	r24, r0
     b7e:	11 24       	eor	r1, r1
     b80:	2f 7e       	andi	r18, 0xEF	; 239
     b82:	28 2b       	or	r18, r24
     b84:	22 bb       	out	0x12, r18	; 18
		//TCNT1L=66;		//for baudrate  9600/7 Kbps
		//timerCounter ++;		//timerCounter>6
		//if (timerCounter > 6) 
		{
		//	timerCounter =0;
		if ( sendBitIndex == 8 )
     b86:	45 81       	ldd	r20, Z+5	; 0x05
     b88:	48 30       	cpi	r20, 0x08	; 8
     b8a:	89 f0       	breq	.+34     	; 0xbae <_ZN7ADF702016transmitTimerISREv+0x3c>
			oldTransmitBit = 1 - oldTransmitBit ;
		else
			oldTransmitBit = ((sendBufferShadow >> (7-sendBitIndex) ) & 1 );
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	27 e0       	ldi	r18, 0x07	; 7
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	24 1b       	sub	r18, r20
     b96:	31 09       	sbc	r19, r1
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_ZN7ADF702016transmitTimerISREv+0x2c>
     b9a:	95 95       	asr	r25
     b9c:	87 95       	ror	r24
     b9e:	2a 95       	dec	r18
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <_ZN7ADF702016transmitTimerISREv+0x28>
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	99 27       	eor	r25, r25
     ba6:	87 83       	std	Z+7, r24	; 0x07
			
		sendBitIndex ++;
     ba8:	4f 5f       	subi	r20, 0xFF	; 255
     baa:	45 83       	std	Z+5, r20	; 0x05
     bac:	08 95       	ret
		//timerCounter ++;		//timerCounter>6
		//if (timerCounter > 6) 
		{
		//	timerCounter =0;
		if ( sendBitIndex == 8 )
			oldTransmitBit = 1 - oldTransmitBit ;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	97 81       	ldd	r25, Z+7	; 0x07
     bb2:	28 2f       	mov	r18, r24
     bb4:	29 1b       	sub	r18, r25
     bb6:	27 83       	std	Z+7, r18	; 0x07
			
		sendBitIndex ++;
			
			if ( sendBitIndex == 9 )
			{
				sendBufferShadow = sendBuffer;
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	92 83       	std	Z+2, r25	; 0x02
				sendBuffer =0 ;
     bbc:	11 82       	std	Z+1, r1	; 0x01
				sendBitIndex = 0;
     bbe:	15 82       	std	Z+5, r1	; 0x05
				transmitBufferEmpty =true;
     bc0:	80 87       	std	Z+8, r24	; 0x08
     bc2:	08 95       	ret

00000bc4 <_ZN7ADF70208sendByteEc>:
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::sendByte(char data)
{
		sendBuffer = data;
     bc4:	fc 01       	movw	r30, r24
     bc6:	61 83       	std	Z+1, r22	; 0x01
		transmitBufferEmpty= false;
     bc8:	10 86       	std	Z+8, r1	; 0x08
     bca:	08 95       	ret

00000bcc <_ZN7ADF702018isTransmitterReadyEv>:
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isTransmitterReady()
{
	return transmitBufferEmpty;
}
     bcc:	fc 01       	movw	r30, r24
     bce:	80 85       	ldd	r24, Z+8	; 0x08
     bd0:	08 95       	ret

00000bd2 <_ZN7ADF702011receiveByteEv>:
	}
}
//////////////////////////////////////////////////////////////////////////
char ADF7020::receiveByte()
{
	receiveDataFlag = false;
     bd2:	fc 01       	movw	r30, r24
     bd4:	11 86       	std	Z+9, r1	; 0x09
	return receivedByte;
}
     bd6:	84 81       	ldd	r24, Z+4	; 0x04
     bd8:	08 95       	ret

00000bda <_ZN7ADF702018isNewDataAvailableEv>:
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isNewDataAvailable()
{
	//receiveDataFlag=1;
	return receiveDataFlag;
}
     bda:	fc 01       	movw	r30, r24
     bdc:	81 85       	ldd	r24, Z+9	; 0x09
     bde:	08 95       	ret

00000be0 <_ZN7ADF702010isReceiverEv>:
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
     be0:	fc 01       	movw	r30, r24
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 81       	ld	r25, Z
     be6:	91 11       	cpse	r25, r1
     be8:	80 e0       	ldi	r24, 0x00	; 0
	{
		return true;
	}
	else
		return false;
}
     bea:	08 95       	ret

00000bec <_ZN7ADF702020clearPreaambleDetectEv>:
//////////////////////////////////////////////////////////////////////////
void ADF7020::clearPreaambleDetect()
{
	receivePreambleDetect = false;
     bec:	fc 01       	movw	r30, r24
     bee:	12 86       	std	Z+10, r1	; 0x0a
     bf0:	08 95       	ret

00000bf2 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>:
void ADF7020::adf7020_ChangeMode( TranceiverMode mode )
{
	
	long int data_reg;
	
	this->mode = mode;
     bf2:	fc 01       	movw	r30, r24
     bf4:	60 83       	st	Z, r22
	return receiveDataFlag;
}
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     bf6:	61 11       	cpse	r22, r1
     bf8:	99 c0       	rjmp	.+306    	; 0xd2c <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x13a>
		// INT0: Off
		// INT1: On
		// INT1 Mode: Rising Edge
		// INT2: On
		// INT2 Mode: Rising Edge
		GICR|=0xA0;
     bfa:	8b b7       	in	r24, 0x3b	; 59
     bfc:	80 6a       	ori	r24, 0xA0	; 160
     bfe:	8b bf       	out	0x3b, r24	; 59
		MCUCR=0x0C;
     c00:	8c e0       	ldi	r24, 0x0C	; 12
     c02:	85 bf       	out	0x35, r24	; 53
		MCUCSR=0x40;
     c04:	80 e4       	ldi	r24, 0x40	; 64
     c06:	84 bf       	out	0x34, r24	; 52
		GIFR=0xA0;
     c08:	80 ea       	ldi	r24, 0xA0	; 160
     c0a:	8a bf       	out	0x3a, r24	; 58
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
	//TIMSK=0x00;
	//else
	TIMSK=0x10;
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	89 bf       	out	0x39, r24	; 57

	
	
	
	CE_WR(0);
     c10:	ac 98       	cbi	0x15, 4	; 21
     c12:	00 00       	nop
	_delay_us(1);
	CE_WR(1);
     c14:	ac 9a       	sbi	0x15, 4	; 21
	//delay_ms(100);
	//R0 Setting
	if (mode == TRANSCEIVER_MODE_RECEIVER)
	{
		//set data and clock pins as input.
		DDRD=0x82; //0x3A
     c16:	82 e8       	ldi	r24, 0x82	; 130
     c18:	81 bb       	out	0x11, r24	; 17
		PA_ENABLE_WR(0);
     c1a:	85 b3       	in	r24, 0x15	; 21
     c1c:	8f 77       	andi	r24, 0x7F	; 127
     c1e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c20:	89 ef       	ldi	r24, 0xF9	; 249
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x32>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x38>
     c2a:	00 00       	nop
		_delay_ms(1);
		//RF3023 Setting: RX: V1=1,V2=0 ---- Tx V1=0,V2=1;
		TR_SWV1_WR(1);
     c2c:	ae 9a       	sbi	0x15, 6	; 21
		TR_SWV2_WR(0);
     c2e:	ad 98       	cbi	0x15, 5	; 21
		
		//HMC646 Setting: 1 = Tx Enable
		TR_SW_WR(0);
     c30:	97 98       	cbi	0x12, 7	; 18
		
		

		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =15845;//31130;//4096;
     c32:	85 ee       	ldi	r24, 0xE5	; 229
     c34:	9d e3       	ldi	r25, 0x3D	; 61
     c36:	90 93 71 00 	sts	0x0071, r25
     c3a:	80 93 70 00 	sts	0x0070, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio = 43;//106;
     c3e:	8b e2       	ldi	r24, 0x2B	; 43
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	90 93 73 00 	sts	0x0073, r25
     c46:	80 93 72 00 	sts	0x0072, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 75 00 	sts	0x0075, r25
     c52:	80 93 74 00 	sts	0x0074, r24
     c56:	40 91 72 00 	lds	r20, 0x0072
     c5a:	50 91 73 00 	lds	r21, 0x0073
		
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =16500;//16500;//4096;//22938;
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio =43;//107//22 in rx
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 0;
	}
	ADF_Regs.R0_N.bit1.PLL_enablebit =1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	90 93 77 00 	sts	0x0077, r25
     c66:	80 93 76 00 	sts	0x0076, r24
	ADF_Regs.R0_N.bit1.MUXOUT =3;
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	90 93 79 00 	sts	0x0079, r25
     c72:	80 93 78 00 	sts	0x0078, r24
	
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     c76:	80 91 74 00 	lds	r24, 0x0074
     c7a:	90 91 75 00 	lds	r25, 0x0075
     c7e:	81 70       	andi	r24, 0x01	; 1
     c80:	99 27       	eor	r25, r25
     c82:	8e 60       	ori	r24, 0x0E	; 14
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	ba 2f       	mov	r27, r26
     c8a:	a9 2f       	mov	r26, r25
     c8c:	98 2f       	mov	r25, r24
     c8e:	88 27       	eor	r24, r24
     c90:	55 27       	eor	r21, r21
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	84 2b       	or	r24, r20
     c98:	95 2b       	or	r25, r21
     c9a:	a6 2b       	or	r26, r22
     c9c:	b7 2b       	or	r27, r23
     c9e:	3f e0       	ldi	r19, 0x0F	; 15
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	aa 1f       	adc	r26, r26
     ca6:	bb 1f       	adc	r27, r27
     ca8:	3a 95       	dec	r19
     caa:	d1 f7       	brne	.-12     	; 0xca0 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0xae>
     cac:	40 91 70 00 	lds	r20, 0x0070
     cb0:	50 91 71 00 	lds	r21, 0x0071
     cb4:	5f 77       	andi	r21, 0x7F	; 127
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	84 2b       	or	r24, r20
     cbc:	95 2b       	or	r25, r21
     cbe:	a6 2b       	or	r26, r22
     cc0:	b7 2b       	or	r27, r23
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	aa 1f       	adc	r26, r26
     cc8:	bb 1f       	adc	r27, r27
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     ce2:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     ce4:	a8 98       	cbi	0x15, 0	; 21
     ce6:	30 e2       	ldi	r19, 0x20	; 32
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     ce8:	25 b3       	in	r18, 0x15	; 21
     cea:	2b 7f       	andi	r18, 0xFB	; 251
     cec:	ac 01       	movw	r20, r24
     cee:	bd 01       	movw	r22, r26
     cf0:	44 27       	eor	r20, r20
     cf2:	77 fd       	sbrc	r23, 7
     cf4:	43 95       	inc	r20
     cf6:	55 27       	eor	r21, r21
     cf8:	66 27       	eor	r22, r22
     cfa:	77 27       	eor	r23, r23
     cfc:	44 0f       	add	r20, r20
     cfe:	44 0f       	add	r20, r20
     d00:	42 2b       	or	r20, r18
     d02:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     d04:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x116>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x118>
     d0a:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	aa 1f       	adc	r26, r26
     d12:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     d14:	a8 98       	cbi	0x15, 0	; 21
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x126>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x128>
     d1a:	00 00       	nop
     d1c:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     d1e:	21 f7       	brne	.-56     	; 0xce8 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0xf6>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     d20:	ab 9a       	sbi	0x15, 3	; 21
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x132>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x134>
     d26:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     d28:	ab 98       	cbi	0x15, 3	; 21
     d2a:	08 95       	ret
	{
		// External Interrupt(s) initialization
		// INT0: Off
		// INT1: Off
		// INT2: Off
		GICR &=0x0F;
     d2c:	8b b7       	in	r24, 0x3b	; 59
     d2e:	8f 70       	andi	r24, 0x0F	; 15
     d30:	8b bf       	out	0x3b, r24	; 59
		GIFR=0x00;
     d32:	1a be       	out	0x3a, r1	; 58
		MCUCR=0x00;
     d34:	15 be       	out	0x35, r1	; 53
		MCUCSR=0x00;
     d36:	14 be       	out	0x34, r1	; 52
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
	//TIMSK=0x00;
	//else
	TIMSK=0x10;
     d38:	80 e1       	ldi	r24, 0x10	; 16
     d3a:	89 bf       	out	0x39, r24	; 57

	
	
	
	CE_WR(0);
     d3c:	ac 98       	cbi	0x15, 4	; 21
     d3e:	00 00       	nop
	_delay_us(1);
	CE_WR(1);
     d40:	ac 9a       	sbi	0x15, 4	; 21
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
	}
	else
	{
		//set data and clock port as aoutput.
		DDRD=0xBA;
     d42:	8a eb       	ldi	r24, 0xBA	; 186
     d44:	81 bb       	out	0x11, r24	; 17
		
		//RF3023 Setting: RX: V1=1,V2=0 ---- Tx V1=0,V2=1;
		TR_SWV1_WR(0);
     d46:	ae 98       	cbi	0x15, 6	; 21
		TR_SWV2_WR(1);
     d48:	ad 9a       	sbi	0x15, 5	; 21
		
		//HMC646 Setting: 1 = Tx Enable
		TR_SW_WR(1);
     d4a:	97 9a       	sbi	0x12, 7	; 18
     d4c:	90 e1       	ldi	r25, 0x10	; 16
     d4e:	9a 95       	dec	r25
     d50:	f1 f7       	brne	.-4      	; 0xd4e <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x15c>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x162>
		_delay_us(50);
		PA_ENABLE_WR(1);
     d54:	85 b3       	in	r24, 0x15	; 21
     d56:	80 68       	ori	r24, 0x80	; 128
     d58:	88 bb       	out	0x18, r24	; 24
		
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =16500;//16500;//4096;//22938;
     d5a:	84 e7       	ldi	r24, 0x74	; 116
     d5c:	90 e4       	ldi	r25, 0x40	; 64
     d5e:	90 93 71 00 	sts	0x0071, r25
     d62:	80 93 70 00 	sts	0x0070, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio =43;//107//22 in rx
     d66:	8b e2       	ldi	r24, 0x2B	; 43
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	90 93 73 00 	sts	0x0073, r25
     d6e:	80 93 72 00 	sts	0x0072, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 0;
     d72:	10 92 75 00 	sts	0x0075, r1
     d76:	10 92 74 00 	sts	0x0074, r1
     d7a:	ac 01       	movw	r20, r24
     d7c:	70 cf       	rjmp	.-288    	; 0xc5e <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x6c>

00000d7e <_ZN7ADF702018isPreambleDetectedEv>:

//////////////////////////////////////////////////////////////////////////
bool ADF7020::isPreambleDetected()
{
	return receivePreambleDetect;
     d7e:	fc 01       	movw	r30, r24
     d80:	82 85       	ldd	r24, Z+10	; 0x0a
     d82:	08 95       	ret

00000d84 <_ZN4FIFOC1Ev>:
#include "GlobalVariables.h"
#include <avr/interrupt.h>
// default constructor
FIFO::FIFO()
{
	readIndex = 0;
     d84:	fc 01       	movw	r30, r24
     d86:	e7 58       	subi	r30, 0x87	; 135
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	11 82       	std	Z+1, r1	; 0x01
     d8c:	10 82       	st	Z, r1
	writeIndex = 0;
     d8e:	fc 01       	movw	r30, r24
     d90:	e5 58       	subi	r30, 0x85	; 133
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	11 82       	std	Z+1, r1	; 0x01
     d96:	10 82       	st	Z, r1
     d98:	08 95       	ret

00000d9a <_ZN4FIFOD1Ev>:
} //FIFO

// default destructor
FIFO::~FIFO()
     d9a:	08 95       	ret

00000d9c <_ZN4FIFO8readByteEv>:
{
} //~FIFO

char FIFO::readByte()
{
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
     daa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     dae:	fe 01       	movw	r30, r28
     db0:	e5 58       	subi	r30, 0x85	; 133
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	8e 01       	movw	r16, r28
     dba:	07 58       	subi	r16, 0x87	; 135
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	f8 01       	movw	r30, r16
     dc0:	20 81       	ld	r18, Z
     dc2:	31 81       	ldd	r19, Z+1	; 0x01
     dc4:	42 17       	cp	r20, r18
     dc6:	53 07       	cpc	r21, r19
     dc8:	4c f5       	brge	.+82     	; 0xe1c <_ZN4FIFO8readByteEv+0x80>
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     dca:	42 1b       	sub	r20, r18
     dcc:	53 0b       	sbc	r21, r19
     dce:	7a 01       	movw	r14, r20
     dd0:	f9 e7       	ldi	r31, 0x79	; 121
     dd2:	ef 0e       	add	r14, r31
     dd4:	f1 1c       	adc	r15, r1
		
	restoreIntrrupt( intTemp );
     dd6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     dda:	1e 14       	cp	r1, r14
     ddc:	1f 04       	cpc	r1, r15
     dde:	34 f5       	brge	.+76     	; 0xe2c <_ZN4FIFO8readByteEv+0x90>
	{
		temp = fifoBuffer[readIndex];
     de0:	f8 01       	movw	r30, r16
     de2:	20 81       	ld	r18, Z
     de4:	31 81       	ldd	r19, Z+1	; 0x01
     de6:	c2 0f       	add	r28, r18
     de8:	d3 1f       	adc	r29, r19
     dea:	88 81       	ld	r24, Y
		readIndex ++ ;
     dec:	2f 5f       	subi	r18, 0xFF	; 255
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
		if ( readIndex > MAX_FIFO_LENGTH )
     df0:	29 37       	cpi	r18, 0x79	; 121
     df2:	31 05       	cpc	r19, r1
     df4:	54 f0       	brlt	.+20     	; 0xe0a <_ZN4FIFO8readByteEv+0x6e>
			readIndex =0;
     df6:	f8 01       	movw	r30, r16
     df8:	11 82       	std	Z+1, r1	; 0x01
     dfa:	10 82       	st	Z, r1
	}
	return temp;
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
	{
		temp = fifoBuffer[readIndex];
		readIndex ++ ;
     e0a:	31 83       	std	Z+1, r19	; 0x01
     e0c:	20 83       	st	Z, r18
		if ( readIndex > MAX_FIFO_LENGTH )
			readIndex =0;
	}
	return temp;
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	08 95       	ret
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
     e1c:	7a 01       	movw	r14, r20
     e1e:	e2 1a       	sub	r14, r18
     e20:	f3 0a       	sbc	r15, r19
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
		
	restoreIntrrupt( intTemp );
     e22:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     e26:	1e 14       	cp	r1, r14
     e28:	1f 04       	cpc	r1, r15
     e2a:	d4 f2       	brlt	.-76     	; 0xde0 <_ZN4FIFO8readByteEv+0x44>
{
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
     e2c:	80 e0       	ldi	r24, 0x00	; 0
		readIndex ++ ;
		if ( readIndex > MAX_FIFO_LENGTH )
			readIndex =0;
	}
	return temp;
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	08 95       	ret

00000e3c <_ZN4FIFO9writeByteEc>:

void FIFO::writeByte( char data )
{
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	d6 2e       	mov	r13, r22
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
     e4e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     e52:	8e 01       	movw	r16, r28
     e54:	05 58       	subi	r16, 0x85	; 133
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	f8 01       	movw	r30, r16
     e5a:	40 81       	ld	r20, Z
     e5c:	51 81       	ldd	r21, Z+1	; 0x01
     e5e:	fe 01       	movw	r30, r28
     e60:	e7 58       	subi	r30, 0x87	; 135
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	20 81       	ld	r18, Z
     e66:	31 81       	ldd	r19, Z+1	; 0x01
     e68:	42 17       	cp	r20, r18
     e6a:	53 07       	cpc	r21, r19
     e6c:	14 f5       	brge	.+68     	; 0xeb2 <_ZN4FIFO9writeByteEc+0x76>
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     e6e:	42 1b       	sub	r20, r18
     e70:	53 0b       	sbc	r21, r19
     e72:	7a 01       	movw	r14, r20
     e74:	f9 e7       	ldi	r31, 0x79	; 121
     e76:	ef 0e       	add	r14, r31
     e78:	f1 1c       	adc	r15, r1
		
	restoreIntrrupt( intTemp );
     e7a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
	return temp;
}

void FIFO::writeByte( char data )
{
	if (getFifoFullLength() < MAX_FIFO_LENGTH )
     e7e:	88 e7       	ldi	r24, 0x78	; 120
     e80:	e8 16       	cp	r14, r24
     e82:	f1 04       	cpc	r15, r1
     e84:	74 f4       	brge	.+28     	; 0xea2 <_ZN4FIFO9writeByteEc+0x66>
	{
		fifoBuffer [writeIndex] = data;
     e86:	f8 01       	movw	r30, r16
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	c8 0f       	add	r28, r24
     e8e:	d9 1f       	adc	r29, r25
     e90:	d8 82       	st	Y, r13
		writeIndex ++ ;
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
		if ( writeIndex > MAX_FIFO_LENGTH )
     e98:	89 37       	cpi	r24, 0x79	; 121
     e9a:	91 05       	cpc	r25, r1
     e9c:	14 f0       	brlt	.+4      	; 0xea2 <_ZN4FIFO9writeByteEc+0x66>
			writeIndex =0;
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	10 82       	st	Z, r1
	}
	
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	08 95       	ret
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
     eb2:	7a 01       	movw	r14, r20
     eb4:	e2 1a       	sub	r14, r18
     eb6:	f3 0a       	sbc	r15, r19
     eb8:	e0 cf       	rjmp	.-64     	; 0xe7a <_ZN4FIFO9writeByteEc+0x3e>

00000eba <_ZN4FIFO10readStringEPci>:
	}
	
}

void FIFO::readString( char *str,int strSize )
{
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	5c 01       	movw	r10, r24
     ed4:	7b 01       	movw	r14, r22
     ed6:	ea 01       	movw	r28, r20
	char temp;
	if ( strSize > MAX_FIFO_LENGTH )
     ed8:	49 37       	cpi	r20, 0x79	; 121
     eda:	51 05       	cpc	r21, r1
     edc:	0c f4       	brge	.+2      	; 0xee0 <_ZN4FIFO10readStringEPci+0x26>
     ede:	51 c0       	rjmp	.+162    	; 0xf82 <_ZN4FIFO10readStringEPci+0xc8>
	{
		strSize = MAX_FIFO_LENGTH ;
     ee0:	c8 e7       	ldi	r28, 0x78	; 120
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
     ee4:	9b e7       	ldi	r25, 0x7B	; 123
     ee6:	c9 2e       	mov	r12, r25
     ee8:	d1 2c       	mov	r13, r1
     eea:	ca 0c       	add	r12, r10
     eec:	db 1c       	adc	r13, r11
     eee:	85 01       	movw	r16, r10
     ef0:	07 58       	subi	r16, 0x87	; 135
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	20 c0       	rjmp	.+64     	; 0xf36 <_ZN4FIFO10readStringEPci+0x7c>
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     ef6:	42 1b       	sub	r20, r18
     ef8:	53 0b       	sbc	r21, r19
     efa:	4a 01       	movw	r8, r20
     efc:	f9 e7       	ldi	r31, 0x79	; 121
     efe:	8f 0e       	add	r8, r31
     f00:	91 1c       	adc	r9, r1
		
	restoreIntrrupt( intTemp );
     f02:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     f06:	18 14       	cp	r1, r8
     f08:	19 04       	cpc	r1, r9
     f0a:	44 f5       	brge	.+80     	; 0xf5c <_ZN4FIFO10readStringEPci+0xa2>
	{
		temp = fifoBuffer[readIndex];
     f0c:	f8 01       	movw	r30, r16
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	f5 01       	movw	r30, r10
     f14:	e8 0f       	add	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	20 81       	ld	r18, Z
		readIndex ++ ;
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	f8 01       	movw	r30, r16
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
		if ( readIndex > MAX_FIFO_LENGTH )
     f22:	89 37       	cpi	r24, 0x79	; 121
     f24:	91 05       	cpc	r25, r1
     f26:	14 f0       	brlt	.+4      	; 0xf2c <_ZN4FIFO10readStringEPci+0x72>
			readIndex =0;
     f28:	11 82       	std	Z+1, r1	; 0x01
     f2a:	10 82       	st	Z, r1
	}
	
	while (strSize)
	{
		temp = readByte();
		*str = temp;
     f2c:	f7 01       	movw	r30, r14
     f2e:	21 93       	st	Z+, r18
     f30:	7f 01       	movw	r14, r30
		str++;
		strSize --;
     f32:	21 97       	sbiw	r28, 0x01	; 1
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     f34:	c9 f0       	breq	.+50     	; 0xf68 <_ZN4FIFO10readStringEPci+0xae>
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
     f36:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     f3a:	f6 01       	movw	r30, r12
     f3c:	40 81       	ld	r20, Z
     f3e:	51 81       	ldd	r21, Z+1	; 0x01
     f40:	f8 01       	movw	r30, r16
     f42:	20 81       	ld	r18, Z
     f44:	31 81       	ldd	r19, Z+1	; 0x01
     f46:	42 17       	cp	r20, r18
     f48:	53 07       	cpc	r21, r19
     f4a:	ac f2       	brlt	.-86     	; 0xef6 <_ZN4FIFO10readStringEPci+0x3c>
		temp =	writeIndex - readIndex;
     f4c:	4a 01       	movw	r8, r20
     f4e:	82 1a       	sub	r8, r18
     f50:	93 0a       	sbc	r9, r19
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
		
	restoreIntrrupt( intTemp );
     f52:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
	if(getFifoFullLength() > 0 )
     f56:	18 14       	cp	r1, r8
     f58:	19 04       	cpc	r1, r9
     f5a:	c4 f2       	brlt	.-80     	; 0xf0c <_ZN4FIFO10readStringEPci+0x52>
{
} //~FIFO

char FIFO::readByte()
{
	char temp = 0;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	while (strSize)
	{
		temp = readByte();
		*str = temp;
     f5e:	f7 01       	movw	r30, r14
     f60:	21 93       	st	Z+, r18
     f62:	7f 01       	movw	r14, r30
		str++;
		strSize --;
     f64:	21 97       	sbiw	r28, 0x01	; 1
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     f66:	39 f7       	brne	.-50     	; 0xf36 <_ZN4FIFO10readStringEPci+0x7c>
		temp = readByte();
		*str = temp;
		str++;
		strSize --;
	};
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	08 95       	ret
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
     f82:	20 97       	sbiw	r28, 0x00	; 0
     f84:	89 f3       	breq	.-30     	; 0xf68 <_ZN4FIFO10readStringEPci+0xae>
     f86:	8b e7       	ldi	r24, 0x7B	; 123
     f88:	c8 2e       	mov	r12, r24
     f8a:	d1 2c       	mov	r13, r1
     f8c:	ca 0c       	add	r12, r10
     f8e:	db 1c       	adc	r13, r11
     f90:	85 01       	movw	r16, r10
     f92:	07 58       	subi	r16, 0x87	; 135
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	cf cf       	rjmp	.-98     	; 0xf36 <_ZN4FIFO10readStringEPci+0x7c>

00000f98 <_ZN4FIFO11writeStringEPci>:
		strSize --;
	};
}

void FIFO::writeString( char *str,int strSize )
{
     f98:	7f 92       	push	r7
     f9a:	8f 92       	push	r8
     f9c:	9f 92       	push	r9
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	5c 01       	movw	r10, r24
     fb4:	ea 01       	movw	r28, r20
	if ( strSize > MAX_FIFO_LENGTH )
     fb6:	49 37       	cpi	r20, 0x79	; 121
     fb8:	51 05       	cpc	r21, r1
     fba:	e4 f1       	brlt	.+120    	; 0x1034 <_ZN4FIFO11writeStringEPci+0x9c>
	{
		strSize = MAX_FIFO_LENGTH ;
     fbc:	c8 e7       	ldi	r28, 0x78	; 120
     fbe:	d0 e0       	ldi	r29, 0x00	; 0
     fc0:	7b 01       	movw	r14, r22
     fc2:	85 01       	movw	r16, r10
     fc4:	05 58       	subi	r16, 0x85	; 133
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	29 e7       	ldi	r18, 0x79	; 121
     fca:	c2 2e       	mov	r12, r18
     fcc:	d1 2c       	mov	r13, r1
     fce:	ca 0c       	add	r12, r10
     fd0:	db 1c       	adc	r13, r11
     fd2:	1e c0       	rjmp	.+60     	; 0x1010 <_ZN4FIFO11writeStringEPci+0x78>
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     fd4:	42 1b       	sub	r20, r18
     fd6:	53 0b       	sbc	r21, r19
     fd8:	4a 01       	movw	r8, r20
     fda:	f9 e7       	ldi	r31, 0x79	; 121
     fdc:	8f 0e       	add	r8, r31
     fde:	91 1c       	adc	r9, r1
		
	restoreIntrrupt( intTemp );
     fe0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
	return temp;
}

void FIFO::writeByte( char data )
{
	if (getFifoFullLength() < MAX_FIFO_LENGTH )
     fe4:	88 e7       	ldi	r24, 0x78	; 120
     fe6:	88 16       	cp	r8, r24
     fe8:	91 04       	cpc	r9, r1
     fea:	84 f4       	brge	.+32     	; 0x100c <_ZN4FIFO11writeStringEPci+0x74>
	{
		fifoBuffer [writeIndex] = data;
     fec:	f8 01       	movw	r30, r16
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	f5 01       	movw	r30, r10
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	70 82       	st	Z, r7
		writeIndex ++ ;
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	f8 01       	movw	r30, r16
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
		if ( writeIndex > MAX_FIFO_LENGTH )
    1002:	89 37       	cpi	r24, 0x79	; 121
    1004:	91 05       	cpc	r25, r1
    1006:	14 f0       	brlt	.+4      	; 0x100c <_ZN4FIFO11writeStringEPci+0x74>
			writeIndex =0;
    1008:	11 82       	std	Z+1, r1	; 0x01
    100a:	10 82       	st	Z, r1
	
	while (strSize)
	{
		writeByte(*str);
		str++;
		strSize --;
    100c:	21 97       	sbiw	r28, 0x01	; 1
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    100e:	a1 f0       	breq	.+40     	; 0x1038 <_ZN4FIFO11writeStringEPci+0xa0>
	{
		writeByte(*str);
    1010:	f7 01       	movw	r30, r14
    1012:	71 90       	ld	r7, Z+
    1014:	7f 01       	movw	r14, r30
{
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
    1016:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
    101a:	f8 01       	movw	r30, r16
    101c:	40 81       	ld	r20, Z
    101e:	51 81       	ldd	r21, Z+1	; 0x01
    1020:	f6 01       	movw	r30, r12
    1022:	20 81       	ld	r18, Z
    1024:	31 81       	ldd	r19, Z+1	; 0x01
    1026:	42 17       	cp	r20, r18
    1028:	53 07       	cpc	r21, r19
    102a:	a4 f2       	brlt	.-88     	; 0xfd4 <_ZN4FIFO11writeStringEPci+0x3c>
		temp =	writeIndex - readIndex;
    102c:	4a 01       	movw	r8, r20
    102e:	82 1a       	sub	r8, r18
    1030:	93 0a       	sbc	r9, r19
    1032:	d6 cf       	rjmp	.-84     	; 0xfe0 <_ZN4FIFO11writeStringEPci+0x48>
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    1034:	20 97       	sbiw	r28, 0x00	; 0
    1036:	21 f6       	brne	.-120    	; 0xfc0 <_ZN4FIFO11writeStringEPci+0x28>
	{
		writeByte(*str);
		str++;
		strSize --;
	};
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	bf 90       	pop	r11
    104a:	af 90       	pop	r10
    104c:	9f 90       	pop	r9
    104e:	8f 90       	pop	r8
    1050:	7f 90       	pop	r7
    1052:	08 95       	ret

00001054 <_ZN4FIFO17getFifoFullLengthEv>:



int FIFO::getFifoFullLength()
{
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	8c 01       	movw	r16, r24
	
	int temp=0;
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
    105e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
    1062:	f8 01       	movw	r30, r16
    1064:	e5 58       	subi	r30, 0x85	; 133
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	c0 81       	ld	r28, Z
    106a:	d1 81       	ldd	r29, Z+1	; 0x01
    106c:	f8 01       	movw	r30, r16
    106e:	e7 58       	subi	r30, 0x87	; 135
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	20 81       	ld	r18, Z
    1074:	31 81       	ldd	r19, Z+1	; 0x01
    1076:	c2 17       	cp	r28, r18
    1078:	d3 07       	cpc	r29, r19
    107a:	64 f4       	brge	.+24     	; 0x1094 <_ZN4FIFO17getFifoFullLengthEv+0x40>
		temp =	writeIndex - readIndex;
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
    107c:	c2 1b       	sub	r28, r18
    107e:	d3 0b       	sbc	r29, r19
    1080:	c7 58       	subi	r28, 0x87	; 135
    1082:	df 4f       	sbci	r29, 0xFF	; 255
		
	restoreIntrrupt( intTemp );
    1084:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
		return temp;
}
    1088:	ce 01       	movw	r24, r28
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	08 95       	ret
	char intTemp= 0;
	
	intTemp = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		temp =	writeIndex - readIndex;
    1094:	c2 1b       	sub	r28, r18
    1096:	d3 0b       	sbc	r29, r19
	else
		temp = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
		
	restoreIntrrupt( intTemp );
    1098:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
		return temp;
}
    109c:	ce 01       	movw	r24, r28
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <_ZN4FIFO9clearFifoEv>:
	return temp;
}

void FIFO::clearFifo()
{
	writeIndex=readIndex=0;
    10a8:	fc 01       	movw	r30, r24
    10aa:	e7 58       	subi	r30, 0x87	; 135
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	11 82       	std	Z+1, r1	; 0x01
    10b0:	10 82       	st	Z, r1
    10b2:	fc 01       	movw	r30, r24
    10b4:	e5 58       	subi	r30, 0x85	; 133
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	11 82       	std	Z+1, r1	; 0x01
    10ba:	10 82       	st	Z, r1
    10bc:	08 95       	ret

000010be <_Z16micro_Initializev>:
#include <avr/interrupt.h>


void micro_Initialize()
{
	PORTA=0x00;
    10be:	1b ba       	out	0x1b, r1	; 27
	DDRA=0x0F;
    10c0:	8f e0       	ldi	r24, 0x0F	; 15
    10c2:	8a bb       	out	0x1a, r24	; 26

	PORTB=0x10;
    10c4:	80 e1       	ldi	r24, 0x10	; 16
    10c6:	88 bb       	out	0x18, r24	; 24
	DDRB=0x18;
    10c8:	88 e1       	ldi	r24, 0x18	; 24
    10ca:	87 bb       	out	0x17, r24	; 23

	PORTC=0x00;
    10cc:	15 ba       	out	0x15, r1	; 21
	DDRC=0x1D;
    10ce:	8d e1       	ldi	r24, 0x1D	; 29
    10d0:	84 bb       	out	0x14, r24	; 20

	PORTD=0x00;
    10d2:	12 ba       	out	0x12, r1	; 18
	DDRD=0x82;
    10d4:	82 e8       	ldi	r24, 0x82	; 130
    10d6:	81 bb       	out	0x11, r24	; 17
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 7.813 kHz
	// Mode: Normal top=0xFF
	// OC0 output: Disconnected
	TCCR0=0x05;
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
    10dc:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
    10de:	1c be       	out	0x3c, r1	; 60
	// Input Capture on Falling Edge
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    10e0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x01;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    10e6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    10e8:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    10ea:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    10ec:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x03;
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0x41;
    10f2:	81 e4       	ldi	r24, 0x41	; 65
    10f4:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
    10f6:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    10f8:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR=0x00;
    10fa:	12 bc       	out	0x22, r1	; 34
	TCCR2=0x00;
    10fc:	15 bc       	out	0x25, r1	; 37
	TCNT2=0x00;
    10fe:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
    1100:	13 bc       	out	0x23, r1	; 35
	//ACSR=0x00;
	//SFIOR=0x00;
	//}
	//else
	//{
	ACSR=0x80;
    1102:	80 e8       	ldi	r24, 0x80	; 128
    1104:	88 b9       	out	0x08, r24	; 8
	SFIOR=0x00;
    1106:	10 be       	out	0x30, r1	; 48
    1108:	08 95       	ret

0000110a <_Z9ToggleLEDc>:
}

//////////////////////////////////////////////////////////////////////////
void ToggleLED(char led_num)
{
	switch(led_num)
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	01 f1       	breq	.+64     	; 0x114e <_Z9ToggleLEDc+0x44>
    110e:	28 f0       	brcs	.+10     	; 0x111a <_Z9ToggleLEDc+0x10>
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	19 f1       	breq	.+70     	; 0x115a <_Z9ToggleLEDc+0x50>
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	99 f0       	breq	.+38     	; 0x113e <_Z9ToggleLEDc+0x34>
    1118:	08 95       	ret
    111a:	88 23       	and	r24, r24
    111c:	51 f0       	breq	.+20     	; 0x1132 <_Z9ToggleLEDc+0x28>
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	d9 f7       	brne	.-10     	; 0x1118 <_Z9ToggleLEDc+0xe>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    1122:	8b b3       	in	r24, 0x1b	; 27
    1124:	8b 7f       	andi	r24, 0xFB	; 251
    1126:	ca 9b       	sbis	0x19, 2	; 25
    1128:	10 c0       	rjmp	.+32     	; 0x114a <_Z9ToggleLEDc+0x40>
		break;
		case 3:
		Led3_WR(!Led3_RD());
		break;
		case 4:
		Led4_WR(!Led4_RD());
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	89 2b       	or	r24, r25
    112e:	8b bb       	out	0x1b, r24	; 27
    1130:	08 95       	ret
void ToggleLED(char led_num)
{
	switch(led_num)
	{
		case 0:
		Led0_WR(!Led0_RD());
    1132:	8b b3       	in	r24, 0x1b	; 27
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	c9 99       	sbic	0x19, 1	; 25
    1138:	f8 cf       	rjmp	.-16     	; 0x112a <_Z9ToggleLEDc+0x20>
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	f7 cf       	rjmp	.-18     	; 0x112c <_Z9ToggleLEDc+0x22>
		break;
		case 3:
		Led3_WR(!Led3_RD());
		break;
		case 4:
		Led4_WR(!Led4_RD());
    113e:	8b b3       	in	r24, 0x1b	; 27
    1140:	8f 77       	andi	r24, 0x7F	; 127
    1142:	cf 99       	sbic	0x19, 7	; 25
    1144:	f2 cf       	rjmp	.-28     	; 0x112a <_Z9ToggleLEDc+0x20>
    1146:	90 e8       	ldi	r25, 0x80	; 128
    1148:	f1 cf       	rjmp	.-30     	; 0x112c <_Z9ToggleLEDc+0x22>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    114a:	94 e0       	ldi	r25, 0x04	; 4
    114c:	ef cf       	rjmp	.-34     	; 0x112c <_Z9ToggleLEDc+0x22>
		break;
		case 2:
		Led2_WR(!Led2_RD());
    114e:	8b b3       	in	r24, 0x1b	; 27
    1150:	87 7f       	andi	r24, 0xF7	; 247
    1152:	cb 99       	sbic	0x19, 3	; 25
    1154:	ea cf       	rjmp	.-44     	; 0x112a <_Z9ToggleLEDc+0x20>
    1156:	98 e0       	ldi	r25, 0x08	; 8
    1158:	e9 cf       	rjmp	.-46     	; 0x112c <_Z9ToggleLEDc+0x22>
		break;
		case 3:
		Led3_WR(!Led3_RD());
    115a:	8b b3       	in	r24, 0x1b	; 27
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	cc 99       	sbic	0x19, 4	; 25
    1160:	e4 cf       	rjmp	.-56     	; 0x112a <_Z9ToggleLEDc+0x20>
    1162:	90 e1       	ldi	r25, 0x10	; 16
    1164:	e3 cf       	rjmp	.-58     	; 0x112c <_Z9ToggleLEDc+0x22>

00001166 <_Z6setLEDc>:
	return ;
}
//////////////////////////////////////////////////////////////////////////
void setLED(char led_num)
{
	switch(led_num)
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	79 f0       	breq	.+30     	; 0x1188 <_Z6setLEDc+0x22>
    116a:	30 f0       	brcs	.+12     	; 0x1178 <_Z6setLEDc+0x12>
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	71 f0       	breq	.+28     	; 0x118c <_Z6setLEDc+0x26>
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	41 f0       	breq	.+16     	; 0x1184 <_Z6setLEDc+0x1e>
		break;
		case 4:
		Led4_WR(1);
		break;
		default :
		Led0_WR(1);
    1174:	d9 9a       	sbi	0x1b, 1	; 27
    1176:	08 95       	ret
	return ;
}
//////////////////////////////////////////////////////////////////////////
void setLED(char led_num)
{
	switch(led_num)
    1178:	88 23       	and	r24, r24
    117a:	e1 f3       	breq	.-8      	; 0x1174 <_Z6setLEDc+0xe>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	d1 f7       	brne	.-12     	; 0x1174 <_Z6setLEDc+0xe>
	{
		case 0:
		Led0_WR(1);
		break;
		case 1:
		Led1_WR(1);
    1180:	da 9a       	sbi	0x1b, 2	; 27
		break;
    1182:	08 95       	ret
		break;
		case 3:
		Led3_WR(1);
		break;
		case 4:
		Led4_WR(1);
    1184:	df 9a       	sbi	0x1b, 7	; 27
		break;
    1186:	08 95       	ret
		break;
		case 1:
		Led1_WR(1);
		break;
		case 2:
		Led2_WR(1);
    1188:	db 9a       	sbi	0x1b, 3	; 27
		break;
    118a:	08 95       	ret
		case 3:
		Led3_WR(1);
    118c:	dc 9a       	sbi	0x1b, 4	; 27
		break;
    118e:	08 95       	ret

00001190 <_Z8resetLEDc>:
	return ;
}
//////////////////////////////////////////////////////////////////////////
void resetLED(char led_num)
{
	switch(led_num)
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	79 f0       	breq	.+30     	; 0x11b2 <_Z8resetLEDc+0x22>
    1194:	30 f0       	brcs	.+12     	; 0x11a2 <_Z8resetLEDc+0x12>
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	71 f0       	breq	.+28     	; 0x11b6 <_Z8resetLEDc+0x26>
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	41 f0       	breq	.+16     	; 0x11ae <_Z8resetLEDc+0x1e>
		break;
		case 4:
		Led4_WR(0);
		break;
		default :
		Led0_WR(0);
    119e:	d9 98       	cbi	0x1b, 1	; 27
    11a0:	08 95       	ret
	return ;
}
//////////////////////////////////////////////////////////////////////////
void resetLED(char led_num)
{
	switch(led_num)
    11a2:	88 23       	and	r24, r24
    11a4:	e1 f3       	breq	.-8      	; 0x119e <_Z8resetLEDc+0xe>
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	d1 f7       	brne	.-12     	; 0x119e <_Z8resetLEDc+0xe>
	{
		case 0:
		Led0_WR(0);
		break;
		case 1:
		Led1_WR(0);
    11aa:	da 98       	cbi	0x1b, 2	; 27
		break;
    11ac:	08 95       	ret
		break;
		case 3:
		Led3_WR(0);
		break;
		case 4:
		Led4_WR(0);
    11ae:	df 98       	cbi	0x1b, 7	; 27
		break;
    11b0:	08 95       	ret
		break;
		case 1:
		Led1_WR(0);
		break;
		case 2:
		Led2_WR(0);
    11b2:	db 98       	cbi	0x1b, 3	; 27
		break;
    11b4:	08 95       	ret
		case 3:
		Led3_WR(0);
    11b6:	dc 98       	cbi	0x1b, 4	; 27
		break;
    11b8:	08 95       	ret

000011ba <_Z19receivedDataProcessPci>:
}

//////////////////////////////////////////////////////////////////////////

void receivedDataProcess(char* receivedPacket, int dataLength)
{	
    11ba:	ab 01       	movw	r20, r22
	serialTxDataBuffer.writeString(receivedPacket , dataLength );	
    11bc:	bc 01       	movw	r22, r24
    11be:	8e e9       	ldi	r24, 0x9E	; 158
    11c0:	92 e0       	ldi	r25, 0x02	; 2
    11c2:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_ZN4FIFO11writeStringEPci>

000011c6 <_Z17setGlobalIntrruptv>:



void setGlobalIntrrupt()
{
	intrruptFlag =1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 e2 01 	sts	0x01E2, r24
	sei();
    11cc:	78 94       	sei
    11ce:	08 95       	ret

000011d0 <_Z19resetGlobalIntrruptv>:
}

void resetGlobalIntrrupt()
{
	intrruptFlag =0;
    11d0:	10 92 e2 01 	sts	0x01E2, r1
	cli();
    11d4:	f8 94       	cli
    11d6:	08 95       	ret

000011d8 <_Z25resetAndStoreIntrruptFlagv>:
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    11d8:	80 91 e2 01 	lds	r24, 0x01E2
	intrruptFlag = 0 ;
    11dc:	10 92 e2 01 	sts	0x01E2, r1
	cli();
    11e0:	f8 94       	cli
	return temp;
}
    11e2:	08 95       	ret

000011e4 <_Z15restoreIntrruptc>:

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    11e4:	81 11       	cpse	r24, r1
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <_Z15restoreIntrruptc+0xc>
		sei();
		intrruptFlag = 1 ;
	}
	else
	{
		cli();
    11e8:	f8 94       	cli
		intrruptFlag = 0 ;
    11ea:	10 92 e2 01 	sts	0x01E2, r1
    11ee:	08 95       	ret

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
	{
		sei();
    11f0:	78 94       	sei
		intrruptFlag = 1 ;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 e2 01 	sts	0x01E2, r24
    11f8:	08 95       	ret

000011fa <_Z26processSerialReceivedBytesv>:
}


/////////////////////////////////////////
void processSerialReceivedBytes()
{
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
	static unsigned char receivedData[MAXIMUM_NUMBER_OF_DATA+4]; //commandArray[MAXIMUM_NUMBER_OF_DATA+4],
	static int counter=0;
	char temp;
	
	if (serialRxDataBuffer.getFifoFullLength() == 0 || commandRecievedFlag == 1)
    1200:	81 e2       	ldi	r24, 0x21	; 33
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN4FIFO17getFifoFullLengthEv>
    1208:	89 2b       	or	r24, r25
    120a:	09 f4       	brne	.+2      	; 0x120e <_Z26processSerialReceivedBytesv+0x14>
    120c:	84 c0       	rjmp	.+264    	; 0x1316 <_Z26processSerialReceivedBytesv+0x11c>
    120e:	80 91 e1 01 	lds	r24, 0x01E1
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	09 f4       	brne	.+2      	; 0x1218 <_Z26processSerialReceivedBytesv+0x1e>
    1216:	7f c0       	rjmp	.+254    	; 0x1316 <_Z26processSerialReceivedBytesv+0x11c>
	return;
	temp = serialRxDataBuffer.readByte();
    1218:	81 e2       	ldi	r24, 0x21	; 33
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN4FIFO8readByteEv>
	receivedData[counter] = temp;
    1220:	20 91 5f 01 	lds	r18, 0x015F
    1224:	30 91 60 01 	lds	r19, 0x0160
    1228:	f9 01       	movw	r30, r18
    122a:	ef 59       	subi	r30, 0x9F	; 159
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	80 83       	st	Z, r24
	

	if (counter == 0 && receivedData[0] != '$')
    1230:	21 15       	cp	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <_Z26processSerialReceivedBytesv+0x3e>
    1236:	5a c0       	rjmp	.+180    	; 0x12ec <_Z26processSerialReceivedBytesv+0xf2>
		counter = -1;
	if (counter == 1 && receivedData[1] != 'C')
    1238:	21 30       	cpi	r18, 0x01	; 1
    123a:	31 05       	cpc	r19, r1
    123c:	09 f0       	breq	.+2      	; 0x1240 <_Z26processSerialReceivedBytesv+0x46>
    123e:	6f c0       	rjmp	.+222    	; 0x131e <_Z26processSerialReceivedBytesv+0x124>
    1240:	80 91 62 01 	lds	r24, 0x0162
    1244:	83 34       	cpi	r24, 0x43	; 67
    1246:	41 f0       	breq	.+16     	; 0x1258 <_Z26processSerialReceivedBytesv+0x5e>
		counter = -1;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	9f ef       	ldi	r25, 0xFF	; 255
    124c:	90 93 60 01 	sts	0x0160, r25
    1250:	80 93 5f 01 	sts	0x015F, r24
    1254:	2f ef       	ldi	r18, 0xFF	; 255
    1256:	3f ef       	ldi	r19, 0xFF	; 255
	if (counter == 2 && receivedData[2] != 'M')
		counter = -1;
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
    1258:	24 30       	cpi	r18, 0x04	; 4
    125a:	31 05       	cpc	r19, r1
    125c:	0c f4       	brge	.+2      	; 0x1260 <_Z26processSerialReceivedBytesv+0x66>
    125e:	55 c0       	rjmp	.+170    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
	{
		switch(receivedData[4])
    1260:	80 91 65 01 	lds	r24, 0x0165
    1264:	8f 31       	cpi	r24, 0x1F	; 31
    1266:	09 f4       	brne	.+2      	; 0x126a <_Z26processSerialReceivedBytesv+0x70>
    1268:	1d c1       	rjmp	.+570    	; 0x14a4 <_Z26processSerialReceivedBytesv+0x2aa>
    126a:	08 f0       	brcs	.+2      	; 0x126e <_Z26processSerialReceivedBytesv+0x74>
    126c:	60 c0       	rjmp	.+192    	; 0x132e <_Z26processSerialReceivedBytesv+0x134>
    126e:	8c 31       	cpi	r24, 0x1C	; 28
    1270:	09 f4       	brne	.+2      	; 0x1274 <_Z26processSerialReceivedBytesv+0x7a>
    1272:	87 c0       	rjmp	.+270    	; 0x1382 <_Z26processSerialReceivedBytesv+0x188>
    1274:	08 f0       	brcs	.+2      	; 0x1278 <_Z26processSerialReceivedBytesv+0x7e>
    1276:	cc c0       	rjmp	.+408    	; 0x1410 <_Z26processSerialReceivedBytesv+0x216>
    1278:	81 31       	cpi	r24, 0x11	; 17
    127a:	09 f4       	brne	.+2      	; 0x127e <_Z26processSerialReceivedBytesv+0x84>
    127c:	ce c0       	rjmp	.+412    	; 0x141a <_Z26processSerialReceivedBytesv+0x220>
    127e:	8b 31       	cpi	r24, 0x1B	; 27
    1280:	09 f0       	breq	.+2      	; 0x1284 <_Z26processSerialReceivedBytesv+0x8a>
    1282:	5e c0       	rjmp	.+188    	; 0x1340 <_Z26processSerialReceivedBytesv+0x146>
			DEBUGMESSAGE("Read settings command received: %d\r\n", readSettingFlag);
			counter = -1;
			}
			break;/**/
			case BASE_STATION_SET_TIME_CMD:
			if (counter > baseStationSetTimeCommandCount + 4)
    1284:	2d 30       	cpi	r18, 0x0D	; 13
    1286:	31 05       	cpc	r19, r1
    1288:	0c f4       	brge	.+2      	; 0x128c <_Z26processSerialReceivedBytesv+0x92>
    128a:	3f c0       	rjmp	.+126    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				commandArray[0]=START_PACKET_BYTE ;
    128c:	9e e7       	ldi	r25, 0x7E	; 126
    128e:	90 93 79 01 	sts	0x0179, r25
				commandArray[1]=BASE_STATION_SET_TIME_CMD;
    1292:	80 93 7a 01 	sts	0x017A, r24
				commandArray[2] = receivedData[5];
    1296:	80 91 66 01 	lds	r24, 0x0166
    129a:	80 93 7b 01 	sts	0x017B, r24
				for (char i =0; i <baseStationSetTimeCommandCount  ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    129e:	80 91 67 01 	lds	r24, 0x0167
    12a2:	80 93 7c 01 	sts	0x017C, r24
    12a6:	80 91 68 01 	lds	r24, 0x0168
    12aa:	80 93 7d 01 	sts	0x017D, r24
    12ae:	80 91 69 01 	lds	r24, 0x0169
    12b2:	80 93 7e 01 	sts	0x017E, r24
    12b6:	80 91 6a 01 	lds	r24, 0x016A
    12ba:	80 93 7f 01 	sts	0x017F, r24
    12be:	80 91 6b 01 	lds	r24, 0x016B
    12c2:	80 93 80 01 	sts	0x0180, r24
    12c6:	80 91 6c 01 	lds	r24, 0x016C
    12ca:	80 93 81 01 	sts	0x0181, r24
    12ce:	80 91 6d 01 	lds	r24, 0x016D
    12d2:	80 93 82 01 	sts	0x0182, r24
    12d6:	80 91 6e 01 	lds	r24, 0x016E
    12da:	80 93 83 01 	sts	0x0183, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetTimeCommandCount + 3;
    12de:	8b e0       	ldi	r24, 0x0B	; 11
    12e0:	80 93 8d 01 	sts	0x018D, r24
				commandRecievedFlag =1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 e1 01 	sts	0x01E1, r24
    12ea:	0d c0       	rjmp	.+26     	; 0x1306 <_Z26processSerialReceivedBytesv+0x10c>
	return;
	temp = serialRxDataBuffer.readByte();
	receivedData[counter] = temp;
	

	if (counter == 0 && receivedData[0] != '$')
    12ec:	80 91 61 01 	lds	r24, 0x0161
    12f0:	84 32       	cpi	r24, 0x24	; 36
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <_Z26processSerialReceivedBytesv+0xfc>
    12f4:	a9 cf       	rjmp	.-174    	; 0x1248 <_Z26processSerialReceivedBytesv+0x4e>
		counter = -1;
	if (counter == 1 && receivedData[1] != 'C')
		counter = -1;
	if (counter == 2 && receivedData[2] != 'M')
		counter = -1;
	if (counter == 3 && receivedData[3] != 'D')
    12f6:	23 30       	cpi	r18, 0x03	; 3
    12f8:	31 05       	cpc	r19, r1
    12fa:	09 f0       	breq	.+2      	; 0x12fe <_Z26processSerialReceivedBytesv+0x104>
    12fc:	ad cf       	rjmp	.-166    	; 0x1258 <_Z26processSerialReceivedBytesv+0x5e>
    12fe:	80 91 64 01 	lds	r24, 0x0164
    1302:	84 34       	cpi	r24, 0x44	; 68
    1304:	11 f0       	breq	.+4      	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
				for (char i =0; i <baseStationSetTimeCommandCount  ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetTimeCommandCount + 3;
				commandRecievedFlag =1;
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255

	}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+4)
			counter = -1;
		counter++;
    130e:	30 93 60 01 	sts	0x0160, r19
    1312:	20 93 5f 01 	sts	0x015F, r18
}
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	08 95       	ret

	if (counter == 0 && receivedData[0] != '$')
		counter = -1;
	if (counter == 1 && receivedData[1] != 'C')
		counter = -1;
	if (counter == 2 && receivedData[2] != 'M')
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	49 f7       	brne	.-46     	; 0x12f6 <_Z26processSerialReceivedBytesv+0xfc>
    1324:	80 91 63 01 	lds	r24, 0x0163
    1328:	8d 34       	cpi	r24, 0x4D	; 77
    132a:	69 f7       	brne	.-38     	; 0x1306 <_Z26processSerialReceivedBytesv+0x10c>
    132c:	ee cf       	rjmp	.-36     	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
	{
		switch(receivedData[4])
    132e:	82 32       	cpi	r24, 0x22	; 34
    1330:	69 f0       	breq	.+26     	; 0x134c <_Z26processSerialReceivedBytesv+0x152>
    1332:	08 f0       	brcs	.+2      	; 0x1336 <_Z26processSerialReceivedBytesv+0x13c>
    1334:	8a c0       	rjmp	.+276    	; 0x144a <_Z26processSerialReceivedBytesv+0x250>
    1336:	80 32       	cpi	r24, 0x20	; 32
    1338:	09 f4       	brne	.+2      	; 0x133c <_Z26processSerialReceivedBytesv+0x142>
    133a:	39 c1       	rjmp	.+626    	; 0x15ae <_Z26processSerialReceivedBytesv+0x3b4>
    133c:	81 32       	cpi	r24, 0x21	; 33
    133e:	31 f0       	breq	.+12     	; 0x134c <_Z26processSerialReceivedBytesv+0x152>

		}

	}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+4)
    1340:	28 31       	cpi	r18, 0x18	; 24
    1342:	31 05       	cpc	r19, r1
    1344:	14 f3       	brlt	.-60     	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	e1 cf       	rjmp	.-62     	; 0x130e <_Z26processSerialReceivedBytesv+0x114>
				commandRecievedFlag =1;
				counter = -1 ;
			}
			break;
			case TURN_ON_OFF_LTR_CMD:
			if (counter > turnOnOffLTRCommandCount + 4)
    134c:	27 30       	cpi	r18, 0x07	; 7
    134e:	31 05       	cpc	r19, r1
    1350:	e4 f2       	brlt	.-72     	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				commandArray[0] = START_PACKET_BYTE;
    1352:	9e e7       	ldi	r25, 0x7E	; 126
    1354:	90 93 79 01 	sts	0x0179, r25
				commandArray[1] = TURN_ON_OFF_LTR_CMD;
    1358:	80 93 7a 01 	sts	0x017A, r24
				commandArray[2] =  receivedData[5];
    135c:	80 91 66 01 	lds	r24, 0x0166
    1360:	80 93 7b 01 	sts	0x017B, r24
				for (char i =0; i < turnOnOffLTRCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    1364:	80 91 67 01 	lds	r24, 0x0167
    1368:	80 93 7c 01 	sts	0x017C, r24
    136c:	80 91 68 01 	lds	r24, 0x0168
    1370:	80 93 7d 01 	sts	0x017D, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = turnOnOffLTRCommandCount + 3;
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	80 93 8d 01 	sts	0x018D, r24
				commandRecievedFlag =1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 e1 01 	sts	0x01E1, r24
    1380:	e2 cf       	rjmp	.-60     	; 0x1346 <_Z26processSerialReceivedBytesv+0x14c>
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetTimeCommandCount + 3;
				commandRecievedFlag =1;
				counter = -1 ;
			}
			case BASE_STATION_SET_POS_CMD:
			if (counter > baseStationSetPositionCommandCount + 4)
    1382:	22 31       	cpi	r18, 0x12	; 18
    1384:	31 05       	cpc	r19, r1
    1386:	0c f2       	brlt	.-126    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				commandArray[0]=START_PACKET_BYTE ;
    1388:	9e e7       	ldi	r25, 0x7E	; 126
    138a:	90 93 79 01 	sts	0x0179, r25
				commandArray[1]=BASE_STATION_SET_POS_CMD;
    138e:	80 93 7a 01 	sts	0x017A, r24
				commandArray[2] = receivedData[5];
    1392:	80 91 66 01 	lds	r24, 0x0166
    1396:	80 93 7b 01 	sts	0x017B, r24
				for (char i =0; i < baseStationSetPositionCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    139a:	80 91 67 01 	lds	r24, 0x0167
    139e:	80 93 7c 01 	sts	0x017C, r24
    13a2:	80 91 68 01 	lds	r24, 0x0168
    13a6:	80 93 7d 01 	sts	0x017D, r24
    13aa:	80 91 69 01 	lds	r24, 0x0169
    13ae:	80 93 7e 01 	sts	0x017E, r24
    13b2:	80 91 6a 01 	lds	r24, 0x016A
    13b6:	80 93 7f 01 	sts	0x017F, r24
    13ba:	80 91 6b 01 	lds	r24, 0x016B
    13be:	80 93 80 01 	sts	0x0180, r24
    13c2:	80 91 6c 01 	lds	r24, 0x016C
    13c6:	80 93 81 01 	sts	0x0181, r24
    13ca:	80 91 6d 01 	lds	r24, 0x016D
    13ce:	80 93 82 01 	sts	0x0182, r24
    13d2:	80 91 6e 01 	lds	r24, 0x016E
    13d6:	80 93 83 01 	sts	0x0183, r24
    13da:	80 91 6f 01 	lds	r24, 0x016F
    13de:	80 93 84 01 	sts	0x0184, r24
    13e2:	80 91 70 01 	lds	r24, 0x0170
    13e6:	80 93 85 01 	sts	0x0185, r24
    13ea:	80 91 71 01 	lds	r24, 0x0171
    13ee:	80 93 86 01 	sts	0x0186, r24
    13f2:	80 91 72 01 	lds	r24, 0x0172
    13f6:	80 93 87 01 	sts	0x0187, r24
    13fa:	80 91 73 01 	lds	r24, 0x0173
    13fe:	80 93 88 01 	sts	0x0188, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationSetPositionCommandCount + 3;
    1402:	80 e1       	ldi	r24, 0x10	; 16
    1404:	80 93 8d 01 	sts	0x018D, r24
				commandRecievedFlag =1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 e1 01 	sts	0x01E1, r24
    140e:	9b cf       	rjmp	.-202    	; 0x1346 <_Z26processSerialReceivedBytesv+0x14c>
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
	{
		switch(receivedData[4])
    1410:	8d 31       	cpi	r24, 0x1D	; 29
    1412:	19 f0       	breq	.+6      	; 0x141a <_Z26processSerialReceivedBytesv+0x220>
    1414:	8e 31       	cpi	r24, 0x1E	; 30
    1416:	09 f0       	breq	.+2      	; 0x141a <_Z26processSerialReceivedBytesv+0x220>
    1418:	93 cf       	rjmp	.-218    	; 0x1340 <_Z26processSerialReceivedBytesv+0x146>
				}
			
			break;
			
			case BASE_STATION_RESET_LTR_CMD:
			if (counter > baseStationResetLTRCommandCount + 4)
    141a:	26 30       	cpi	r18, 0x06	; 6
    141c:	31 05       	cpc	r19, r1
    141e:	0c f4       	brge	.+2      	; 0x1422 <_Z26processSerialReceivedBytesv+0x228>
    1420:	74 cf       	rjmp	.-280    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				commandArray[0]=START_PACKET_BYTE ;
    1422:	9e e7       	ldi	r25, 0x7E	; 126
    1424:	90 93 79 01 	sts	0x0179, r25
				commandArray[1]= BASE_STATION_RESET_LTR_CMD;
    1428:	80 93 7a 01 	sts	0x017A, r24
				commandArray[2] = receivedData[5];
    142c:	80 91 66 01 	lds	r24, 0x0166
    1430:	80 93 7b 01 	sts	0x017B, r24
				for (char i =0; i < baseStationResetLTRCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    1434:	80 91 67 01 	lds	r24, 0x0167
    1438:	80 93 7c 01 	sts	0x017C, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = baseStationResetLTRCommandCount + 3;
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	80 93 8d 01 	sts	0x018D, r24
				commandRecievedFlag =1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 93 e1 01 	sts	0x01E1, r24
    1448:	7e cf       	rjmp	.-260    	; 0x1346 <_Z26processSerialReceivedBytesv+0x14c>
	if (counter == 3 && receivedData[3] != 'D')
		counter = -1;

	if(counter>3)
	{
		switch(receivedData[4])
    144a:	85 32       	cpi	r24, 0x25	; 37
    144c:	09 f4       	brne	.+2      	; 0x1450 <_Z26processSerialReceivedBytesv+0x256>
    144e:	7e cf       	rjmp	.-260    	; 0x134c <_Z26processSerialReceivedBytesv+0x152>
    1450:	86 32       	cpi	r24, 0x26	; 38
    1452:	09 f4       	brne	.+2      	; 0x1456 <_Z26processSerialReceivedBytesv+0x25c>
    1454:	7b cf       	rjmp	.-266    	; 0x134c <_Z26processSerialReceivedBytesv+0x152>
    1456:	83 32       	cpi	r24, 0x23	; 35
    1458:	09 f0       	breq	.+2      	; 0x145c <_Z26processSerialReceivedBytesv+0x262>
    145a:	72 cf       	rjmp	.-284    	; 0x1340 <_Z26processSerialReceivedBytesv+0x146>
				commandRecievedFlag =1;
				counter = -1 ;
			}
			break;
			case SET_RANGE_OFFSET_CMD:
			if (counter > setRangeOffsetCommandCount + 4)
    145c:	29 30       	cpi	r18, 0x09	; 9
    145e:	31 05       	cpc	r19, r1
    1460:	0c f4       	brge	.+2      	; 0x1464 <_Z26processSerialReceivedBytesv+0x26a>
    1462:	53 cf       	rjmp	.-346    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				commandArray[0] = START_PACKET_BYTE ;
    1464:	9e e7       	ldi	r25, 0x7E	; 126
    1466:	90 93 79 01 	sts	0x0179, r25
				commandArray[1] = SET_RANGE_OFFSET_CMD;
    146a:	80 93 7a 01 	sts	0x017A, r24
				commandArray[2] =  receivedData[5];
    146e:	80 91 66 01 	lds	r24, 0x0166
    1472:	80 93 7b 01 	sts	0x017B, r24
				for (char i =0; i < setRangeOffsetCommandCount ; i++)
				{
					commandArray[3+i] = receivedData[6+i];
    1476:	80 91 67 01 	lds	r24, 0x0167
    147a:	80 93 7c 01 	sts	0x017C, r24
    147e:	80 91 68 01 	lds	r24, 0x0168
    1482:	80 93 7d 01 	sts	0x017D, r24
    1486:	80 91 69 01 	lds	r24, 0x0169
    148a:	80 93 7e 01 	sts	0x017E, r24
    148e:	80 91 6a 01 	lds	r24, 0x016A
    1492:	80 93 7f 01 	sts	0x017F, r24
				}
				commandArray[MAXIMUM_NUMBER_OF_DATA] = setRangeOffsetCommandCount + 3;
    1496:	87 e0       	ldi	r24, 0x07	; 7
    1498:	80 93 8d 01 	sts	0x018D, r24
				commandRecievedFlag =1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 e1 01 	sts	0x01E1, r24
    14a2:	51 cf       	rjmp	.-350    	; 0x1346 <_Z26processSerialReceivedBytesv+0x14c>
				counter = -1 ;
			}
			
			break;
			case AOUTOMATIC_SEARCH_ENABLE_CMD:
			if (counter > aoutomaticSearchEnableCommandCount + 4)
    14a4:	29 30       	cpi	r18, 0x09	; 9
    14a6:	31 05       	cpc	r19, r1
    14a8:	0c f4       	brge	.+2      	; 0x14ac <_Z26processSerialReceivedBytesv+0x2b2>
    14aa:	2f cf       	rjmp	.-418    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				minimumSearchBaseStationIndex = receivedData[5];
    14ac:	80 91 66 01 	lds	r24, 0x0166
    14b0:	80 93 df 01 	sts	0x01DF, r24
				maximumSearchBaseStationIndex = receivedData[6];
    14b4:	c0 91 67 01 	lds	r28, 0x0167
    14b8:	c0 93 de 01 	sts	0x01DE, r28
				int diff = maximumSearchBaseStationIndex - minimumSearchBaseStationIndex;
    14bc:	d0 e0       	ldi	r29, 0x00	; 0
    14be:	c8 1b       	sub	r28, r24
    14c0:	d1 09       	sbc	r29, r1
				char mode = receivedData[7];
    14c2:	10 91 68 01 	lds	r17, 0x0168
				char delay = receivedData[8];
    14c6:	e0 91 69 01 	lds	r30, 0x0169
		searchingarray[i] = -1;
}

void decodedelay(char input)
{
	searchdelaycounterH = 0;
    14ca:	10 92 99 01 	sts	0x0199, r1
    14ce:	10 92 98 01 	sts	0x0198, r1
	searchdelaycounterL = 0;
    14d2:	10 92 97 01 	sts	0x0197, r1
    14d6:	10 92 96 01 	sts	0x0196, r1
	if (input < 19) // ms
    14da:	e3 31       	cpi	r30, 0x13	; 19
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <_Z26processSerialReceivedBytesv+0x2e6>
    14de:	7b c0       	rjmp	.+246    	; 0x15d6 <_Z26processSerialReceivedBytesv+0x3dc>
	{
		searchdelaymaxH = ((uint16_t)(input+1)*5000) / 65536;
		searchdelaymaxL = ((uint16_t)(input+1)*5000) % 65536;
	}
	else if (input < 138) // sec
    14e0:	ea 38       	cpi	r30, 0x8A	; 138
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <_Z26processSerialReceivedBytesv+0x2ec>
    14e4:	9a c0       	rjmp	.+308    	; 0x161a <_Z26processSerialReceivedBytesv+0x420>
		uint32_t temp = ((uint32_t)(input-18)) * 20000;
		//uint16_t H = temp /65536;
		searchdelaymaxH = temp / 65536;
		searchdelaymaxL = temp % 65536;			
	}
	else if (input < 227) // minute
    14e6:	e3 3e       	cpi	r30, 0xE3	; 227
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <_Z26processSerialReceivedBytesv+0x2f2>
    14ea:	a7 c0       	rjmp	.+334    	; 0x163a <_Z26processSerialReceivedBytesv+0x440>
	else // hour
	{
		if (input > 255)
			input = 255;
			
		uint16_t hour = (input - 227);
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e3 5e       	subi	r30, 0xE3	; 227
    14f0:	f1 09       	sbc	r31, r1
		
		searchdelaymaxH = ((uint32_t)(72000000 * hour)) / 65536;
    14f2:	df 01       	movw	r26, r30
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	32 ea       	ldi	r19, 0xA2	; 162
    14f8:	4a e4       	ldi	r20, 0x4A	; 74
    14fa:	54 e0       	ldi	r21, 0x04	; 4
    14fc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__mulshisi3>
    1500:	90 93 95 01 	sts	0x0195, r25
    1504:	80 93 94 01 	sts	0x0194, r24
		searchdelaymaxL = ((uint32_t)(72000000 * hour)) % 65536;
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	32 ea       	ldi	r19, 0xA2	; 162
    150c:	e2 9f       	mul	r30, r18
    150e:	c0 01       	movw	r24, r0
    1510:	e3 9f       	mul	r30, r19
    1512:	90 0d       	add	r25, r0
    1514:	f2 9f       	mul	r31, r18
    1516:	90 0d       	add	r25, r0
    1518:	11 24       	eor	r1, r1
    151a:	90 93 93 01 	sts	0x0193, r25
    151e:	80 93 92 01 	sts	0x0192, r24
		
	}
	serial.putChar('X');
    1522:	68 e5       	ldi	r22, 0x58	; 88
    1524:	8f ea       	ldi	r24, 0xAF	; 175
    1526:	93 e0       	ldi	r25, 0x03	; 3
    1528:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZN6Serial7putCharEc>
	serial.put16Bit(searchdelaymaxH);
    152c:	60 91 94 01 	lds	r22, 0x0194
    1530:	70 91 95 01 	lds	r23, 0x0195
    1534:	8f ea       	ldi	r24, 0xAF	; 175
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN6Serial8put16BitEi>
	serial.put16Bit(searchdelaymaxL);
    153c:	60 91 92 01 	lds	r22, 0x0192
    1540:	70 91 93 01 	lds	r23, 0x0193
    1544:	8f ea       	ldi	r24, 0xAF	; 175
    1546:	93 e0       	ldi	r25, 0x03	; 3
    1548:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN6Serial8put16BitEi>
				char mode = receivedData[7];
				char delay = receivedData[8];
				decodedelay(delay);
				//searchdelaymax = decodedelay(delay);
				
				searchindex=-1;
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	90 93 61 00 	sts	0x0061, r25
    1554:	80 93 60 00 	sts	0x0060, r24
				
				if (mode == 'R')
    1558:	12 35       	cpi	r17, 0x52	; 82
    155a:	09 f4       	brne	.+2      	; 0x155e <_Z26processSerialReceivedBytesv+0x364>
    155c:	51 c0       	rjmp	.+162    	; 0x1600 <_Z26processSerialReceivedBytesv+0x406>
				{
					ResetSearchArray();
					searchpointer = 0;
				}
				for (int i = searchpointer; i <= searchpointer + diff;i++)
    155e:	20 91 9a 01 	lds	r18, 0x019A
    1562:	30 91 9b 01 	lds	r19, 0x019B
    1566:	c9 01       	movw	r24, r18
    1568:	c2 0f       	add	r28, r18
    156a:	d3 1f       	adc	r29, r19
    156c:	c2 17       	cp	r28, r18
    156e:	d3 07       	cpc	r29, r19
    1570:	98 f0       	brcs	.+38     	; 0x1598 <_Z26processSerialReceivedBytesv+0x39e>
    1572:	40 91 df 01 	lds	r20, 0x01DF
	}
}


/////////////////////////////////////////
void processSerialReceivedBytes()
    1576:	fc 01       	movw	r30, r24
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	e4 56       	subi	r30, 0x64	; 100
    157e:	fe 4f       	sbci	r31, 0xFE	; 254
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	42 1b       	sub	r20, r18
    1584:	53 0b       	sbc	r21, r19
    1586:	9a 01       	movw	r18, r20
    1588:	28 0f       	add	r18, r24
    158a:	39 1f       	adc	r19, r25
					searchpointer = 0;
				}
				for (int i = searchpointer; i <= searchpointer + diff;i++)
				{
					//DEBUGMESSAGE("this too. i: %d",i);
					searchingarray[i] = minimumSearchBaseStationIndex + i - searchpointer;
    158c:	21 93       	st	Z+, r18
    158e:	31 93       	st	Z+, r19
				if (mode == 'R')
				{
					ResetSearchArray();
					searchpointer = 0;
				}
				for (int i = searchpointer; i <= searchpointer + diff;i++)
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	c8 17       	cp	r28, r24
    1594:	d9 07       	cpc	r29, r25
    1596:	b8 f7       	brcc	.-18     	; 0x1586 <_Z26processSerialReceivedBytesv+0x38c>
				{
					//DEBUGMESSAGE("this too. i: %d",i);
					searchingarray[i] = minimumSearchBaseStationIndex + i - searchpointer;
				}
				searchpointer += diff+1;
    1598:	21 96       	adiw	r28, 0x01	; 1
    159a:	d0 93 9b 01 	sts	0x019B, r29
    159e:	c0 93 9a 01 	sts	0x019A, r28
				commandRecievedFlag =1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	80 93 e1 01 	sts	0x01E1, r24
				automaticSearchModeFlag = 1;
    15a8:	80 93 e0 01 	sts	0x01E0, r24
    15ac:	cc ce       	rjmp	.-616    	; 0x1346 <_Z26processSerialReceivedBytesv+0x14c>
				counter = -1 ;
			}
			
			break;
			case AOUTOMATIC_SEARCH_DISABLE_CMD:
			if (counter > aoutomaticSearchDisableCommandCount + 4)
    15ae:	27 30       	cpi	r18, 0x07	; 7
    15b0:	31 05       	cpc	r19, r1
    15b2:	0c f4       	brge	.+2      	; 0x15b6 <_Z26processSerialReceivedBytesv+0x3bc>
    15b4:	aa ce       	rjmp	.-684    	; 0x130a <_Z26processSerialReceivedBytesv+0x110>
			{
				minimumSearchBaseStationIndex = -1;
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	80 93 df 01 	sts	0x01DF, r24
				maximumSearchBaseStationIndex = -1;
    15bc:	80 93 de 01 	sts	0x01DE, r24
				searchindex = -1;
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	9f ef       	ldi	r25, 0xFF	; 255
    15c4:	90 93 61 00 	sts	0x0061, r25
    15c8:	80 93 60 00 	sts	0x0060, r24
				automaticSearchModeFlag = 0;
    15cc:	10 92 e0 01 	sts	0x01E0, r1
				commandRecievedFlag =0;
    15d0:	10 92 e1 01 	sts	0x01E1, r1
    15d4:	b8 ce       	rjmp	.-656    	; 0x1346 <_Z26processSerialReceivedBytesv+0x14c>
{
	searchdelaycounterH = 0;
	searchdelaycounterL = 0;
	if (input < 19) // ms
	{
		searchdelaymaxH = ((uint16_t)(input+1)*5000) / 65536;
    15d6:	10 92 95 01 	sts	0x0195, r1
    15da:	10 92 94 01 	sts	0x0194, r1
    15de:	8e 2f       	mov	r24, r30
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	48 e8       	ldi	r20, 0x88	; 136
    15e6:	53 e1       	ldi	r21, 0x13	; 19
    15e8:	84 9f       	mul	r24, r20
    15ea:	90 01       	movw	r18, r0
    15ec:	85 9f       	mul	r24, r21
    15ee:	30 0d       	add	r19, r0
    15f0:	94 9f       	mul	r25, r20
    15f2:	30 0d       	add	r19, r0
    15f4:	11 24       	eor	r1, r1
		searchdelaymaxL = ((uint16_t)(input+1)*5000) % 65536;
    15f6:	30 93 93 01 	sts	0x0193, r19
    15fa:	20 93 92 01 	sts	0x0192, r18
    15fe:	91 cf       	rjmp	.-222    	; 0x1522 <_Z26processSerialReceivedBytesv+0x328>
    1600:	ec e9       	ldi	r30, 0x9C	; 156
    1602:	f1 e0       	ldi	r31, 0x01	; 1
}

void ResetSearchArray()
{
	for (int i = 0; i < 32; i++)
		searchingarray[i] = -1;
    1604:	81 93       	st	Z+, r24
    1606:	91 93       	st	Z+, r25
	}
}

void ResetSearchArray()
{
	for (int i = 0; i < 32; i++)
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	ec 3d       	cpi	r30, 0xDC	; 220
    160c:	f2 07       	cpc	r31, r18
    160e:	d1 f7       	brne	.-12     	; 0x1604 <_Z26processSerialReceivedBytesv+0x40a>
				if (mode == 'R')
				{
					ResetSearchArray();
					searchpointer = 0;
				}
				for (int i = searchpointer; i <= searchpointer + diff;i++)
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	ac cf       	rjmp	.-168    	; 0x1572 <_Z26processSerialReceivedBytesv+0x378>
		searchdelaymaxH = ((uint16_t)(input+1)*5000) / 65536;
		searchdelaymaxL = ((uint16_t)(input+1)*5000) % 65536;
	}
	else if (input < 138) // sec
	{
		uint32_t temp = ((uint32_t)(input-18)) * 20000;
    161a:	ae 2f       	mov	r26, r30
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	52 97       	sbiw	r26, 0x12	; 18
    1620:	20 e2       	ldi	r18, 0x20	; 32
    1622:	3e e4       	ldi	r19, 0x4E	; 78
    1624:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__usmulhisi3>
		//uint16_t H = temp /65536;
		searchdelaymaxH = temp / 65536;
    1628:	90 93 95 01 	sts	0x0195, r25
    162c:	80 93 94 01 	sts	0x0194, r24
		searchdelaymaxL = temp % 65536;			
    1630:	70 93 93 01 	sts	0x0193, r23
    1634:	60 93 92 01 	sts	0x0192, r22
    1638:	74 cf       	rjmp	.-280    	; 0x1522 <_Z26processSerialReceivedBytesv+0x328>
	}
	else if (input < 227) // minute
	{
		//if (input <197)
		//{
			searchdelaymaxH = ((uint32_t)(input - 137) * 1200000) /65536;
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	e9 58       	subi	r30, 0x89	; 137
    163e:	f1 09       	sbc	r31, r1
    1640:	df 01       	movw	r26, r30
    1642:	20 e8       	ldi	r18, 0x80	; 128
    1644:	3f e4       	ldi	r19, 0x4F	; 79
    1646:	42 e1       	ldi	r20, 0x12	; 18
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__mulshisi3>
    164e:	90 93 95 01 	sts	0x0195, r25
    1652:	80 93 94 01 	sts	0x0194, r24
			searchdelaymaxL = ((uint16_t)(input - 137) * 1200000);		
    1656:	20 e8       	ldi	r18, 0x80	; 128
    1658:	3f e4       	ldi	r19, 0x4F	; 79
    165a:	e2 9f       	mul	r30, r18
    165c:	c0 01       	movw	r24, r0
    165e:	e3 9f       	mul	r30, r19
    1660:	90 0d       	add	r25, r0
    1662:	f2 9f       	mul	r31, r18
    1664:	90 0d       	add	r25, r0
    1666:	11 24       	eor	r1, r1
    1668:	90 93 93 01 	sts	0x0193, r25
    166c:	80 93 92 01 	sts	0x0192, r24
    1670:	58 cf       	rjmp	.-336    	; 0x1522 <_Z26processSerialReceivedBytesv+0x328>

00001672 <_Z36madeGetStatusCommandBaseOnMACAddressc>:
			
}

void madeGetStatusCommandBaseOnMACAddress(char macNumber)
{
	commandArray[0]=START_PACKET_BYTE ;
    1672:	9e e7       	ldi	r25, 0x7E	; 126
    1674:	90 93 79 01 	sts	0x0179, r25
	commandArray[1]=GET_STATUS_BASED_ON_MAC_CMD;
    1678:	94 e2       	ldi	r25, 0x24	; 36
    167a:	90 93 7a 01 	sts	0x017A, r25
	commandArray[2]= macNumber;
    167e:	80 93 7b 01 	sts	0x017B, r24
	commandArray[MAXIMUM_NUMBER_OF_DATA] = 3;	
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	80 93 8d 01 	sts	0x018D, r24
    1688:	08 95       	ret

0000168a <_Z20sendAlliveSerialDatav>:
}


void sendAlliveSerialData()
{
	if (serialTxDataBuffer.getFifoFullLength() == 0 )
    168a:	8e e9       	ldi	r24, 0x9E	; 158
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN4FIFO17getFifoFullLengthEv>
    1692:	89 2b       	or	r24, r25
    1694:	09 f0       	breq	.+2      	; 0x1698 <_Z20sendAlliveSerialDatav+0xe>
    1696:	08 95       	ret
	{
		serialTxDataBuffer.writeByte(START_PACKET_BYTE);
    1698:	6e e7       	ldi	r22, 0x7E	; 126
    169a:	8e e9       	ldi	r24, 0x9E	; 158
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
		serialTxDataBuffer.writeByte(BIN_KEEP_ALIVE);
    16a2:	69 e0       	ldi	r22, 0x09	; 9
    16a4:	8e e9       	ldi	r24, 0x9E	; 158
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
		serialTxDataBuffer.writeString("I AM ALIVE" , sizeof("I AM ALIVE"));	
    16ac:	4b e0       	ldi	r20, 0x0B	; 11
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	62 e6       	ldi	r22, 0x62	; 98
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	8e e9       	ldi	r24, 0x9E	; 158
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_ZN4FIFO11writeStringEPci>

000016bc <_Z16ResetSearchArrayv>:
	}
}

void ResetSearchArray()
{
    16bc:	ec e9       	ldi	r30, 0x9C	; 156
    16be:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < 32; i++)
		searchingarray[i] = -1;
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	9f ef       	ldi	r25, 0xFF	; 255
    16c4:	81 93       	st	Z+, r24
    16c6:	91 93       	st	Z+, r25
	}
}

void ResetSearchArray()
{
	for (int i = 0; i < 32; i++)
    16c8:	21 e0       	ldi	r18, 0x01	; 1
    16ca:	ec 3d       	cpi	r30, 0xDC	; 220
    16cc:	f2 07       	cpc	r31, r18
    16ce:	d1 f7       	brne	.-12     	; 0x16c4 <_Z16ResetSearchArrayv+0x8>
		searchingarray[i] = -1;
}
    16d0:	08 95       	ret

000016d2 <_Z41__static_initialization_and_destruction_0ii.part.0>:

//ADF7020 Board0 ;
Transceiver transceiver;

FIFO serialTxDataBuffer,serialRxDataBuffer;
StationInfo stationInfo;
    16d2:	83 ee       	ldi	r24, 0xE3	; 227
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN11StationInfoD1Ev>
Packet packetProcessor;

//ADF7020 Board0 ;
Transceiver transceiver;

FIFO serialTxDataBuffer,serialRxDataBuffer;
    16da:	81 e2       	ldi	r24, 0x21	; 33
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN4FIFOD1Ev>
    16e2:	8e e9       	ldi	r24, 0x9E	; 158
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN4FIFOD1Ev>
//Message message;
//Station stations[10];
Packet packetProcessor;

//ADF7020 Board0 ;
Transceiver transceiver;
    16ea:	8b e1       	ldi	r24, 0x1B	; 27
    16ec:	93 e0       	ldi	r25, 0x03	; 3
    16ee:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN11TransceiverD1Ev>
#include "ADF7020.h"

Serial serial;
//Message message;
//Station stations[10];
Packet packetProcessor;
    16f2:	8a ea       	ldi	r24, 0xAA	; 170
    16f4:	93 e0       	ldi	r25, 0x03	; 3
    16f6:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <_ZN6PacketD1Ev>

000016fa <_GLOBAL__sub_I_serial>:
    16fa:	8a ea       	ldi	r24, 0xAA	; 170
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_ZN6PacketC1Ev>

//ADF7020 Board0 ;
Transceiver transceiver;
    1702:	8b e1       	ldi	r24, 0x1B	; 27
    1704:	93 e0       	ldi	r25, 0x03	; 3
    1706:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN11TransceiverC1Ev>

FIFO serialTxDataBuffer,serialRxDataBuffer;
    170a:	8e e9       	ldi	r24, 0x9E	; 158
    170c:	92 e0       	ldi	r25, 0x02	; 2
    170e:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN4FIFOC1Ev>
    1712:	81 e2       	ldi	r24, 0x21	; 33
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN4FIFOC1Ev>
StationInfo stationInfo;
    171a:	83 ee       	ldi	r24, 0xE3	; 227
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <_ZN11StationInfoC1Ev>

00001722 <_GLOBAL__sub_D_serial>:
uint16_t searchdelaycounterH, searchdelaycounterL;
uint16_t searchdelaymaxH, searchdelaymaxL;

//int32_t searchdelayhour=-1,searchdelayhourmax; //each 20counter = 1ms

    1722:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <_Z41__static_initialization_and_destruction_0ii.part.0>

00001726 <main>:
char receivedPacket[PACKET_LENGTH +1] , commandPacket[PACKET_LENGTH + 1];



int main(void)
{
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	00 d0       	rcall	.+0      	; 0x172c <main+0x6>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	
	int dataLength ;
	unsigned char baseStationNumber;
	uint8_t temp =0;
	//_delay_ms(5000);
	micro_Initialize();
    1730:	0e 94 5f 08 	call	0x10be	; 0x10be <_Z16micro_Initializev>
	resetGlobalIntrrupt();
    1734:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_Z19resetGlobalIntrruptv>
	ResetSearchArray();
    1738:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_Z16ResetSearchArrayv>
	//{
		//DDRB = 0xFF;
		//PORTB =0xFF;
	//}
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	8b e1       	ldi	r24, 0x1B	; 27
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN11Transceiver7setModeE14TranceiverMode>
	for (i=0;i<3 ;i++)
	{
		setLED(i);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z6setLEDc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    174c:	2f e7       	ldi	r18, 0x7F	; 127
    174e:	68 e3       	ldi	r22, 0x38	; 56
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	21 50       	subi	r18, 0x01	; 1
    1754:	60 40       	sbci	r22, 0x00	; 0
    1756:	80 40       	sbci	r24, 0x00	; 0
    1758:	e1 f7       	brne	.-8      	; 0x1752 <main+0x2c>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <main+0x36>
    175c:	00 00       	nop
		_delay_ms(50);
		resetLED(i);
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0e 94 c8 08 	call	0x1190	; 0x1190 <_Z8resetLEDc>
    1764:	9f e7       	ldi	r25, 0x7F	; 127
    1766:	a8 e3       	ldi	r26, 0x38	; 56
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	91 50       	subi	r25, 0x01	; 1
    176c:	a0 40       	sbci	r26, 0x00	; 0
    176e:	20 40       	sbci	r18, 0x00	; 0
    1770:	e1 f7       	brne	.-8      	; 0x176a <main+0x44>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <main+0x4e>
    1774:	00 00       	nop
	//}
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
	for (i=0;i<3 ;i++)
	{
		setLED(i);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z6setLEDc>
    177c:	6f e7       	ldi	r22, 0x7F	; 127
    177e:	88 e3       	ldi	r24, 0x38	; 56
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	61 50       	subi	r22, 0x01	; 1
    1784:	80 40       	sbci	r24, 0x00	; 0
    1786:	90 40       	sbci	r25, 0x00	; 0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <main+0x5c>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <main+0x66>
    178c:	00 00       	nop
		_delay_ms(50);
		resetLED(i);
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	0e 94 c8 08 	call	0x1190	; 0x1190 <_Z8resetLEDc>
    1794:	af e7       	ldi	r26, 0x7F	; 127
    1796:	28 e3       	ldi	r18, 0x38	; 56
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	a1 50       	subi	r26, 0x01	; 1
    179c:	20 40       	sbci	r18, 0x00	; 0
    179e:	60 40       	sbci	r22, 0x00	; 0
    17a0:	e1 f7       	brne	.-8      	; 0x179a <main+0x74>
    17a2:	00 c0       	rjmp	.+0      	; 0x17a4 <main+0x7e>
    17a4:	00 00       	nop
	//}
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
	for (i=0;i<3 ;i++)
	{
		setLED(i);
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z6setLEDc>
    17ac:	8f e7       	ldi	r24, 0x7F	; 127
    17ae:	98 e3       	ldi	r25, 0x38	; 56
    17b0:	a1 e0       	ldi	r26, 0x01	; 1
    17b2:	81 50       	subi	r24, 0x01	; 1
    17b4:	90 40       	sbci	r25, 0x00	; 0
    17b6:	a0 40       	sbci	r26, 0x00	; 0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <main+0x8c>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <main+0x96>
    17bc:	00 00       	nop
		_delay_ms(50);
		resetLED(i);
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	0e 94 c8 08 	call	0x1190	; 0x1190 <_Z8resetLEDc>
    17c4:	2f e7       	ldi	r18, 0x7F	; 127
    17c6:	68 e3       	ldi	r22, 0x38	; 56
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	21 50       	subi	r18, 0x01	; 1
    17cc:	60 40       	sbci	r22, 0x00	; 0
    17ce:	80 40       	sbci	r24, 0x00	; 0
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <main+0xa4>
    17d2:	00 c0       	rjmp	.+0      	; 0x17d4 <main+0xae>
    17d4:	00 00       	nop
    17d6:	9f ef       	ldi	r25, 0xFF	; 255
    17d8:	a0 e7       	ldi	r26, 0x70	; 112
    17da:	22 e0       	ldi	r18, 0x02	; 2
    17dc:	91 50       	subi	r25, 0x01	; 1
    17de:	a0 40       	sbci	r26, 0x00	; 0
    17e0:	20 40       	sbci	r18, 0x00	; 0
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <main+0xb6>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <main+0xc0>
    17e6:	00 00       	nop
		_delay_ms(50);
	}
	
	_delay_ms(100);
	if( (PIND & 0x04) >> 2)
    17e8:	82 99       	sbic	0x10, 2	; 16
    17ea:	3a c1       	rjmp	.+628    	; 0x1a60 <main+0x33a>
    17ec:	6f ef       	ldi	r22, 0xFF	; 255
    17ee:	80 e7       	ldi	r24, 0x70	; 112
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	61 50       	subi	r22, 0x01	; 1
    17f4:	80 40       	sbci	r24, 0x00	; 0
    17f6:	90 40       	sbci	r25, 0x00	; 0
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <main+0xcc>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <main+0xd6>
    17fc:	00 00       	nop
	setLED(0);

	_delay_ms(100);
	setLED(0);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z6setLEDc>
	setGlobalIntrrupt();
    1804:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z17setGlobalIntrruptv>
	////else
	//////test_index2 = temp;
	//serial.putChar(temp);
	////serial.putChar(test_index2);
	//}
	 minimumSearchBaseStationIndex =-1; 
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	80 93 df 01 	sts	0x01DF, r24
	 maximumSearchBaseStationIndex =-1;
    180e:	80 93 de 01 	sts	0x01DE, r24
	 automaticSearchModeFlag = 0;	 
    1812:	10 92 e0 01 	sts	0x01E0, r1



int main(void)
{
	char interruptFlag=0 , answerReceivedFlag = 0 ;
    1816:	d1 2c       	mov	r13, r1
								//serial.putChar(searchingarray[searchindex]);
								madeGetStatusCommandBaseOnMACAddress(searchingarray[searchindex]);
							}
							else
							{
								searchindex = -1;
    1818:	ee 24       	eor	r14, r14
    181a:	ea 94       	dec	r14
    181c:	fe 2c       	mov	r15, r14
	 maximumSearchBaseStationIndex =-1;
	 automaticSearchModeFlag = 0;	 
	while (1)
	{

		processSerialReceivedBytes();
    181e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z26processSerialReceivedBytesv>
		
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
    1822:	8e e9       	ldi	r24, 0x9E	; 158
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN4FIFO17getFifoFullLengthEv>
    182a:	18 16       	cp	r1, r24
    182c:	19 06       	cpc	r1, r25
    182e:	34 f4       	brge	.+12     	; 0x183c <main+0x116>
			if (serial.isSerialTxEmpty())
    1830:	8f ea       	ldi	r24, 0xAF	; 175
    1832:	93 e0       	ldi	r25, 0x03	; 3
    1834:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN6Serial15isSerialTxEmptyEv>
    1838:	81 11       	cpse	r24, r1
    183a:	48 c0       	rjmp	.+144    	; 0x18cc <main+0x1a6>
				serial.putChar(serialTxDataBuffer.readByte());
				
		if(commandRecievedFlag)
    183c:	80 91 e1 01 	lds	r24, 0x01E1
    1840:	81 11       	cpse	r24, r1
    1842:	14 c0       	rjmp	.+40     	; 0x186c <main+0x146>
			ToggleLED(0);
		if (transceiver.isReceiver())
    1844:	8b e1       	ldi	r24, 0x1B	; 27
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN11Transceiver10isReceiverEv>
    184c:	81 11       	cpse	r24, r1
    184e:	17 c0       	rjmp	.+46     	; 0x187e <main+0x158>
				
			}
		}
		else
		{
			setLED(2);
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z6setLEDc>
			if (transceiver.getFifoFullLength() == 0 )
    1856:	8b e1       	ldi	r24, 0x1B	; 27
    1858:	93 e0       	ldi	r25, 0x03	; 3
    185a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN11Transceiver17getFifoFullLengthEv>
    185e:	89 2b       	or	r24, r25
    1860:	f1 f6       	brne	.-68     	; 0x181e <main+0xf8>
				transceiver.changeMode();	
    1862:	8b e1       	ldi	r24, 0x1B	; 27
    1864:	93 e0       	ldi	r25, 0x03	; 3
    1866:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN11Transceiver10changeModeEv>
    186a:	d9 cf       	rjmp	.-78     	; 0x181e <main+0xf8>
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
			if (serial.isSerialTxEmpty())
				serial.putChar(serialTxDataBuffer.readByte());
				
		if(commandRecievedFlag)
			ToggleLED(0);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	0e 94 85 08 	call	0x110a	; 0x110a <_Z9ToggleLEDc>
		if (transceiver.isReceiver())
    1872:	8b e1       	ldi	r24, 0x1B	; 27
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN11Transceiver10isReceiverEv>
    187a:	88 23       	and	r24, r24
    187c:	49 f3       	breq	.-46     	; 0x1850 <main+0x12a>
		{
			
			if (transceiver.isPreambleDetected())
    187e:	8b e1       	ldi	r24, 0x1B	; 27
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN11Transceiver18isPreambleDetectedEv>
    1886:	81 11       	cpse	r24, r1
    1888:	50 c0       	rjmp	.+160    	; 0x192a <main+0x204>
			{
				rssivalue = transceiver.adfReadback(RSSI_READBACK);
				//rssivalue = 0x34E5;
			}
			
			if (transceiver.getFifoFullLength() > PACKET_LENGTH - 1  )
    188a:	8b e1       	ldi	r24, 0x1B	; 27
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN11Transceiver17getFifoFullLengthEv>
    1892:	82 34       	cpi	r24, 0x42	; 66
    1894:	91 05       	cpc	r25, r1
    1896:	20 f5       	brcc	.+72     	; 0x18e0 <main+0x1ba>
					receivedDataProcess(receivedPacket , dataLength);
					answerReceivedFlag = 1;
				}
				
			}
			else if ((timeoutCounter > 2500) || answerReceivedFlag )   //timeout counter must be bigger than 1889 for baudrate 9600;
    1898:	20 91 dc 01 	lds	r18, 0x01DC
    189c:	30 91 dd 01 	lds	r19, 0x01DD
    18a0:	25 3c       	cpi	r18, 0xC5	; 197
    18a2:	39 40       	sbci	r19, 0x09	; 9
    18a4:	18 f4       	brcc	.+6      	; 0x18ac <main+0x186>
    18a6:	dd 20       	and	r13, r13
    18a8:	09 f4       	brne	.+2      	; 0x18ac <main+0x186>
    18aa:	b9 cf       	rjmp	.-142    	; 0x181e <main+0xf8>
			{
				if(!commandRecievedFlag)
    18ac:	80 91 e1 01 	lds	r24, 0x01E1
    18b0:	81 11       	cpse	r24, r1
    18b2:	84 c0       	rjmp	.+264    	; 0x19bc <main+0x296>
				{
					if (automaticSearchModeFlag)
    18b4:	80 91 e0 01 	lds	r24, 0x01E0
    18b8:	81 11       	cpse	r24, r1
    18ba:	a3 c0       	rjmp	.+326    	; 0x1a02 <main+0x2dc>
					}
					
				}

				answerReceivedFlag = 0;
				timeoutCounter =0;
    18bc:	10 92 dd 01 	sts	0x01DD, r1
    18c0:	10 92 dc 01 	sts	0x01DC, r1
					transceiver.writePacket(commandPacket);
					commandRecievedFlag	= 0;
					restoreIntrrupt(interruptFlag);
				}
				else
					sendAlliveSerialData();
    18c4:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20sendAlliveSerialDatav>
						//serialTxDataBuffer.writeByte(0);
					}
					
				}

				answerReceivedFlag = 0;
    18c8:	d1 2c       	mov	r13, r1
    18ca:	a9 cf       	rjmp	.-174    	; 0x181e <main+0xf8>

		processSerialReceivedBytes();
		
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
			if (serial.isSerialTxEmpty())
				serial.putChar(serialTxDataBuffer.readByte());
    18cc:	8e e9       	ldi	r24, 0x9E	; 158
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN4FIFO8readByteEv>
    18d4:	68 2f       	mov	r22, r24
    18d6:	8f ea       	ldi	r24, 0xAF	; 175
    18d8:	93 e0       	ldi	r25, 0x03	; 3
    18da:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZN6Serial7putCharEc>
    18de:	ae cf       	rjmp	.-164    	; 0x183c <main+0x116>
			}
			
			if (transceiver.getFifoFullLength() > PACKET_LENGTH - 1  )
			{
				
				transceiver.readReceivedPacket(receivedPacket);
    18e0:	65 ef       	ldi	r22, 0xF5	; 245
    18e2:	73 e0       	ldi	r23, 0x03	; 3
    18e4:	8b e1       	ldi	r24, 0x1B	; 27
    18e6:	93 e0       	ldi	r25, 0x03	; 3
    18e8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <_ZN11Transceiver18readReceivedPacketEPc>
				resetLED(2);
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	0e 94 c8 08 	call	0x1190	; 0x1190 <_Z8resetLEDc>
				
				if (packetProcessor.extractData(receivedPacket , dataLength))
    18f2:	ae 01       	movw	r20, r28
    18f4:	4f 5f       	subi	r20, 0xFF	; 255
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
    18f8:	65 ef       	ldi	r22, 0xF5	; 245
    18fa:	73 e0       	ldi	r23, 0x03	; 3
    18fc:	8a ea       	ldi	r24, 0xAA	; 170
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_ZN6Packet11extractDataEPcRi>
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <main+0x1e4>
    1908:	8a cf       	rjmp	.-236    	; 0x181e <main+0xf8>
				{			
					ToggleLED(1);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 85 08 	call	0x110a	; 0x110a <_Z9ToggleLEDc>
					StationInfoStructure* structPtr = (StationInfoStructure*) receivedPacket;
					structPtr->rssiCenterStation = rssivalue ;
    1910:	10 93 1c 04 	sts	0x041C, r17
    1914:	00 93 1b 04 	sts	0x041B, r16
					receivedDataProcess(receivedPacket , dataLength);
    1918:	69 81       	ldd	r22, Y+1	; 0x01
    191a:	7a 81       	ldd	r23, Y+2	; 0x02
    191c:	85 ef       	ldi	r24, 0xF5	; 245
    191e:	93 e0       	ldi	r25, 0x03	; 3
    1920:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_Z19receivedDataProcessPci>
					answerReceivedFlag = 1;
    1924:	dd 24       	eor	r13, r13
    1926:	d3 94       	inc	r13
    1928:	7a cf       	rjmp	.-268    	; 0x181e <main+0xf8>
		if (transceiver.isReceiver())
		{
			
			if (transceiver.isPreambleDetected())
			{
				rssivalue = transceiver.adfReadback(RSSI_READBACK);
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	8b e1       	ldi	r24, 0x1B	; 27
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZN11Transceiver11adfReadbackEc>
    1934:	8c 01       	movw	r16, r24
    1936:	a9 cf       	rjmp	.-174    	; 0x188a <main+0x164>
						
						sendAlliveSerialData();

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
						{
							ToggleLED(1);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	0e 94 85 08 	call	0x110a	; 0x110a <_Z9ToggleLEDc>
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
    193e:	e0 91 60 00 	lds	r30, 0x0060
    1942:	f0 91 61 00 	lds	r31, 0x0061
    1946:	cf 01       	movw	r24, r30
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	9c 01       	movw	r18, r24
    194c:	40 91 9a 01 	lds	r20, 0x019A
    1950:	50 91 9b 01 	lds	r21, 0x019B
    1954:	48 17       	cp	r20, r24
    1956:	59 07       	cpc	r21, r25
    1958:	d0 f0       	brcs	.+52     	; 0x198e <main+0x268>
							{
								//serial.getChar(searchingarray[i]);
								if (searchingarray[i] != -1)
    195a:	dc 01       	movw	r26, r24
    195c:	aa 0f       	add	r26, r26
    195e:	bb 1f       	adc	r27, r27
    1960:	a4 56       	subi	r26, 0x64	; 100
    1962:	be 4f       	sbci	r27, 0xFE	; 254
    1964:	6d 91       	ld	r22, X+
    1966:	7c 91       	ld	r23, X
    1968:	6f 3f       	cpi	r22, 0xFF	; 255
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	09 f0       	breq	.+2      	; 0x1970 <main+0x24a>
    196e:	65 c0       	rjmp	.+202    	; 0x1a3a <main+0x314>

char receivedPacket[PACKET_LENGTH +1] , commandPacket[PACKET_LENGTH + 1];



int main(void)
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	e0 56       	subi	r30, 0x60	; 96
    1976:	fe 4f       	sbci	r31, 0xFE	; 254
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <main+0x25e>
							ToggleLED(1);
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
							{
								//serial.getChar(searchingarray[i]);
								if (searchingarray[i] != -1)
    197a:	81 91       	ld	r24, Z+
    197c:	91 91       	ld	r25, Z+
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	09 f0       	breq	.+2      	; 0x1984 <main+0x25e>
    1982:	5c c0       	rjmp	.+184    	; 0x1a3c <main+0x316>

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
						{
							ToggleLED(1);
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
    1984:	2f 5f       	subi	r18, 0xFF	; 255
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	42 17       	cp	r20, r18
    198a:	53 07       	cpc	r21, r19
    198c:	b0 f7       	brcc	.-20     	; 0x197a <main+0x254>
								//serial.putChar(searchingarray[searchindex]);
								madeGetStatusCommandBaseOnMACAddress(searchingarray[searchindex]);
							}
							else
							{
								searchindex = -1;
    198e:	f0 92 61 00 	sts	0x0061, r15
    1992:	e0 92 60 00 	sts	0x0060, r14
								searchdelaycounterH = searchdelaymaxH;
    1996:	80 91 94 01 	lds	r24, 0x0194
    199a:	90 91 95 01 	lds	r25, 0x0195
    199e:	90 93 99 01 	sts	0x0199, r25
    19a2:	80 93 98 01 	sts	0x0198, r24
								searchdelaycounterL = searchdelaymaxL;
    19a6:	80 91 92 01 	lds	r24, 0x0192
    19aa:	90 91 93 01 	lds	r25, 0x0193
    19ae:	90 93 97 01 	sts	0x0197, r25
    19b2:	80 93 96 01 	sts	0x0196, r24
							}
														
							commandRecievedFlag = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 e1 01 	sts	0x01E1, r24
					}
					
				}

				answerReceivedFlag = 0;
				timeoutCounter =0;
    19bc:	10 92 dd 01 	sts	0x01DD, r1
    19c0:	10 92 dc 01 	sts	0x01DC, r1
				
				if (commandRecievedFlag)
				{
					interruptFlag = resetAndStoreIntrruptFlag();
    19c4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
    19c8:	d8 2e       	mov	r13, r24
					transceiver.changeMode();
    19ca:	8b e1       	ldi	r24, 0x1B	; 27
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN11Transceiver10changeModeEv>
					
					packetProcessor.createPacket(commandArray , commandArray[MAXIMUM_NUMBER_OF_DATA] , commandPacket);
    19d2:	40 91 8d 01 	lds	r20, 0x018D
    19d6:	22 eb       	ldi	r18, 0xB2	; 178
    19d8:	33 e0       	ldi	r19, 0x03	; 3
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	69 e7       	ldi	r22, 0x79	; 121
    19de:	71 e0       	ldi	r23, 0x01	; 1
    19e0:	8a ea       	ldi	r24, 0xAA	; 170
    19e2:	93 e0       	ldi	r25, 0x03	; 3
    19e4:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN6Packet12createPacketEPciS0_>
					transceiver.writePacket(commandPacket);
    19e8:	62 eb       	ldi	r22, 0xB2	; 178
    19ea:	73 e0       	ldi	r23, 0x03	; 3
    19ec:	8b e1       	ldi	r24, 0x1B	; 27
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN11Transceiver11writePacketEPc>
					commandRecievedFlag	= 0;
    19f4:	10 92 e1 01 	sts	0x01E1, r1
					restoreIntrrupt(interruptFlag);
    19f8:	8d 2d       	mov	r24, r13
    19fa:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
						//serialTxDataBuffer.writeByte(0);
					}
					
				}

				answerReceivedFlag = 0;
    19fe:	d1 2c       	mov	r13, r1
    1a00:	0e cf       	rjmp	.-484    	; 0x181e <main+0xf8>
						{
							;//serialTxDataBuffer.writeString("$CMD" , sizeof("$CMD"));
							//serialTxDataBuffer.writeByte(0);
						}
						
						sendAlliveSerialData();
    1a02:	0e 94 45 0b 	call	0x168a	; 0x168a <_Z20sendAlliveSerialDatav>

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
    1a06:	80 91 96 01 	lds	r24, 0x0196
    1a0a:	90 91 97 01 	lds	r25, 0x0197
    1a0e:	89 2b       	or	r24, r25
    1a10:	39 f4       	brne	.+14     	; 0x1a20 <main+0x2fa>
    1a12:	80 91 98 01 	lds	r24, 0x0198
    1a16:	90 91 99 01 	lds	r25, 0x0199
    1a1a:	89 2b       	or	r24, r25
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <main+0x2fa>
    1a1e:	8c cf       	rjmp	.-232    	; 0x1938 <main+0x212>
							//if (searchdelaycounter > -1)
								//searchdelaycounter--;
							//else
								//searchdelaycounter = searchdelaymax;
							//if (searchdelaycounterH == 0)
							ToggleLED(2);
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	0e 94 85 08 	call	0x110a	; 0x110a <_Z9ToggleLEDc>
    1a26:	80 91 e1 01 	lds	r24, 0x01E1
					}
					
				}

				answerReceivedFlag = 0;
				timeoutCounter =0;
    1a2a:	10 92 dd 01 	sts	0x01DD, r1
    1a2e:	10 92 dc 01 	sts	0x01DC, r1
				
				if (commandRecievedFlag)
    1a32:	88 23       	and	r24, r24
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <main+0x312>
    1a36:	46 cf       	rjmp	.-372    	; 0x18c4 <main+0x19e>
    1a38:	c5 cf       	rjmp	.-118    	; 0x19c4 <main+0x29e>

						if (searchdelaycounterL <= 0 && searchdelaycounterH <= 0)
						{
							ToggleLED(1);
							int nextindex = -1;
							for (int i = searchindex+1; i <= searchpointer; i++)
    1a3a:	9c 01       	movw	r18, r24
								{
									nextindex = i;
									break;
								}
							}
							if (nextindex != -1)
    1a3c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	38 07       	cpc	r19, r24
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <main+0x320>
    1a44:	a4 cf       	rjmp	.-184    	; 0x198e <main+0x268>
							{
								searchindex = nextindex;
    1a46:	30 93 61 00 	sts	0x0061, r19
    1a4a:	20 93 60 00 	sts	0x0060, r18
								//serial.putChar('X');
								//serial.putChar(searchindex);
								//serial.putChar(searchingarray[searchindex]);
								madeGetStatusCommandBaseOnMACAddress(searchingarray[searchindex]);
    1a4e:	f9 01       	movw	r30, r18
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	e4 56       	subi	r30, 0x64	; 100
    1a56:	fe 4f       	sbci	r31, 0xFE	; 254
    1a58:	80 81       	ld	r24, Z
    1a5a:	0e 94 39 0b 	call	0x1672	; 0x1672 <_Z36madeGetStatusCommandBaseOnMACAddressc>
    1a5e:	ab cf       	rjmp	.-170    	; 0x19b6 <main+0x290>
		_delay_ms(50);
	}
	
	_delay_ms(100);
	if( (PIND & 0x04) >> 2)
	setLED(0);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z6setLEDc>
    1a66:	c2 ce       	rjmp	.-636    	; 0x17ec <main+0xc6>

00001a68 <_ZN6PacketC1Ev>:
#include "GlobalVariables.h"

// default constructor
Packet::Packet()
{
	header[0]=0x11;
    1a68:	21 e1       	ldi	r18, 0x11	; 17
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	24 83       	std	Z+4, r18	; 0x04
    1a6e:	08 95       	ret

00001a70 <_ZN6PacketD1Ev>:
	//header = {0x11,0x22,0x33,0x44,0x55,0x66};
	//preamble ={0x12,0x34,0x56};
} //Packet

// default destructor
Packet::~Packet()
    1a70:	08 95       	ret

00001a72 <_ZN6Packet12createPacketEPciS0_>:
{
} //~Packet

void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ff 92       	push	r15
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
	unsigned char i;
	crcPacket =0;
    1a80:	dc 01       	movw	r26, r24
    1a82:	13 96       	adiw	r26, 0x03	; 3
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	12 97       	sbiw	r26, 0x02	; 2
	if (dataLength > DATA_LENGTH )
    1a8a:	4e 33       	cpi	r20, 0x3E	; 62
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	88 f4       	brcc	.+34     	; 0x1ab2 <_ZN6Packet12createPacketEPciS0_+0x40>
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
    1a90:	41 15       	cp	r20, r1
    1a92:	51 05       	cpc	r21, r1
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <_ZN6Packet12createPacketEPciS0_+0x26>
    1a96:	50 c0       	rjmp	.+160    	; 0x1b38 <_ZN6Packet12createPacketEPciS0_+0xc6>
    1a98:	f9 01       	movw	r30, r18
    1a9a:	82 e4       	ldi	r24, 0x42	; 66
		//packetString[21] =0xFF;
	}
	else
	for (i=0 ; i<PACKET_LENGTH ; i++ )
	{
		packetString[i]= 0x00;
    1a9c:	11 92       	st	Z+, r1
    1a9e:	81 50       	subi	r24, 0x01	; 1
		packetString[PACKET_LENGTH  - 2 ] = (crcPacket >> 8) ;
		packetString[PACKET_LENGTH - 1 ] = (crcPacket & 0xFF );
		//packetString[21] =0xFF;
	}
	else
	for (i=0 ; i<PACKET_LENGTH ; i++ )
    1aa0:	e9 f7       	brne	.-6      	; 0x1a9c <_ZN6Packet12createPacketEPciS0_+0x2a>
	{
		packetString[i]= 0x00;
	}
	
	
}
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	08 95       	ret
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
	{
		for (i=0; i < PACKET_HEADER_NUM ; i++)
		{
			packetString[i] = header[i];
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	40 83       	st	Z, r20
		}
		
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
    1aba:	11 82       	std	Z+1, r1	; 0x01
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
    1abc:	4d e3       	ldi	r20, 0x3D	; 61
    1abe:	42 83       	std	Z+2, r20	; 0x02
    1ac0:	10 e4       	ldi	r17, 0x40	; 64
void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
	unsigned char i;
	crcPacket =0;
	if (dataLength > DATA_LENGTH )
		dataLength = DATA_LENGTH;
    1ac2:	4d e3       	ldi	r20, 0x3D	; 61
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
Packet::~Packet()
{
} //~Packet

void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
    1ac6:	00 e0       	ldi	r16, 0x00	; 0
    1ac8:	a0 e0       	ldi	r26, 0x00	; 0
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
		
		for (i=0; i < dataLength ; i++)
		{
			crcPacket += dataString[i];
    1acc:	6b 01       	movw	r12, r22
    1ace:	ca 0e       	add	r12, r26
    1ad0:	db 1e       	adc	r13, r27
    1ad2:	f6 01       	movw	r30, r12
    1ad4:	f0 80       	ld	r15, Z
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	c2 81       	ldd	r28, Z+2	; 0x02
    1ada:	d3 81       	ldd	r29, Z+3	; 0x03
    1adc:	cf 0d       	add	r28, r15
    1ade:	d1 1d       	adc	r29, r1
    1ae0:	d3 83       	std	Z+3, r29	; 0x03
    1ae2:	c2 83       	std	Z+2, r28	; 0x02
			packetString[i + PACKET_HEADER_NUM  + 2 ]= dataString[i];
    1ae4:	e6 01       	movw	r28, r12
    1ae6:	e8 81       	ld	r30, Y
    1ae8:	a2 0f       	add	r26, r18
    1aea:	b3 1f       	adc	r27, r19
    1aec:	13 96       	adiw	r26, 0x03	; 3
    1aee:	ec 93       	st	X, r30
		}
		
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
		
		for (i=0; i < dataLength ; i++)
    1af0:	0f 5f       	subi	r16, 0xFF	; 255
    1af2:	a0 2f       	mov	r26, r16
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	a4 17       	cp	r26, r20
    1af8:	b5 07       	cpc	r27, r21
    1afa:	44 f3       	brlt	.-48     	; 0x1acc <_ZN6Packet12createPacketEPciS0_+0x5a>
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <_ZN6Packet12createPacketEPciS0_+0x96>
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH  ]= '\r';
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH + 1 ]= '\n';
		
		for (i=(PACKET_HEADER_NUM  + dataLength +2 ) ; i < (PACKET_LENGTH - 2) ; i++)
		{
			packetString[ i ]= 0x00;
    1afe:	f9 01       	movw	r30, r18
    1b00:	e1 0f       	add	r30, r17
    1b02:	f1 1d       	adc	r31, r1
    1b04:	10 82       	st	Z, r1
			packetString[i + PACKET_HEADER_NUM  + 2 ]= dataString[i];
		}
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH  ]= '\r';
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH + 1 ]= '\n';
		
		for (i=(PACKET_HEADER_NUM  + dataLength +2 ) ; i < (PACKET_LENGTH - 2) ; i++)
    1b06:	1f 5f       	subi	r17, 0xFF	; 255
    1b08:	10 34       	cpi	r17, 0x40	; 64
    1b0a:	c9 f7       	brne	.-14     	; 0x1afe <_ZN6Packet12createPacketEPciS0_+0x8c>
		{
			packetString[ i ]= 0x00;
		}
		
		packetString[PACKET_LENGTH  - 2 ] = (crcPacket >> 8) ;
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	e0 5c       	subi	r30, 0xC0	; 192
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	dc 01       	movw	r26, r24
    1b14:	13 96       	adiw	r26, 0x03	; 3
    1b16:	4c 91       	ld	r20, X
    1b18:	13 97       	sbiw	r26, 0x03	; 3
    1b1a:	40 83       	st	Z, r20
		packetString[PACKET_LENGTH - 1 ] = (crcPacket & 0xFF );
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	ef 5b       	subi	r30, 0xBF	; 191
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	12 96       	adiw	r26, 0x02	; 2
    1b24:	8c 91       	ld	r24, X
    1b26:	80 83       	st	Z, r24
	{
		packetString[i]= 0x00;
	}
	
	
}
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	08 95       	ret
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
	{
		for (i=0; i < PACKET_HEADER_NUM ; i++)
		{
			packetString[i] = header[i];
    1b38:	14 96       	adiw	r26, 0x04	; 4
    1b3a:	ec 91       	ld	r30, X
    1b3c:	e9 01       	movw	r28, r18
    1b3e:	e8 83       	st	Y, r30
		}
		
		packetString[PACKET_HEADER_NUM  ] = (dataLength >> 8);
    1b40:	19 82       	std	Y+1, r1	; 0x01
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
    1b42:	4a 83       	std	Y+2, r20	; 0x02
    1b44:	14 2f       	mov	r17, r20
    1b46:	1d 5f       	subi	r17, 0xFD	; 253
    1b48:	be cf       	rjmp	.-132    	; 0x1ac6 <_ZN6Packet12createPacketEPciS0_+0x54>

00001b4a <_ZN6Packet11extractDataEPcRi>:
	
	
}

bool Packet::extractData(char *packetString ,int &dataLength )
{
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	db 01       	movw	r26, r22
bool Packet::isHeaderDetected( char *string )
{
	unsigned char i;
	for (i=0; i < PACKET_HEADER_NUM ; i++)
	{
		if (string[i] != header[i])
    1b50:	2c 91       	ld	r18, X
    1b52:	fc 01       	movw	r30, r24
    1b54:	84 81       	ldd	r24, Z+4	; 0x04
    1b56:	28 13       	cpse	r18, r24
    1b58:	41 c0       	rjmp	.+130    	; 0x1bdc <_ZN6Packet11extractDataEPcRi+0x92>
	int crcRecived=0, crcClaculated, tempDataLength =0;
	if (isHeaderDetected(packetString))
	{
		
		tempDataLength |= (packetString[PACKET_HEADER_NUM] & 0xFF);
		tempDataLength <<=8;
    1b5a:	11 96       	adiw	r26, 0x01	; 1
    1b5c:	3c 91       	ld	r19, X
    1b5e:	11 97       	sbiw	r26, 0x01	; 1
    1b60:	20 e0       	ldi	r18, 0x00	; 0
		tempDataLength |= (packetString[PACKET_HEADER_NUM + 1] & 0xFF );
    1b62:	12 96       	adiw	r26, 0x02	; 2
    1b64:	8c 91       	ld	r24, X
    1b66:	12 97       	sbiw	r26, 0x02	; 2
    1b68:	28 2b       	or	r18, r24
		
		if (tempDataLength > DATA_LENGTH )
    1b6a:	2e 33       	cpi	r18, 0x3E	; 62
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	b0 f5       	brcc	.+108    	; 0x1bdc <_ZN6Packet11extractDataEPcRi+0x92>
		{
			return false;
		}
		
		dataLength = tempDataLength;
    1b70:	fa 01       	movw	r30, r20
    1b72:	31 83       	std	Z+1, r19	; 0x01
    1b74:	20 83       	st	Z, r18
		
		crcClaculated = calculatedCRC(packetString + PACKET_HEADER_NUM + 2 , tempDataLength);
    1b76:	6d 5f       	subi	r22, 0xFD	; 253
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
int Packet::calculatedCRC( char *string , int strSize )
{
	unsigned char i;
	int calcCRC=0;
	
	for (i=0; i < strSize ; i++)
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	21 15       	cp	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	e9 f0       	breq	.+58     	; 0x1bbe <_ZN6Packet11extractDataEPcRi+0x74>
    1b84:	e0 e0       	ldi	r30, 0x00	; 0
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
	{
		calcCRC += string[i];
    1b8a:	eb 01       	movw	r28, r22
    1b8c:	c8 0f       	add	r28, r24
    1b8e:	d9 1f       	adc	r29, r25
    1b90:	88 81       	ld	r24, Y
    1b92:	48 0f       	add	r20, r24
    1b94:	51 1d       	adc	r21, r1
int Packet::calculatedCRC( char *string , int strSize )
{
	unsigned char i;
	int calcCRC=0;
	
	for (i=0; i < strSize ; i++)
    1b96:	ef 5f       	subi	r30, 0xFF	; 255
    1b98:	8e 2f       	mov	r24, r30
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	a4 f3       	brlt	.-24     	; 0x1b8a <_ZN6Packet11extractDataEPcRi+0x40>
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
		dataLength = tempDataLength;
		
		crcClaculated = calculatedCRC(packetString + PACKET_HEADER_NUM + 2 , tempDataLength);
		
		for (i=0; i< tempDataLength ; i++)
			 packetString[i] = packetString[i + PACKET_HEADER_NUM + 2 ];
    1ba8:	fd 01       	movw	r30, r26
    1baa:	e8 0f       	add	r30, r24
    1bac:	f9 1f       	adc	r31, r25
    1bae:	83 81       	ldd	r24, Z+3	; 0x03
    1bb0:	80 83       	st	Z, r24
		
		dataLength = tempDataLength;
		
		crcClaculated = calculatedCRC(packetString + PACKET_HEADER_NUM + 2 , tempDataLength);
		
		for (i=0; i< tempDataLength ; i++)
    1bb2:	6f 5f       	subi	r22, 0xFF	; 255
    1bb4:	86 2f       	mov	r24, r22
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	82 17       	cp	r24, r18
    1bba:	93 07       	cpc	r25, r19
    1bbc:	ac f3       	brlt	.-22     	; 0x1ba8 <_ZN6Packet11extractDataEPcRi+0x5e>
			 packetString[i] = packetString[i + PACKET_HEADER_NUM + 2 ];

		crcRecived |= (packetString[PACKET_LENGTH - 2 ] & 0xFF) ;
    1bbe:	fd 01       	movw	r30, r26
    1bc0:	e0 5c       	subi	r30, 0xC0	; 192
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
		
		crcRecived <<= 8;
    1bc4:	90 81       	ld	r25, Z
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
		crcRecived |=(packetString[PACKET_LENGTH - 1 ]  & 0xFF);
    1bc8:	af 5b       	subi	r26, 0xBF	; 191
    1bca:	bf 4f       	sbci	r27, 0xFF	; 255
    1bcc:	2c 91       	ld	r18, X
    1bce:	bc 01       	movw	r22, r24
    1bd0:	62 2b       	or	r22, r18
    1bd2:	9b 01       	movw	r18, r22
		
		if (crcRecived == crcClaculated)
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	24 17       	cp	r18, r20
    1bd8:	35 07       	cpc	r19, r21
    1bda:	09 f0       	breq	.+2      	; 0x1bde <_ZN6Packet11extractDataEPcRi+0x94>
		{
			return true;
		}
	}
	return false;
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
	//return true;
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <_ZN6Serial4initEi>:
			// Communication Parameters: 8 Data, 1 Stop, No Parity
			// USART Receiver: On
			// USART Transmitter: On
			// USART Mode: Asynchronous
			// USART Baud Rate: 19200
			UCSRA=0x00;
    1be4:	1b b8       	out	0x0b, r1	; 11
			UCSRB=0x18;
    1be6:	88 e1       	ldi	r24, 0x18	; 24
    1be8:	8a b9       	out	0x0a, r24	; 10
			UCSRC=0x86;
    1bea:	86 e8       	ldi	r24, 0x86	; 134
    1bec:	80 bd       	out	0x20, r24	; 32
			UBRRH=0x00;
    1bee:	10 bc       	out	0x20, r1	; 32
	//UCSRA=0x00;
	//UCSRB=0x98;
	//UCSRC=0x86;
	//UBRRH=0x00;
	//UBRRL=0x67;
	switch (baudRate)
    1bf0:	60 38       	cpi	r22, 0x80	; 128
    1bf2:	85 e2       	ldi	r24, 0x25	; 37
    1bf4:	78 07       	cpc	r23, r24
    1bf6:	19 f0       	breq	.+6      	; 0x1bfe <_ZN6Serial4initEi+0x1a>
    1bf8:	61 15       	cp	r22, r1
    1bfa:	7b 44       	sbci	r23, 0x4B	; 75
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <_ZN6Serial4initEi+0x20>
			// USART Baud Rate: 9600
			UCSRA=0x00;
			UCSRB=0x18;
			UCSRC=0x86;
			UBRRH=0x00;
			UBRRL=0x33;
    1bfe:	83 e3       	ldi	r24, 0x33	; 51
    1c00:	89 b9       	out	0x09, r24	; 9
    1c02:	08 95       	ret
			// USART Baud Rate: 19200
			UCSRA=0x00;
			UCSRB=0x18;
			UCSRC=0x86;
			UBRRH=0x00;
			UBRRL=0x19;
    1c04:	89 e1       	ldi	r24, 0x19	; 25
    1c06:	89 b9       	out	0x09, r24	; 9
			break;
    1c08:	08 95       	ret

00001c0a <_ZN6Serial7putCharEc>:
}

void Serial::putChar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
    1c0a:	5d 9b       	sbis	0x0b, 5	; 11
    1c0c:	fe cf       	rjmp	.-4      	; 0x1c0a <_ZN6Serial7putCharEc>
	// Start transmission
	UDR = data;
    1c0e:	6c b9       	out	0x0c, r22	; 12
    1c10:	08 95       	ret

00001c12 <_ZN6Serial15isSerialTxEmptyEv>:
}

bool Serial::isSerialTxEmpty()
{
	return (UCSRA & (_BV(UDRE)));
    1c12:	8b b1       	in	r24, 0x0b	; 11
}
    1c14:	85 fb       	bst	r24, 5
    1c16:	88 27       	eor	r24, r24
    1c18:	80 f9       	bld	r24, 0
    1c1a:	08 95       	ret

00001c1c <_ZN6Serial8put16BitEi>:
}

void Serial::putChar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
    1c1c:	5d 9b       	sbis	0x0b, 5	; 11
    1c1e:	fe cf       	rjmp	.-4      	; 0x1c1c <_ZN6Serial8put16BitEi>
	// Start transmission
	UDR = data;
    1c20:	7c b9       	out	0x0c, r23	; 12
}

void Serial::putChar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
    1c22:	5d 9b       	sbis	0x0b, 5	; 11
    1c24:	fe cf       	rjmp	.-4      	; 0x1c22 <_ZN6Serial8put16BitEi+0x6>
	// Start transmission
	UDR = data;
    1c26:	6c b9       	out	0x0c, r22	; 12
    1c28:	08 95       	ret

00001c2a <_ZN6Serial14isSerialRxFullEv>:
		putChar(pkt[i]);
}

bool Serial::isSerialRxFull()
{
	return (UCSRA & (_BV(RXC)));
    1c2a:	8b b1       	in	r24, 0x0b	; 11
}
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	88 27       	eor	r24, r24
    1c30:	88 1f       	adc	r24, r24
    1c32:	08 95       	ret

00001c34 <_ZN11StationInfoC1Ev>:
#include "StationInfo.h"

// default constructor
StationInfo::StationInfo()
{
	structStartPointer = (char*)&stationInfoStructure;
    1c34:	fc 01       	movw	r30, r24
    1c36:	95 af       	std	Z+61, r25	; 0x3d
    1c38:	84 af       	std	Z+60, r24	; 0x3c
	stationInfoStructure.stationNumber = -1;
    1c3a:	2f ef       	ldi	r18, 0xFF	; 255
    1c3c:	22 83       	std	Z+2, r18	; 0x02
    1c3e:	08 95       	ret

00001c40 <_ZN11StationInfoD1Ev>:
} //StationInfo

// default destructor
StationInfo::~StationInfo()
    1c40:	08 95       	ret

00001c42 <_ZN11TransceiverC1Ev>:
#include "definition.h"
#include "GlobalVariables.h"
#include "functions.h"

// default constructor
Transceiver::Transceiver()
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	ec 01       	movw	r28, r24
    1c48:	05 96       	adiw	r24, 0x05	; 5
    1c4a:	0e 94 56 00 	call	0xac	; 0xac <_ZN7ADF7020C1Ev>
    1c4e:	ce 01       	movw	r24, r28
    1c50:	42 96       	adiw	r24, 0x12	; 18
    1c52:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN4FIFOC1Ev>
{
	preamble[0]=0x12;
    1c56:	82 e1       	ldi	r24, 0x12	; 18
    1c58:	8a 83       	std	Y+2, r24	; 0x02
	preamble[1]=0x34;
    1c5a:	84 e3       	ldi	r24, 0x34	; 52
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
	preamble[2]=0x56;
    1c5e:	86 e5       	ldi	r24, 0x56	; 86
    1c60:	8c 83       	std	Y+4, r24	; 0x04
	
} //Transceiver
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <_ZN11TransceiverD1Ev>:

// default destructor
Transceiver::~Transceiver()
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	ec 01       	movw	r28, r24
    1c6e:	42 96       	adiw	r24, 0x12	; 18
    1c70:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN4FIFOD1Ev>
    1c74:	ce 01       	movw	r24, r28
    1c76:	05 96       	adiw	r24, 0x05	; 5
{
} //~Transceiver
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
	preamble[2]=0x56;
	
} //Transceiver

// default destructor
Transceiver::~Transceiver()
    1c7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_ZN7ADF7020D1Ev>

00001c80 <_ZN11Transceiver7setModeE14TranceiverMode>:

//////////////////////////////////////////////////////////////////////////

void Transceiver::setMode( TranceiverMode mode )
{
	myadf7020.setMode(mode);
    1c80:	05 96       	adiw	r24, 0x05	; 5
    1c82:	0c 94 66 05 	jmp	0xacc	; 0xacc <_ZN7ADF70207setModeE14TranceiverMode>

00001c86 <_ZN11Transceiver11adfReadbackEc>:
	myadf7020.ADF_Program_Check();
}

uint16_t Transceiver::adfReadback( char readBackMode )
{
	return myadf7020.adfReadback(readBackMode);
    1c86:	05 96       	adiw	r24, 0x05	; 5
    1c88:	0c 94 48 03 	jmp	0x690	; 0x690 <_ZN7ADF702011adfReadbackEc>

00001c8c <_ZN11Transceiver16transmitTimerISREv>:
{
	myadf7020.receiveInt2ISR();
}

void Transceiver::transmitTimerISR()
{
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	8c 01       	movw	r16, r24
	unsigned char temp;
	timeoutCounter ++;
    1c96:	20 91 dc 01 	lds	r18, 0x01DC
    1c9a:	30 91 dd 01 	lds	r19, 0x01DD
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	30 93 dd 01 	sts	0x01DD, r19
    1ca6:	20 93 dc 01 	sts	0x01DC, r18
	if (searchdelaycounterL > 0)
    1caa:	80 91 96 01 	lds	r24, 0x0196
    1cae:	90 91 97 01 	lds	r25, 0x0197
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	89 f0       	breq	.+34     	; 0x1cd8 <_ZN11Transceiver16transmitTimerISREv+0x4c>
		searchdelaycounterL--;
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	90 93 97 01 	sts	0x0197, r25
    1cbc:	80 93 96 01 	sts	0x0196, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1cc0:	e8 01       	movw	r28, r16
    1cc2:	25 96       	adiw	r28, 0x05	; 5
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN7ADF702010isReceiverEv>
		searchdelaycounterH--;
	}
	//else
	//	serial.putChar('F');
		
	if(isReceiver())
    1cca:	88 23       	and	r24, r24
    1ccc:	f9 f0       	breq	.+62     	; 0x1d0c <_ZN11Transceiver16transmitTimerISREv+0x80>
			//serial.putChar(temp);
		}
	}
	
	
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret
{
	unsigned char temp;
	timeoutCounter ++;
	if (searchdelaycounterL > 0)
		searchdelaycounterL--;
	else if (searchdelaycounterH > 0)
    1cd8:	80 91 98 01 	lds	r24, 0x0198
    1cdc:	90 91 99 01 	lds	r25, 0x0199
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	71 f3       	breq	.-36     	; 0x1cc0 <_ZN11Transceiver16transmitTimerISREv+0x34>
	{
		searchdelaycounterL = searchdelaymaxL;
    1ce4:	20 91 92 01 	lds	r18, 0x0192
    1ce8:	30 91 93 01 	lds	r19, 0x0193
    1cec:	30 93 97 01 	sts	0x0197, r19
    1cf0:	20 93 96 01 	sts	0x0196, r18
		searchdelaycounterH--;
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	90 93 99 01 	sts	0x0199, r25
    1cfa:	80 93 98 01 	sts	0x0198, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1cfe:	e8 01       	movw	r28, r16
    1d00:	25 96       	adiw	r28, 0x05	; 5
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN7ADF702010isReceiverEv>
		searchdelaycounterH--;
	}
	//else
	//	serial.putChar('F');
		
	if(isReceiver())
    1d08:	81 11       	cpse	r24, r1
    1d0a:	e1 cf       	rjmp	.-62     	; 0x1cce <_ZN11Transceiver16transmitTimerISREv+0x42>
		return;
	else
	{
		myadf7020.transmitTimerISR();
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN7ADF702016transmitTimerISREv>
	return myadf7020.isReceiver();
}

bool Transceiver::isTransmitterReady()
{
	return myadf7020.isTransmitterReady();
    1d12:	ce 01       	movw	r24, r28
    1d14:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN7ADF702018isTransmitterReadyEv>
		return;
	else
	{
		myadf7020.transmitTimerISR();

		if (isTransmitterReady())
    1d18:	88 23       	and	r24, r24
    1d1a:	c9 f2       	breq	.-78     	; 0x1cce <_ZN11Transceiver16transmitTimerISREv+0x42>
		{
			
			if (transmittedByteCounter > 39 )
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	88 32       	cpi	r24, 0x28	; 40
    1d24:	91 05       	cpc	r25, r1
    1d26:	bc f4       	brge	.+46     	; 0x1d56 <_ZN11Transceiver16transmitTimerISREv+0xca>
			{
				temp = dataBuffer.readByte();
				//serial.putChar(temp);
				temp ^= 0xAA;
			}
			else if (transmittedByteCounter == 37)
    1d28:	85 32       	cpi	r24, 0x25	; 37
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	d9 f0       	breq	.+54     	; 0x1d64 <_ZN11Transceiver16transmitTimerISREv+0xd8>
				temp = preamble[0];
			else if (transmittedByteCounter == 38)
    1d2e:	86 32       	cpi	r24, 0x26	; 38
    1d30:	91 05       	cpc	r25, r1
    1d32:	d9 f0       	breq	.+54     	; 0x1d6a <_ZN11Transceiver16transmitTimerISREv+0xde>
				temp = preamble[1];
			else if (transmittedByteCounter == 39)
    1d34:	87 97       	sbiw	r24, 0x27	; 39
    1d36:	e1 f0       	breq	.+56     	; 0x1d70 <_ZN11Transceiver16transmitTimerISREv+0xe4>
				temp = preamble[2];
			else
				temp = 0xAA;
    1d38:	6a ea       	ldi	r22, 0xAA	; 170
	
}

void Transceiver::sendByte( char data )
{
	myadf7020.sendByte(data);
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN7ADF70208sendByteEc>
				temp = 0xAA;
			
			
			sendByte(temp);
			//serial.putChar(temp);
			transmittedByteCounter ++ ;
    1d40:	f8 01       	movw	r30, r16
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
			//serial.putChar(temp);
		}
	}
	
	
}
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret
		if (isTransmitterReady())
		{
			
			if (transmittedByteCounter > 39 )
			{
				temp = dataBuffer.readByte();
    1d56:	c8 01       	movw	r24, r16
    1d58:	42 96       	adiw	r24, 0x12	; 18
    1d5a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN4FIFO8readByteEv>
				//serial.putChar(temp);
				temp ^= 0xAA;
    1d5e:	6a ea       	ldi	r22, 0xAA	; 170
    1d60:	68 27       	eor	r22, r24
    1d62:	eb cf       	rjmp	.-42     	; 0x1d3a <_ZN11Transceiver16transmitTimerISREv+0xae>
			}
			else if (transmittedByteCounter == 37)
				temp = preamble[0];
    1d64:	f8 01       	movw	r30, r16
    1d66:	62 81       	ldd	r22, Z+2	; 0x02
    1d68:	e8 cf       	rjmp	.-48     	; 0x1d3a <_ZN11Transceiver16transmitTimerISREv+0xae>
			else if (transmittedByteCounter == 38)
				temp = preamble[1];
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	63 81       	ldd	r22, Z+3	; 0x03
    1d6e:	e5 cf       	rjmp	.-54     	; 0x1d3a <_ZN11Transceiver16transmitTimerISREv+0xae>
			else if (transmittedByteCounter == 39)
				temp = preamble[2];
    1d70:	f8 01       	movw	r30, r16
    1d72:	64 81       	ldd	r22, Z+4	; 0x04
    1d74:	e2 cf       	rjmp	.-60     	; 0x1d3a <_ZN11Transceiver16transmitTimerISREv+0xae>

00001d76 <_ZN11Transceiver10isReceiverEv>:
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1d76:	05 96       	adiw	r24, 0x05	; 5
    1d78:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <_ZN7ADF702010isReceiverEv>

00001d7c <_ZN11Transceiver10changeModeEv>:
{
	return myadf7020.isTransmitterReady();
}

void Transceiver::changeMode( void )
{
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	ec 01       	movw	r28, r24
	char intTemp;
	intTemp = resetAndStoreIntrruptFlag();
    1d88:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_Z25resetAndStoreIntrruptFlagv>
    1d8c:	f8 2e       	mov	r15, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1d8e:	8e 01       	movw	r16, r28
    1d90:	0b 5f       	subi	r16, 0xFB	; 251
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	c8 01       	movw	r24, r16
    1d96:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN7ADF702010isReceiverEv>
void Transceiver::changeMode( void )
{
	char intTemp;
	intTemp = resetAndStoreIntrruptFlag();
	
	if (isReceiver())
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	17 c0       	rjmp	.+46     	; 0x1dcc <_ZN11Transceiver10changeModeEv+0x50>
		dataBuffer.clearFifo();
		transmittedByteCounter = 0;
	}
	else
	{
		myadf7020.adf7020_ChangeMode(TRANSCEIVER_MODE_RECEIVER);
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>
		serialTxDataBuffer.clearFifo();
    1da6:	8e e9       	ldi	r24, 0x9E	; 158
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN4FIFO9clearFifoEv>
		dataBuffer.clearFifo();
    1dae:	ce 01       	movw	r24, r28
    1db0:	42 96       	adiw	r24, 0x12	; 18
    1db2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN4FIFO9clearFifoEv>
	}
	
	GIFR &=0x1F;
    1db6:	9a b7       	in	r25, 0x3a	; 58
    1db8:	9f 71       	andi	r25, 0x1F	; 31
    1dba:	9a bf       	out	0x3a, r25	; 58
	
	restoreIntrrupt(intTemp);
    1dbc:	8f 2d       	mov	r24, r15
}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
		dataBuffer.clearFifo();
	}
	
	GIFR &=0x1F;
	
	restoreIntrrupt(intTemp);
    1dc8:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <_Z15restoreIntrruptc>
	char intTemp;
	intTemp = resetAndStoreIntrruptFlag();
	
	if (isReceiver())
	{
		myadf7020.adf7020_ChangeMode(TRANSCEIVER_MODE_TRANSMITTER);
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	c8 01       	movw	r24, r16
    1dd0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>
		dataBuffer.clearFifo();
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	42 96       	adiw	r24, 0x12	; 18
    1dd8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN4FIFO9clearFifoEv>
		transmittedByteCounter = 0;
    1ddc:	19 82       	std	Y+1, r1	; 0x01
    1dde:	18 82       	st	Y, r1
    1de0:	ea cf       	rjmp	.-44     	; 0x1db6 <_ZN11Transceiver10changeModeEv+0x3a>

00001de2 <_ZN11Transceiver11writePacketEPc>:
	
	restoreIntrrupt(intTemp);
}

bool Transceiver::writePacket( char *str )
{
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
	dataBuffer.writeString(str , PACKET_LENGTH );
    1de6:	ec 01       	movw	r28, r24
    1de8:	62 96       	adiw	r28, 0x12	; 18
    1dea:	42 e4       	ldi	r20, 0x42	; 66
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	ce 01       	movw	r24, r28
    1df0:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN4FIFO11writeStringEPci>
	
	//add three byte for correct send data length
	dataBuffer.writeByte(0x00);
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	ce 01       	movw	r24, r28
    1df8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
	dataBuffer.writeByte(0x00);
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	ce 01       	movw	r24, r28
    1e00:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
	dataBuffer.writeByte(0x00);
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	ce 01       	movw	r24, r28
    1e08:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
	
	return true;
}
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	08 95       	ret

00001e14 <_ZN11Transceiver17getFifoFullLengthEv>:
	//return true;
//}

int Transceiver::getFifoFullLength()
{
	return dataBuffer.getFifoFullLength();
    1e14:	42 96       	adiw	r24, 0x12	; 18
    1e16:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <_ZN4FIFO17getFifoFullLengthEv>

00001e1a <_ZN11Transceiver18readReceivedPacketEPc>:
	//for (int i=0 ; i<PACKET_LENGTH  ;i++ )
	//{
		//serial.putChar(dataBuffer.readByte());
	//}
	//sei();
	dataBuffer.readString(str , PACKET_LENGTH );
    1e1a:	42 e4       	ldi	r20, 0x42	; 66
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	42 96       	adiw	r24, 0x12	; 18
    1e20:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN4FIFO10readStringEPci>
	return true;
}
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	08 95       	ret

00001e28 <_ZN11Transceiver18isPreambleDetectedEv>:
}

//////////////////////////////////////////////////////////////////////////
bool Transceiver::isPreambleDetected()
{
	return myadf7020.isPreambleDetected();
    1e28:	05 96       	adiw	r24, 0x05	; 5
    1e2a:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <_ZN7ADF702018isPreambleDetectedEv>

00001e2e <__vector_2>:



///////////////////////////////////////////////////
ISR(INT1_vect)
{
    1e2e:	1f 92       	push	r1
    1e30:	0f 92       	push	r0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	0f 92       	push	r0
    1e36:	11 24       	eor	r1, r1
    1e38:	2f 93       	push	r18
    1e3a:	3f 93       	push	r19
    1e3c:	4f 93       	push	r20
    1e3e:	5f 93       	push	r21
    1e40:	6f 93       	push	r22
    1e42:	7f 93       	push	r23
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
}

void Transceiver::receiveInt1ISR()
{
	unsigned char temp;
	myadf7020.receiveInt1ISR();
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN7ADF702014receiveInt1ISREv>
	if (myadf7020.isNewDataAvailable())
    1e58:	80 e2       	ldi	r24, 0x20	; 32
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN7ADF702018isNewDataAvailableEv>
    1e60:	81 11       	cpse	r24, r1
    1e62:	11 c0       	rjmp	.+34     	; 0x1e86 <__vector_2+0x58>

///////////////////////////////////////////////////
ISR(INT1_vect)
{
	transceiver.receiveInt1ISR();
}
    1e64:	ff 91       	pop	r31
    1e66:	ef 91       	pop	r30
    1e68:	bf 91       	pop	r27
    1e6a:	af 91       	pop	r26
    1e6c:	9f 91       	pop	r25
    1e6e:	8f 91       	pop	r24
    1e70:	7f 91       	pop	r23
    1e72:	6f 91       	pop	r22
    1e74:	5f 91       	pop	r21
    1e76:	4f 91       	pop	r20
    1e78:	3f 91       	pop	r19
    1e7a:	2f 91       	pop	r18
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	0f 90       	pop	r0
    1e82:	1f 90       	pop	r1
    1e84:	18 95       	reti
{
	unsigned char temp;
	myadf7020.receiveInt1ISR();
	if (myadf7020.isNewDataAvailable())
	{
		temp =(myadf7020.receiveByte());
    1e86:	80 e2       	ldi	r24, 0x20	; 32
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN7ADF702011receiveByteEv>
		temp ^= 0xAA ;
    1e8e:	6a ea       	ldi	r22, 0xAA	; 170
    1e90:	68 27       	eor	r22, r24
		dataBuffer.writeByte(temp);
    1e92:	8d e2       	ldi	r24, 0x2D	; 45
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
		receivedByteCounter++;
    1e9a:	80 91 2c 03 	lds	r24, 0x032C
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	80 93 2c 03 	sts	0x032C, r24
		
		//serial.putChar(temp);
		
		//receivedByteCounter = PACKET_LENGTH ;
		if (receivedByteCounter > PACKET_LENGTH - 1 )
    1ea4:	82 34       	cpi	r24, 0x42	; 66
    1ea6:	f0 f2       	brcs	.-68     	; 0x1e64 <__vector_2+0x36>
		{
			myadf7020.clearPreaambleDetect();
    1ea8:	80 e2       	ldi	r24, 0x20	; 32
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN7ADF702020clearPreaambleDetectEv>
			receivedByteCounter = 0;
    1eb0:	10 92 2c 03 	sts	0x032C, r1
    1eb4:	d7 cf       	rjmp	.-82     	; 0x1e64 <__vector_2+0x36>

00001eb6 <__vector_3>:
{
	transceiver.receiveInt1ISR();
}

ISR(INT2_vect)
{
    1eb6:	1f 92       	push	r1
    1eb8:	0f 92       	push	r0
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	0f 92       	push	r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	2f 93       	push	r18
    1ec2:	3f 93       	push	r19
    1ec4:	4f 93       	push	r20
    1ec6:	5f 93       	push	r21
    1ec8:	6f 93       	push	r22
    1eca:	7f 93       	push	r23
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	af 93       	push	r26
    1ed2:	bf 93       	push	r27
    1ed4:	ef 93       	push	r30
    1ed6:	ff 93       	push	r31

}

void Transceiver::receiveInt2ISR()
{
	myadf7020.receiveInt2ISR();
    1ed8:	80 e2       	ldi	r24, 0x20	; 32
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN7ADF702014receiveInt2ISREv>
}

ISR(INT2_vect)
{
	transceiver.receiveInt2ISR();
}
    1ee0:	ff 91       	pop	r31
    1ee2:	ef 91       	pop	r30
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_7>:

ISR(TIMER1_COMPA_vect)
// Timer 1 output compare A interrupt service routine
//interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	2f 93       	push	r18
    1f0e:	3f 93       	push	r19
    1f10:	4f 93       	push	r20
    1f12:	5f 93       	push	r21
    1f14:	6f 93       	push	r22
    1f16:	7f 93       	push	r23
    1f18:	8f 93       	push	r24
    1f1a:	9f 93       	push	r25
    1f1c:	af 93       	push	r26
    1f1e:	bf 93       	push	r27
    1f20:	ef 93       	push	r30
    1f22:	ff 93       	push	r31
	TCNT1H=0x00;
    1f24:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=44;
    1f26:	8c e2       	ldi	r24, 0x2C	; 44
    1f28:	8c bd       	out	0x2c, r24	; 44
	TCNT0 = 0;
    1f2a:	12 be       	out	0x32, r1	; 50
	transceiver.transmitTimerISR();
    1f2c:	8b e1       	ldi	r24, 0x1B	; 27
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN11Transceiver16transmitTimerISREv>

	if (serial.isSerialRxFull())
    1f34:	8f ea       	ldi	r24, 0xAF	; 175
    1f36:	93 e0       	ldi	r25, 0x03	; 3
    1f38:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN6Serial14isSerialRxFullEv>
    1f3c:	88 23       	and	r24, r24
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_7+0x48>
	{
		serialRxDataBuffer.writeByte(UDR);//TODO: read serial
    1f40:	6c b1       	in	r22, 0x0c	; 12
    1f42:	81 e2       	ldi	r24, 0x21	; 33
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4FIFO9writeByteEc>
	}
}
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__usmulhisi3>:
    1f6c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__umulhisi3>

00001f70 <__usmulhisi3_tail>:
    1f70:	b7 ff       	sbrs	r27, 7
    1f72:	08 95       	ret
    1f74:	82 1b       	sub	r24, r18
    1f76:	93 0b       	sbc	r25, r19
    1f78:	08 95       	ret

00001f7a <__mulshisi3>:
    1f7a:	b7 ff       	sbrs	r27, 7
    1f7c:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__muluhisi3>

00001f80 <__mulohisi3>:
    1f80:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__muluhisi3>
    1f84:	82 1b       	sub	r24, r18
    1f86:	93 0b       	sbc	r25, r19
    1f88:	08 95       	ret

00001f8a <__tablejump2__>:
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31

00001f8e <__tablejump__>:
    1f8e:	05 90       	lpm	r0, Z+
    1f90:	f4 91       	lpm	r31, Z
    1f92:	e0 2d       	mov	r30, r0
    1f94:	09 94       	ijmp

00001f96 <__umulhisi3>:
    1f96:	a2 9f       	mul	r26, r18
    1f98:	b0 01       	movw	r22, r0
    1f9a:	b3 9f       	mul	r27, r19
    1f9c:	c0 01       	movw	r24, r0
    1f9e:	a3 9f       	mul	r26, r19
    1fa0:	01 d0       	rcall	.+2      	; 0x1fa4 <__umulhisi3+0xe>
    1fa2:	b2 9f       	mul	r27, r18
    1fa4:	70 0d       	add	r23, r0
    1fa6:	81 1d       	adc	r24, r1
    1fa8:	11 24       	eor	r1, r1
    1faa:	91 1d       	adc	r25, r1
    1fac:	08 95       	ret

00001fae <__muluhisi3>:
    1fae:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__umulhisi3>
    1fb2:	a5 9f       	mul	r26, r21
    1fb4:	90 0d       	add	r25, r0
    1fb6:	b4 9f       	mul	r27, r20
    1fb8:	90 0d       	add	r25, r0
    1fba:	a4 9f       	mul	r26, r20
    1fbc:	80 0d       	add	r24, r0
    1fbe:	91 1d       	adc	r25, r1
    1fc0:	11 24       	eor	r1, r1
    1fc2:	08 95       	ret

00001fc4 <__do_global_dtors>:
    1fc4:	10 e0       	ldi	r17, 0x00	; 0
    1fc6:	c6 e5       	ldi	r28, 0x56	; 86
    1fc8:	d0 e0       	ldi	r29, 0x00	; 0
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <__do_global_dtors+0x10>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__tablejump__>
    1fd2:	22 96       	adiw	r28, 0x02	; 2
    1fd4:	c8 35       	cpi	r28, 0x58	; 88
    1fd6:	d1 07       	cpc	r29, r17
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <__do_global_dtors+0x8>
    1fda:	f8 94       	cli

00001fdc <__stop_program>:
    1fdc:	ff cf       	rjmp	.-2      	; 0x1fdc <__stop_program>
